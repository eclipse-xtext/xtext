<project default="run">
	<!--
	 1. Where to get bundles  = bundles.folder
	 2. standalone jar Version to use = maven.version
	 3. Where to put output = target.folder
	-->

	<property name="target.folder" value="${maven.output}" />
	<property name="bundles.folder" value="${target.folder}/dependencies-mvn/plugins/" />

	<property name="binJarTemp" value="${target.folder}/binJarTemp" />
	<property name="sourceJarTemp" value="${target.folder}/sourceJarTemp" />
	<property name="javadocJarTemp" value="${target.folder}/javadocJarTemp" />
	<condition property="skipSrc">
		<istrue value="${source.skip}" />
	</condition>
	<condition property="skipJavadoc">
		<istrue value="${maven.javadoc.skip}" />
	</condition>

	<target name="run">
		<echo>Used version: ${maven.version}</echo>
		<echo>Used artifactId: ${maven.artifactid}</echo>
		<echo>Working with: ${bundles.folder}</echo>

		<!-- collect xtext/xtend jar file names -->
		<mkdir dir="${bundles.folder}" />
		<fileset dir="${bundles.folder}" id="xtext-xtendJars">
			<include name="*xtext*.jar" />
			<include name="*xtend*.jar" />
			<exclude name="*source_*" />
		</fileset>
		<union id="xtext-xtendJars-ext">
			<resources refid="xtext-xtendJars" />
			<file file="${bundles.folder}/${maven.artifactid}_x.x.x.jar" />
		</union>
		<!-- Extract project name from jar file name -->
		<pathconvert property="project.bin.folders" refid="xtext-xtendJars-ext" pathsep=" " setonempty="false">
			<mapper>
				<regexpmapper handledirsep="yes" from=".*/(.*)_(.*).jar" to="\1/bin/**/*" />
			</mapper>
		</pathconvert>
		<condition property="copy.local.classes">
			<and>
				<istrue value="${local.build}" />
				<isset property="project.bin.folders" />
			</and>
		</condition>

		<echo>Use precompiled Xtext/Xtend classes: ${copy.local.classes}</echo>
		<antcall target="createJars" />
	</target>

	<target name="createJars" depends="createUberjar,createSourcesUberjar,createFakeJavadoc" />

	<!-- - - - - - - - - - - - - - - - - - 
          target: clean                      
         - - - - - - - - - - - - - - - - - -->
	<target name="clean">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${binJarTemp}">
				<include name="**" />
			</fileset>
			<fileset dir="${sourceJarTemp}">
				<include name="**" />
			</fileset>
			<fileset dir="${javadocJarTemp}">
				<include name="**" />
			</fileset>
		</delete>
	</target>

	<!-- ================================= 
          target: createUberjar    Binary           
         ================================= -->
	<target name="createUberjar">
		<!-- TP bundles -->
		<fileset dir="${bundles.folder}" id="binJars">
			<include name="*.jar" />
			<exclude name="*xtext*.jar" if="copy.local.classes" />
			<exclude name="*xtend.*.jar" if="copy.local.classes" />
			<exclude name="*source_*" />
		</fileset>

		<unzip dest="${binJarTemp}">
			<fileset refid="binJars" />
		</unzip>

		<antcall target="copyLocalBin" />

		<antcall target="cleanUpContent">
			<param name="contentDir" value="${binJarTemp}" />
		</antcall>
	</target>

	<target name="copyLocalBin" if="copy.local.classes">
		<!-- Copy bin folders content -->
		<echo>Copy files included in ${project.bin.folders}</echo>
		<fileset id="binFolders" dir="${basedir}/../../plugins" includes="${project.bin.folders}" />
		<copy todir="${binJarTemp}" verbose="true">
			<fileset refid="binFolders" />
			<cutdirsmapper dirs="2" />
		</copy>
	</target>

	<!-- ================================= 
	          target: createSourcesUberjar     Sources   
	         ================================= -->
	<target name="createSourcesUberjar" unless="skipSrc">
		<!-- TP bundles -->
		<fileset dir="${bundles.folder}" id="sourceJars">
			<include name="*source_*.jar" />
		</fileset>

		<unzip dest="${sourceJarTemp}" overwrite="true">
			<fileset refid="sourceJars" />
		</unzip>

		<antcall target="cleanUpContent">
			<param name="contentDir" value="${sourceJarTemp}" />
		</antcall>
	</target>


	<target name="createFakeJavadoc" unless="skipJavadoc">
		<!-- Readme -->
		<echo file="${javadocJarTemp}/readme.txt">Xtext/Xtend javadoc can be found here: http://www.eclipse.org/modeling/tmf/javadoc/</echo>
	</target>


	<!-- clean up equinox stuff, ecore file and some other -->
	<target name="cleanUpContent">
		<delete failonerror="false" verbose="true">
			<fileset dir="${contentDir}">
				<include name="about*" />
				<include name=".*" />
				<include name="plugin.*" />
				<include name="*.png" />
				<!--include name="**/*.ecore" /-->
				<include name="META-INF/**" />
				<include name="testdata/**" />
			</fileset>
		</delete>
		<delete dir="${contentDir}/about_files" />
	</target>

</project>