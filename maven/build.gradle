task compileEclipsePlugins(type: MavenExec) {
	description = 'Compiles all Eclipse plugin projects, so their classes can be used by downstream Gradle projects'
	args 'clean', 'compile', '-Pinclude-unpublished', '-Dmaven.test.skip=true', '-Dmaven.javadoc.skip=true'
	workingDir 'org.eclipse.xtext.tycho.parent'
}

task install(type: MavenExec) {
	description = 'Installs all Maven projects (Eclipse plugins + Maven plugins) into the local repository'
	args 'install', '-Dmaven.test.skip=true', '-Dmaven.javadoc.skip=true'
	workingDir 'org.eclipse.xtext.parent'
}

class MavenExec extends Exec {
	MavenExec() {
		if (org.gradle.internal.os.OperatingSystem.current().windows) {
			executable 'cmd'
			args '/c', "${project.projectDir}/mvnw.bat"
		} else {
			executable "${project.projectDir}/mvnw"
		}
		if (project.gradle.startParameter.refreshDependencies) {
			args '-U'
		}
		if (project.gradle.startParameter.logLevel == LogLevel.DEBUG) {
			args '-X'
		}
		if (project.isBuildServer) {
			args "-Dmaven.repo.local=${project.gradle.gradleUserHomeDir}/.m2"
		}
		args '-T', '1C'
	}
}
