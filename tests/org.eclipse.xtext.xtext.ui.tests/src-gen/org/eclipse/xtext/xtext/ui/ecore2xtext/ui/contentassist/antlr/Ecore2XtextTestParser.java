/*
 * generated by Xtext
 */
package org.eclipse.xtext.xtext.ui.ecore2xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.xtext.ui.ecore2xtext.services.Ecore2XtextTestGrammarAccess;

public class Ecore2XtextTestParser extends AbstractContentAssistParser {
	
	@Inject
	private Ecore2XtextTestGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.xtext.ui.ecore2xtext.ui.contentassist.antlr.internal.InternalEcore2XtextTestParser createParser() {
		org.eclipse.xtext.xtext.ui.ecore2xtext.ui.contentassist.antlr.internal.InternalEcore2XtextTestParser result = new org.eclipse.xtext.xtext.ui.ecore2xtext.ui.contentassist.antlr.internal.InternalEcore2XtextTestParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractAccess().getAlternatives(), "rule__Abstract__Alternatives");
					put(grammarAccess.getConcrete0Access().getAlternatives(), "rule__Concrete0__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getRootAccess().getGroup(), "rule__Root__Group__0");
					put(grammarAccess.getRootAccess().getGroup_4(), "rule__Root__Group_4__0");
					put(grammarAccess.getRootAccess().getGroup_4_3(), "rule__Root__Group_4_3__0");
					put(grammarAccess.getRootAccess().getGroup_5(), "rule__Root__Group_5__0");
					put(grammarAccess.getConcrete0_ImplAccess().getGroup(), "rule__Concrete0_Impl__Group__0");
					put(grammarAccess.getConcrete1_ImplAccess().getGroup(), "rule__Concrete1_Impl__Group__0");
					put(grammarAccess.getDiamondInheritanceAccess().getGroup(), "rule__DiamondInheritance__Group__0");
					put(grammarAccess.getRootAccess().getNameAssignment_2(), "rule__Root__NameAssignment_2");
					put(grammarAccess.getRootAccess().getClassesAssignment_4_2(), "rule__Root__ClassesAssignment_4_2");
					put(grammarAccess.getRootAccess().getClassesAssignment_4_3_1(), "rule__Root__ClassesAssignment_4_3_1");
					put(grammarAccess.getRootAccess().getConcrete0Assignment_5_1(), "rule__Root__Concrete0Assignment_5_1");
					put(grammarAccess.getConcrete0_ImplAccess().getNameAssignment_2(), "rule__Concrete0_Impl__NameAssignment_2");
					put(grammarAccess.getConcrete1_ImplAccess().getNameAssignment_2(), "rule__Concrete1_Impl__NameAssignment_2");
					put(grammarAccess.getDiamondInheritanceAccess().getNameAssignment_2(), "rule__DiamondInheritance__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.xtext.ui.ecore2xtext.ui.contentassist.antlr.internal.InternalEcore2XtextTestParser typedParser = (org.eclipse.xtext.xtext.ui.ecore2xtext.ui.contentassist.antlr.internal.InternalEcore2XtextTestParser) parser;
			typedParser.entryRuleRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Ecore2XtextTestGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Ecore2XtextTestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
