/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug288734TestLanguageGrammarAccess;

public class Bug288734TestLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private Bug288734TestLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug288734TestLanguageParser createParser() {
		org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug288734TestLanguageParser result = new org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug288734TestLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTConstantAccess().getAlternatives(), "rule__TConstant__Alternatives");
					put(grammarAccess.getTStringConstantAccess().getGroup(), "rule__TStringConstant__Group__0");
					put(grammarAccess.getTIntegerConstantAccess().getGroup(), "rule__TIntegerConstant__Group__0");
					put(grammarAccess.getTBooleanConstantAccess().getGroup(), "rule__TBooleanConstant__Group__0");
					put(grammarAccess.getTAnnotationAccess().getGroup(), "rule__TAnnotation__Group__0");
					put(grammarAccess.getModelAccess().getConstantsAssignment(), "rule__Model__ConstantsAssignment");
					put(grammarAccess.getTStringConstantAccess().getAnnotationsAssignment_0(), "rule__TStringConstant__AnnotationsAssignment_0");
					put(grammarAccess.getTStringConstantAccess().getNameAssignment_3(), "rule__TStringConstant__NameAssignment_3");
					put(grammarAccess.getTIntegerConstantAccess().getAnnotationsAssignment_0(), "rule__TIntegerConstant__AnnotationsAssignment_0");
					put(grammarAccess.getTIntegerConstantAccess().getNameAssignment_3(), "rule__TIntegerConstant__NameAssignment_3");
					put(grammarAccess.getTBooleanConstantAccess().getAnnotationsAssignment_0(), "rule__TBooleanConstant__AnnotationsAssignment_0");
					put(grammarAccess.getTBooleanConstantAccess().getNameAssignment_3(), "rule__TBooleanConstant__NameAssignment_3");
					put(grammarAccess.getTAnnotationAccess().getDescriptionAssignment_1(), "rule__TAnnotation__DescriptionAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug288734TestLanguageParser typedParser = (org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug288734TestLanguageParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Bug288734TestLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Bug288734TestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
