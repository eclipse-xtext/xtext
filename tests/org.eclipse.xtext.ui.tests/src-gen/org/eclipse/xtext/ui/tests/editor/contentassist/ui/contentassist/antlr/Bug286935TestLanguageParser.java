/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug286935TestLanguageGrammarAccess;

public class Bug286935TestLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private Bug286935TestLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug286935TestLanguageParser createParser() {
		org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug286935TestLanguageParser result = new org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug286935TestLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStateAccess().getAlternatives_1(), "rule__State__Alternatives_1");
					put(grammarAccess.getStateTypeAccess().getAlternatives(), "rule__StateType__Alternatives");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_1_3(), "rule__State__Group_1_3__0");
					put(grammarAccess.getStateAccess().getGroup_1_4(), "rule__State__Group_1_4__0");
					put(grammarAccess.getStateAccess().getIsInitialAssignment_1_0(), "rule__State__IsInitialAssignment_1_0");
					put(grammarAccess.getStateAccess().getIsFinalAssignment_1_1(), "rule__State__IsFinalAssignment_1_1");
					put(grammarAccess.getStateAccess().getStateKindAssignment_1_2(), "rule__State__StateKindAssignment_1_2");
					put(grammarAccess.getStateAccess().getIsInitialAssignment_1_3_0(), "rule__State__IsInitialAssignment_1_3_0");
					put(grammarAccess.getStateAccess().getStateKindAssignment_1_3_1(), "rule__State__StateKindAssignment_1_3_1");
					put(grammarAccess.getStateAccess().getIsInitialAssignment_1_4_0(), "rule__State__IsInitialAssignment_1_4_0");
					put(grammarAccess.getStateAccess().getStateKindAssignment_1_4_1(), "rule__State__StateKindAssignment_1_4_1");
					put(grammarAccess.getStateAccess().getIsFinalAssignment_1_4_2(), "rule__State__IsFinalAssignment_1_4_2");
					put(grammarAccess.getStateAccess().getStateNameAssignment_3(), "rule__State__StateNameAssignment_3");
					put(grammarAccess.getStateAccess().getLabelAssignment_4(), "rule__State__LabelAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug286935TestLanguageParser typedParser = (org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug286935TestLanguageParser) parser;
			typedParser.entryRuleState();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Bug286935TestLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Bug286935TestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
