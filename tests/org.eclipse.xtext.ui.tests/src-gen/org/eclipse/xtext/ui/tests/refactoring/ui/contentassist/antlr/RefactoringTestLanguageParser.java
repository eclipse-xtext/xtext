/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.refactoring.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.ui.tests.refactoring.services.RefactoringTestLanguageGrammarAccess;

public class RefactoringTestLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private RefactoringTestLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.ui.tests.refactoring.ui.contentassist.antlr.internal.InternalRefactoringTestLanguageParser createParser() {
		org.eclipse.xtext.ui.tests.refactoring.ui.contentassist.antlr.internal.InternalRefactoringTestLanguageParser result = new org.eclipse.xtext.ui.tests.refactoring.ui.contentassist.antlr.internal.InternalRefactoringTestLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getElementAccess().getAlternatives_1_1(), "rule__Element__Alternatives_1_1");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
					put(grammarAccess.getElementAccess().getGroup_1(), "rule__Element__Group_1__0");
					put(grammarAccess.getElementAccess().getGroup_1_1_1(), "rule__Element__Group_1_1_1__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getFQNWithWCAccess().getGroup(), "rule__FQNWithWC__Group__0");
					put(grammarAccess.getMainAccess().getElementsAssignment(), "rule__Main__ElementsAssignment");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getElementAccess().getNameAssignment_0(), "rule__Element__NameAssignment_0");
					put(grammarAccess.getElementAccess().getContainedAssignment_1_1_0(), "rule__Element__ContainedAssignment_1_1_0");
					put(grammarAccess.getElementAccess().getReferencedAssignment_1_1_1_1(), "rule__Element__ReferencedAssignment_1_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.ui.tests.refactoring.ui.contentassist.antlr.internal.InternalRefactoringTestLanguageParser typedParser = (org.eclipse.xtext.ui.tests.refactoring.ui.contentassist.antlr.internal.InternalRefactoringTestLanguageParser) parser;
			typedParser.entryRuleMain();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RefactoringTestLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RefactoringTestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
