/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.ContentAssistContextTestLanguageGrammarAccess;

public class ContentAssistContextTestLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private ContentAssistContextTestLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalContentAssistContextTestLanguageParser createParser() {
		org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalContentAssistContextTestLanguageParser result = new org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalContentAssistContextTestLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFirstLevelAccess().getGroup(), "rule__FirstLevel__Group__0");
					put(grammarAccess.getSecondLevelAAccess().getGroup(), "rule__SecondLevelA__Group__0");
					put(grammarAccess.getSecondLevelBAccess().getGroup(), "rule__SecondLevelB__Group__0");
					put(grammarAccess.getThirdLevelA1Access().getGroup(), "rule__ThirdLevelA1__Group__0");
					put(grammarAccess.getThirdLevelA2Access().getGroup(), "rule__ThirdLevelA2__Group__0");
					put(grammarAccess.getThirdLevelB1Access().getGroup(), "rule__ThirdLevelB1__Group__0");
					put(grammarAccess.getThirdLevelB2Access().getGroup(), "rule__ThirdLevelB2__Group__0");
					put(grammarAccess.getFirstLevelAccess().getSecondLevelAAssignment_0(), "rule__FirstLevel__SecondLevelAAssignment_0");
					put(grammarAccess.getFirstLevelAccess().getSecondLevelBAssignment_1(), "rule__FirstLevel__SecondLevelBAssignment_1");
					put(grammarAccess.getSecondLevelAAccess().getThirdLevelA1Assignment_0(), "rule__SecondLevelA__ThirdLevelA1Assignment_0");
					put(grammarAccess.getSecondLevelAAccess().getThirdLevelA2Assignment_1(), "rule__SecondLevelA__ThirdLevelA2Assignment_1");
					put(grammarAccess.getSecondLevelBAccess().getThirdLevelB1Assignment_0(), "rule__SecondLevelB__ThirdLevelB1Assignment_0");
					put(grammarAccess.getSecondLevelBAccess().getThirdLevelB2Assignment_1(), "rule__SecondLevelB__ThirdLevelB2Assignment_1");
					put(grammarAccess.getThirdLevelA1Access().getNameAssignment_2(), "rule__ThirdLevelA1__NameAssignment_2");
					put(grammarAccess.getThirdLevelA2Access().getNameAssignment_2(), "rule__ThirdLevelA2__NameAssignment_2");
					put(grammarAccess.getThirdLevelB1Access().getNameAssignment_2(), "rule__ThirdLevelB1__NameAssignment_2");
					put(grammarAccess.getThirdLevelB2Access().getNameAssignment_2(), "rule__ThirdLevelB2__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalContentAssistContextTestLanguageParser typedParser = (org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalContentAssistContextTestLanguageParser) parser;
			typedParser.entryRuleFirstLevel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ContentAssistContextTestLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ContentAssistContextTestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
