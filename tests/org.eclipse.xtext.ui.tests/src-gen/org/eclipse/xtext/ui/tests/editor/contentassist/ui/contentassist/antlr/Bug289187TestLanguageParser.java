/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.ui.tests.editor.contentassist.services.Bug289187TestLanguageGrammarAccess;

public class Bug289187TestLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private Bug289187TestLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug289187TestLanguageParser createParser() {
		org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug289187TestLanguageParser result = new org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug289187TestLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_4(), "rule__Class__Group_4__0");
					put(grammarAccess.getClassAccess().getGroup_5(), "rule__Class__Group_5__0");
					put(grammarAccess.getClassAccess().getGroup_5_2(), "rule__Class__Group_5_2__0");
					put(grammarAccess.getClassAccess().getGroup_7(), "rule__Class__Group_7__0");
					put(grammarAccess.getClassAccess().getGroup_8(), "rule__Class__Group_8__0");
					put(grammarAccess.getClassAccess().getGroup_9(), "rule__Class__Group_9__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getModelAccess().getClassesAssignment(), "rule__Model__ClassesAssignment");
					put(grammarAccess.getClassAccess().getAbstractAssignment_0(), "rule__Class__AbstractAssignment_0");
					put(grammarAccess.getClassAccess().getTransientAssignment_1(), "rule__Class__TransientAssignment_1");
					put(grammarAccess.getClassAccess().getNameAssignment_3(), "rule__Class__NameAssignment_3");
					put(grammarAccess.getClassAccess().getSuperClassAssignment_4_1(), "rule__Class__SuperClassAssignment_4_1");
					put(grammarAccess.getClassAccess().getImplementedInterfacesAssignment_5_1(), "rule__Class__ImplementedInterfacesAssignment_5_1");
					put(grammarAccess.getClassAccess().getImplementedInterfacesAssignment_5_2_2(), "rule__Class__ImplementedInterfacesAssignment_5_2_2");
					put(grammarAccess.getClassAccess().getClassNumberAssignment_7_2(), "rule__Class__ClassNumberAssignment_7_2");
					put(grammarAccess.getClassAccess().getQuidAssignment_8_2(), "rule__Class__QuidAssignment_8_2");
					put(grammarAccess.getClassAccess().getDocumentationAssignment_9_2(), "rule__Class__DocumentationAssignment_9_2");
					put(grammarAccess.getClassAccess().getAttributesAssignment_10(), "rule__Class__AttributesAssignment_10");
					put(grammarAccess.getClassAccess().getOperationsAssignment_11(), "rule__Class__OperationsAssignment_11");
					put(grammarAccess.getAttributeAccess().getVisibilityAssignment_0(), "rule__Attribute__VisibilityAssignment_0");
					put(grammarAccess.getAttributeAccess().getNameAssignment_2(), "rule__Attribute__NameAssignment_2");
					put(grammarAccess.getOperationAccess().getVisibilityAssignment_0(), "rule__Operation__VisibilityAssignment_0");
					put(grammarAccess.getOperationAccess().getNameAssignment_2(), "rule__Operation__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug289187TestLanguageParser typedParser = (org.eclipse.xtext.ui.tests.editor.contentassist.ui.contentassist.antlr.internal.InternalBug289187TestLanguageParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Bug289187TestLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Bug289187TestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
