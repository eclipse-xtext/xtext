/*
 * generated by Xtext
 */
package org.eclipse.xtext.builder.tests.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.builder.tests.services.BuilderTestLanguageGrammarAccess;

public class BuilderTestLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private BuilderTestLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.builder.tests.ui.contentassist.antlr.internal.InternalBuilderTestLanguageParser createParser() {
		org.eclipse.xtext.builder.tests.ui.contentassist.antlr.internal.InternalBuilderTestLanguageParser result = new org.eclipse.xtext.builder.tests.ui.contentassist.antlr.internal.InternalBuilderTestLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNamedElementAccess().getAlternatives(), "rule__NamedElement__Alternatives");
					put(grammarAccess.getNamespaceAccess().getGroup(), "rule__Namespace__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
					put(grammarAccess.getElementAccess().getGroup_2(), "rule__Element__Group_2__0");
					put(grammarAccess.getElementAccess().getGroup_3(), "rule__Element__Group_3__0");
					put(grammarAccess.getElementAccess().getGroup_3_2(), "rule__Element__Group_3_2__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getNamespaceAccess().getNameAssignment_1(), "rule__Namespace__NameAssignment_1");
					put(grammarAccess.getNamespaceAccess().getImportsAssignment_3(), "rule__Namespace__ImportsAssignment_3");
					put(grammarAccess.getNamespaceAccess().getElementsAssignment_4(), "rule__Namespace__ElementsAssignment_4");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getElementAccess().getNameAssignment_1(), "rule__Element__NameAssignment_1");
					put(grammarAccess.getElementAccess().getReferencesAssignment_2_1(), "rule__Element__ReferencesAssignment_2_1");
					put(grammarAccess.getElementAccess().getOtherRefsAssignment_3_1(), "rule__Element__OtherRefsAssignment_3_1");
					put(grammarAccess.getElementAccess().getOtherRefsAssignment_3_2_1(), "rule__Element__OtherRefsAssignment_3_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.builder.tests.ui.contentassist.antlr.internal.InternalBuilderTestLanguageParser typedParser = (org.eclipse.xtext.builder.tests.ui.contentassist.antlr.internal.InternalBuilderTestLanguageParser) parser;
			typedParser.entryRuleNamedElement();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BuilderTestLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BuilderTestLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
