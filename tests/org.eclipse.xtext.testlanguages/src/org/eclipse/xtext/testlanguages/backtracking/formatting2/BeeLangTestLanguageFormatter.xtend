/*
 * generated by Xtext
 */
package org.eclipse.xtext.testlanguages.backtracking.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.AliasedRequiredCapability
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.AndExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.AssignmentExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.AtExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.BinaryOpExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.CachedExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.CallFeature
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.CallFunction
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.CallNamedFunction
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ChainedExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ClosureParameter
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.CreateExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.DefValue
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Expression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.FeatureExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Function
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.GuardExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Model
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.OrExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Parameter
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ParameterDeclaration
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ParameterList
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ProvidedCapability
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.RequiredCapability
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.SimpleTypeRef
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.UnaryOpExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.UnaryPostOpExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.UnaryPreOpExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Unit
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.WithContextExpression
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.WithExpression
import org.eclipse.xtext.testlanguages.backtracking.services.BeeLangTestLanguageGrammarAccess

class BeeLangTestLanguageFormatter extends AbstractFormatter2 {
	
	@Inject extension BeeLangTestLanguageGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Unit units : model.getUnits()) {
			format(units, document);
		}
		for (Function functions : model.getFunctions()) {
			format(functions, document);
		}
	}

	def dispatch void format(Unit unit, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (SimpleTypeRef _implements : unit.getImplements()) {
			format(_implements, document);
		}
		for (ProvidedCapability providedCapabilities : unit.getProvidedCapabilities()) {
			format(providedCapabilities, document);
		}
		for (AliasedRequiredCapability requiredCapabilities : unit.getRequiredCapabilities()) {
			format(requiredCapabilities, document);
		}
		for (RequiredCapability metaRequiredCapabilities : unit.getMetaRequiredCapabilities()) {
			format(metaRequiredCapabilities, document);
		}
		for (Function functions : unit.getFunctions()) {
			format(functions, document);
		}
	}

	def dispatch void format(ProvidedCapability providedCapability, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(providedCapability.getCondExpr(), document);
	}

	def dispatch void format(AliasedRequiredCapability aliasedRequiredCapability, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(aliasedRequiredCapability.getCondExpr(), document);
	}

	def dispatch void format(RequiredCapability requiredCapability, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(requiredCapability.getCondExpr(), document);
	}

	def dispatch void format(ParameterList parameterList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Parameter parameters : parameterList.getParameters()) {
			format(parameters, document);
		}
	}

	def dispatch void format(Parameter parameter, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parameter.getExpr(), document);
	}

	def dispatch void format(ClosureParameter closureParameter, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(closureParameter.getExpr(), document);
	}

	def dispatch void format(ParameterDeclaration parameterDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parameterDeclaration.getType(), document);
	}

	def dispatch void format(Function function, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(function.getReturnType(), document);
		for (ParameterDeclaration parameters : function.getParameters()) {
			format(parameters, document);
		}
		format(function.getGuard(), document);
		format(function.getFuncExpr(), document);
	}

	def dispatch void format(GuardExpression guardExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(guardExpression.getGuardExpr(), document);
	}

	def dispatch void format(AssignmentExpression assignmentExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(assignmentExpression.getRightExpr(), document);
		format(assignmentExpression.getLeftExpr(), document);
	}

	def dispatch void format(DefValue defValue, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(defValue.getType(), document);
		format(defValue.getValueExpr(), document);
	}

	def dispatch void format(CachedExpression cachedExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(cachedExpression.getExpr(), document);
	}

	def dispatch void format(OrExpression orExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(orExpression.getRightExpr(), document);
		format(orExpression.getLeftExpr(), document);
	}

	def dispatch void format(AndExpression andExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(andExpression.getRightExpr(), document);
		format(andExpression.getLeftExpr(), document);
	}

	def dispatch void format(BinaryOpExpression binaryOpExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(binaryOpExpression.getRightExpr(), document);
		format(binaryOpExpression.getLeftExpr(), document);
	}

	def dispatch void format(UnaryOpExpression unaryOpExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(unaryOpExpression.getExpr(), document);
	}

	def dispatch void format(UnaryPreOpExpression unaryPreOpExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(unaryPreOpExpression.getExpr(), document);
	}

	def dispatch void format(CallFeature callFeature, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(callFeature.getParameterList(), document);
		format(callFeature.getFuncExpr(), document);
	}

	def dispatch void format(AtExpression atExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(atExpression.getIndexExpr(), document);
		format(atExpression.getObjExpr(), document);
	}

	def dispatch void format(CallFunction callFunction, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(callFunction.getParameterList(), document);
		format(callFunction.getFuncExpr(), document);
	}

	def dispatch void format(WithExpression withExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(withExpression.getFuncExpr(), document);
	}

	def dispatch void format(WithContextExpression withContextExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(withContextExpression.getExpr(), document);
		format(withContextExpression.getContextBlock(), document);
	}

	def dispatch void format(ChainedExpression chainedExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expressions : chainedExpression.getExpressions()) {
			format(expressions, document);
		}
	}

	def dispatch void format(CallNamedFunction callNamedFunction, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(callNamedFunction.getParameterList(), document);
	}

	def dispatch void format(CreateExpression createExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(createExpression.getParameterList(), document);
		format(createExpression.getContextBlock(), document);
	}

	def dispatch void format(UnaryPostOpExpression unaryPostOpExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(unaryPostOpExpression.getExpr(), document);
	}

	def dispatch void format(FeatureExpression featureExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(featureExpression.getObjExpr(), document);
	}
}
