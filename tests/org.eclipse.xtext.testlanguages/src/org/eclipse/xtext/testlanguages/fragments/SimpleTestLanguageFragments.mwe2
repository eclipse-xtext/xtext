module org.eclipse.xtext.testlanguages.fragments.SimpleTestLanguageFragments

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI
var backtrack = false
var memoize = false
var classSplitting = true

var runtimeProjectName = "org.eclipse.xtext.testlanguages"
var runtimeProjectPath = "../${runtimeProjectName}"
var ideaProjectName = "org.eclipse.xtext.testlanguages.idea"
var ideaProjectPath = "../../intellij/${ideaProjectName}"

var parser = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
  	options = auto-inject {
  		fieldsPerClass = "100"
  		methodsPerClass = "100"
  	}
}
var contentAssist.parser = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {
	options = auto-inject {
  		fieldsPerClass = "100"
  		methodsPerClass = "100"
  	}
}

LanguageConfig {
	uri = grammarURI
	// Java API to access grammar elements (required by several other fragments)
	fragment = grammarAccess.GrammarAccessFragment auto-inject {}

	// generates Java API for the generated EPackages 
	fragment = ecore.EcoreGeneratorFragment auto-inject {
		emfRuntimeVersion = "2.9"
	}

	// the serialization component
	fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

	// a custom ResourceFactory for use with EMF 
	fragment = resourceFactory.ResourceFactoryFragment {
	}

	// The antlr parser generator fragment.
	fragment = parser

	// java-based API for validation 
	fragment = validation.JavaValidatorFragment {
	}

	// scoping and exporting API
	// fragment = scoping.ImportURIScopingFragment {}
	// fragment = exporting.SimpleNamesFragment {}

	// scoping and exporting API 
	fragment = scoping.ImportNamespacesScopingFragment {}
	fragment = exporting.QualifiedNamesFragment {}
	fragment = builder.BuilderIntegrationFragment {}

	// formatter API 
	fragment = formatting.FormatterFragment {}

	// labeling API 
	fragment = labeling.LabelProviderFragment {}

	// outline API 
	fragment = outline.OutlineTreeProviderFragment {}
	fragment = outline.QuickOutlineFragment {}

	// quickfix API 
	fragment = quickfix.QuickfixProviderFragment {}

	// content assist API  
	fragment = contentAssist.JavaBasedContentAssistFragment {}

	fragment = contentAssist.parser
	
    fragment = org.eclipse.xtext.idea.generator.parser.antlr.XtextAntlrIDEAGeneratorFragment auto-inject {
    	options = auto-inject {
  			fieldsPerClass = "100"
  			methodsPerClass = "100"
  		}
    }
	fragment = org.eclipse.xtext.idea.generator.IdeaPluginGenerator auto-inject {}
}
