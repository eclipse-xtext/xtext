/*
 * generated by Xtext
 */
package org.eclipse.xtext.serializer.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import org.eclipse.xtext.serializer.services.AssignmentFinderTestLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class AssignmentFinderTestLanguageParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private AssignmentFinderTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Alternatives(this, this, 0, inst);
			case 1: return new KeywordVal_Alternatives(this, this, 1, inst);
			case 2: return new TerminalVal_Alternatives(this, this, 2, inst);
			case 3: return new EnumVal_Alternatives(this, this, 3, inst);
			case 4: return new KeywordBool_Alternatives(this, this, 4, inst);
			case 5: return new TerminalBool_Alternatives(this, this, 5, inst);
			case 6: return new EnumBool_Alternatives(this, this, 6, inst);
			case 7: return new MixedBool_Alternatives(this, this, 7, inst);
			case 8: return new MixedValue_Alternatives(this, this, 8, inst);
			case 9: return new ContainmentRef_Alternatives(this, this, 9, inst);
			case 10: return new ContainmentRef1_Group(this, this, 10, inst);
			case 11: return new ContainmentRef2_Group(this, this, 11, inst);
			case 12: return new CrossRef_Group(this, this, 12, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 * 	"#00" keywordVal=KeywordVal | "#01" terminalVal=TerminalVal | "#02" enumVal=EnumVal | "#03" keywordBool=KeywordBool |
 * 	"#04" terminalBool=TerminalBool | "#05" enumBool=EnumBool | "#06" mixedBool=MixedBool | "#07" mixedValue=MixedValue |
 * 	"#08" containmentRef=ContainmentRef | "#09" crossRef=CrossRef;
 *
 **/

// "#00" keywordVal=KeywordVal | "#01" terminalVal=TerminalVal | "#02" enumVal=EnumVal | "#03" keywordBool=KeywordBool |
// "#04" terminalBool=TerminalBool | "#05" enumBool=EnumBool | "#06" mixedBool=MixedBool | "#07" mixedValue=MixedValue |
// "#08" containmentRef=ContainmentRef | "#09" crossRef=CrossRef
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Model_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Model_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Model_Group_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Model_Group_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Model_Group_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Model_Group_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Model_Group_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Model_Group_9(lastRuleCallOrigin, this, 9, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModelRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#00" keywordVal=KeywordVal
protected class Model_Group_0 extends GroupToken {
	
	public Model_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_KeywordValAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#00"
protected class Model_NumberSignDigitZeroDigitZeroKeyword_0_0 extends KeywordToken  {
	
	public Model_NumberSignDigitZeroDigitZeroKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignDigitZeroDigitZeroKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// keywordVal=KeywordVal
protected class Model_KeywordValAssignment_0_1 extends AssignmentToken  {
	
	public Model_KeywordValAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getKeywordValAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeywordVal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("keywordVal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("keywordVal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getKeywordValRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getKeywordValKeywordValParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NumberSignDigitZeroDigitZeroKeyword_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "#01" terminalVal=TerminalVal
protected class Model_Group_1 extends GroupToken {
	
	public Model_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_TerminalValAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#01"
protected class Model_NumberSignDigitZeroDigitOneKeyword_1_0 extends KeywordToken  {
	
	public Model_NumberSignDigitZeroDigitOneKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignDigitZeroDigitOneKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// terminalVal=TerminalVal
protected class Model_TerminalValAssignment_1_1 extends AssignmentToken  {
	
	public Model_TerminalValAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getTerminalValAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalVal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("terminalVal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("terminalVal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerminalValRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getTerminalValTerminalValParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NumberSignDigitZeroDigitOneKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "#02" enumVal=EnumVal
protected class Model_Group_2 extends GroupToken {
	
	public Model_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_EnumValAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#02"
protected class Model_NumberSignDigitZeroDigitTwoKeyword_2_0 extends KeywordToken  {
	
	public Model_NumberSignDigitZeroDigitTwoKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignDigitZeroDigitTwoKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// enumVal=EnumVal
protected class Model_EnumValAssignment_2_1 extends AssignmentToken  {
	
	public Model_EnumValAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getEnumValAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumVal_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("enumVal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("enumVal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumValRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getEnumValEnumValParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NumberSignDigitZeroDigitTwoKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "#03" keywordBool=KeywordBool
protected class Model_Group_3 extends GroupToken {
	
	public Model_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_KeywordBoolAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#03"
protected class Model_NumberSignDigitZeroDigitThreeKeyword_3_0 extends KeywordToken  {
	
	public Model_NumberSignDigitZeroDigitThreeKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignDigitZeroDigitThreeKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// keywordBool=KeywordBool
protected class Model_KeywordBoolAssignment_3_1 extends AssignmentToken  {
	
	public Model_KeywordBoolAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getKeywordBoolAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeywordBool_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("keywordBool",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("keywordBool");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getKeywordBoolRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getKeywordBoolKeywordBoolParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NumberSignDigitZeroDigitThreeKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "#04" terminalBool=TerminalBool
protected class Model_Group_4 extends GroupToken {
	
	public Model_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_TerminalBoolAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#04"
protected class Model_NumberSignDigitZeroDigitFourKeyword_4_0 extends KeywordToken  {
	
	public Model_NumberSignDigitZeroDigitFourKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignDigitZeroDigitFourKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// terminalBool=TerminalBool
protected class Model_TerminalBoolAssignment_4_1 extends AssignmentToken  {
	
	public Model_TerminalBoolAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getTerminalBoolAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalBool_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("terminalBool",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("terminalBool");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerminalBoolRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getTerminalBoolTerminalBoolParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NumberSignDigitZeroDigitFourKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "#05" enumBool=EnumBool
protected class Model_Group_5 extends GroupToken {
	
	public Model_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_EnumBoolAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#05"
protected class Model_NumberSignDigitZeroDigitFiveKeyword_5_0 extends KeywordToken  {
	
	public Model_NumberSignDigitZeroDigitFiveKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignDigitZeroDigitFiveKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// enumBool=EnumBool
protected class Model_EnumBoolAssignment_5_1 extends AssignmentToken  {
	
	public Model_EnumBoolAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getEnumBoolAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumBool_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("enumBool",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("enumBool");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumBoolRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getEnumBoolEnumBoolParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NumberSignDigitZeroDigitFiveKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "#06" mixedBool=MixedBool
protected class Model_Group_6 extends GroupToken {
	
	public Model_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_MixedBoolAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#06"
protected class Model_NumberSignDigitZeroDigitSixKeyword_6_0 extends KeywordToken  {
	
	public Model_NumberSignDigitZeroDigitSixKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignDigitZeroDigitSixKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// mixedBool=MixedBool
protected class Model_MixedBoolAssignment_6_1 extends AssignmentToken  {
	
	public Model_MixedBoolAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getMixedBoolAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MixedBool_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mixedBool",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mixedBool");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMixedBoolRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getMixedBoolMixedBoolParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NumberSignDigitZeroDigitSixKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "#07" mixedValue=MixedValue
protected class Model_Group_7 extends GroupToken {
	
	public Model_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_MixedValueAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#07"
protected class Model_NumberSignDigitZeroDigitSevenKeyword_7_0 extends KeywordToken  {
	
	public Model_NumberSignDigitZeroDigitSevenKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignDigitZeroDigitSevenKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// mixedValue=MixedValue
protected class Model_MixedValueAssignment_7_1 extends AssignmentToken  {
	
	public Model_MixedValueAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getMixedValueAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MixedValue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mixedValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mixedValue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMixedValueRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getMixedValueMixedValueParserRuleCall_7_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NumberSignDigitZeroDigitSevenKeyword_7_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "#08" containmentRef=ContainmentRef
protected class Model_Group_8 extends GroupToken {
	
	public Model_Group_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_ContainmentRefAssignment_8_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#08"
protected class Model_NumberSignDigitZeroDigitEightKeyword_8_0 extends KeywordToken  {
	
	public Model_NumberSignDigitZeroDigitEightKeyword_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignDigitZeroDigitEightKeyword_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// containmentRef=ContainmentRef
protected class Model_ContainmentRefAssignment_8_1 extends AssignmentToken  {
	
	public Model_ContainmentRefAssignment_8_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getContainmentRefAssignment_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContainmentRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containmentRef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containmentRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContainmentRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getContainmentRefContainmentRefParserRuleCall_8_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NumberSignDigitZeroDigitEightKeyword_8_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "#09" crossRef=CrossRef
protected class Model_Group_9 extends GroupToken {
	
	public Model_Group_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_CrossRefAssignment_9_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#09"
protected class Model_NumberSignDigitZeroDigitNineKeyword_9_0 extends KeywordToken  {
	
	public Model_NumberSignDigitZeroDigitNineKeyword_9_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getNumberSignDigitZeroDigitNineKeyword_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// crossRef=CrossRef
protected class Model_CrossRefAssignment_9_1 extends AssignmentToken  {
	
	public Model_CrossRefAssignment_9_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getCrossRefAssignment_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CrossRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("crossRef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("crossRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCrossRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getCrossRefCrossRefParserRuleCall_9_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NumberSignDigitZeroDigitNineKeyword_9_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Model ****************/


/************ begin Rule KeywordVal ****************
 *
 * KeywordVal:
 * 	kw="kw1" | kw="kw2";
 *
 **/

// kw="kw1" | kw="kw2"
protected class KeywordVal_Alternatives extends AlternativesToken {

	public KeywordVal_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getKeywordValAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeywordVal_KwAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new KeywordVal_KwAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getKeywordValRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// kw="kw1"
protected class KeywordVal_KwAssignment_0 extends AssignmentToken  {
	
	public KeywordVal_KwAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKeywordValAccess().getKwAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getKeywordValAccess().getKwKw1Keyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getKeywordValAccess().getKwKw1Keyword_0_0();
			return obj;
		}
		return null;
	}

}

// kw="kw2"
protected class KeywordVal_KwAssignment_1 extends AssignmentToken  {
	
	public KeywordVal_KwAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKeywordValAccess().getKwAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getKeywordValAccess().getKwKw2Keyword_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getKeywordValAccess().getKwKw2Keyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule KeywordVal ****************/


/************ begin Rule TerminalVal ****************
 *
 * TerminalVal:
 * 	term=Terminal1 | term=Terminal2 | term="%foo";
 *
 **/

// term=Terminal1 | term=Terminal2 | term="%foo"
protected class TerminalVal_Alternatives extends AlternativesToken {

	public TerminalVal_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerminalValAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalVal_TermAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TerminalVal_TermAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TerminalVal_TermAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerminalValRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// term=Terminal1
protected class TerminalVal_TermAssignment_0 extends AssignmentToken  {
	
	public TerminalVal_TermAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalValAccess().getTermAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("term",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("term");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTerminalValAccess().getTermTerminal1TerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTerminalValAccess().getTermTerminal1TerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// term=Terminal2
protected class TerminalVal_TermAssignment_1 extends AssignmentToken  {
	
	public TerminalVal_TermAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalValAccess().getTermAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("term",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("term");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTerminalValAccess().getTermTerminal2TerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTerminalValAccess().getTermTerminal2TerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// term="%foo"
protected class TerminalVal_TermAssignment_2 extends AssignmentToken  {
	
	public TerminalVal_TermAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalValAccess().getTermAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("term",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("term");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTerminalValAccess().getTermFooKeyword_2_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTerminalValAccess().getTermFooKeyword_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TerminalVal ****************/


/************ begin Rule EnumVal ****************
 *
 * EnumVal:
 * 	en=Enum1 | en=Enum2;
 *
 **/

// en=Enum1 | en=Enum2
protected class EnumVal_Alternatives extends AlternativesToken {

	public EnumVal_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEnumValAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumVal_EnAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EnumVal_EnAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumValRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// en=Enum1
protected class EnumVal_EnAssignment_0 extends AssignmentToken  {
	
	public EnumVal_EnAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumValAccess().getEnAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("en",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("en");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getEnumValAccess().getEnEnum1EnumRuleCall_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getEnumValAccess().getEnEnum1EnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// en=Enum2
protected class EnumVal_EnAssignment_1 extends AssignmentToken  {
	
	public EnumVal_EnAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumValAccess().getEnAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("en",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("en");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getEnumValAccess().getEnEnum2EnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getEnumValAccess().getEnEnum2EnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule EnumVal ****************/


/************ begin Rule KeywordBool ****************
 *
 * KeywordBool:
 * 	kw?="kw1" | kw?="kw2";
 *
 **/

// kw?="kw1" | kw?="kw2"
protected class KeywordBool_Alternatives extends AlternativesToken {

	public KeywordBool_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getKeywordBoolAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeywordBool_KwAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new KeywordBool_KwAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getKeywordBoolRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// kw?="kw1"
protected class KeywordBool_KwAssignment_0 extends AssignmentToken  {
	
	public KeywordBool_KwAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKeywordBoolAccess().getKwAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getKeywordBoolAccess().getKwKw1Keyword_0_0();
			return obj;
		}
		return null;
	}

}

// kw?="kw2"
protected class KeywordBool_KwAssignment_1 extends AssignmentToken  {
	
	public KeywordBool_KwAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKeywordBoolAccess().getKwAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getKeywordBoolAccess().getKwKw2Keyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule KeywordBool ****************/


/************ begin Rule TerminalBool ****************
 *
 * TerminalBool:
 * 	term?=Terminal1 | term?=Terminal2 | term?="%foo";
 *
 **/

// term?=Terminal1 | term?=Terminal2 | term?="%foo"
protected class TerminalBool_Alternatives extends AlternativesToken {

	public TerminalBool_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerminalBoolAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalBool_TermAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TerminalBool_TermAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TerminalBool_TermAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerminalBoolRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// term?=Terminal1
protected class TerminalBool_TermAssignment_0 extends AssignmentToken  {
	
	public TerminalBool_TermAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalBoolAccess().getTermAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("term",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("term");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTerminalBoolAccess().getTermTerminal1TerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTerminalBoolAccess().getTermTerminal1TerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// term?=Terminal2
protected class TerminalBool_TermAssignment_1 extends AssignmentToken  {
	
	public TerminalBool_TermAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalBoolAccess().getTermAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("term",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("term");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTerminalBoolAccess().getTermTerminal2TerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTerminalBoolAccess().getTermTerminal2TerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// term?="%foo"
protected class TerminalBool_TermAssignment_2 extends AssignmentToken  {
	
	public TerminalBool_TermAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalBoolAccess().getTermAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("term",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("term");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTerminalBoolAccess().getTermFooKeyword_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TerminalBool ****************/


/************ begin Rule EnumBool ****************
 *
 * EnumBool:
 * 	en?=Enum1 | en?=Enum2;
 *
 **/

// en?=Enum1 | en?=Enum2
protected class EnumBool_Alternatives extends AlternativesToken {

	public EnumBool_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEnumBoolAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumBool_EnAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EnumBool_EnAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumBoolRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// en?=Enum1
protected class EnumBool_EnAssignment_0 extends AssignmentToken  {
	
	public EnumBool_EnAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumBoolAccess().getEnAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("en",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("en");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getEnumBoolAccess().getEnEnum1EnumRuleCall_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getEnumBoolAccess().getEnEnum1EnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// en?=Enum2
protected class EnumBool_EnAssignment_1 extends AssignmentToken  {
	
	public EnumBool_EnAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumBoolAccess().getEnAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("en",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("en");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getEnumBoolAccess().getEnEnum2EnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getEnumBoolAccess().getEnEnum2EnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule EnumBool ****************/


/************ begin Rule MixedBool ****************
 *
 * MixedBool:
 * 	val?="kw1" | val=Boolean;
 *
 **/

// val?="kw1" | val=Boolean
protected class MixedBool_Alternatives extends AlternativesToken {

	public MixedBool_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMixedBoolAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MixedBool_ValAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MixedBool_ValAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMixedBoolRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// val?="kw1"
protected class MixedBool_ValAssignment_0 extends AssignmentToken  {
	
	public MixedBool_ValAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMixedBoolAccess().getValAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("val",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("val");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMixedBoolAccess().getValKw1Keyword_0_0();
			return obj;
		}
		return null;
	}

}

// val=Boolean
protected class MixedBool_ValAssignment_1 extends AssignmentToken  {
	
	public MixedBool_ValAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMixedBoolAccess().getValAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("val",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("val");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMixedBoolAccess().getValBooleanParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMixedBoolAccess().getValBooleanParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MixedBool ****************/



/************ begin Rule MixedValue ****************
 *
 * MixedValue:
 * 	val=Enum1 | val=DatEnum;
 *
 **/

// val=Enum1 | val=DatEnum
protected class MixedValue_Alternatives extends AlternativesToken {

	public MixedValue_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMixedValueAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MixedValue_ValAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MixedValue_ValAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMixedValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// val=Enum1
protected class MixedValue_ValAssignment_0 extends AssignmentToken  {
	
	public MixedValue_ValAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMixedValueAccess().getValAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("val",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("val");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getMixedValueAccess().getValEnum1EnumRuleCall_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getMixedValueAccess().getValEnum1EnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// val=DatEnum
protected class MixedValue_ValAssignment_1 extends AssignmentToken  {
	
	public MixedValue_ValAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMixedValueAccess().getValAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("val",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("val");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMixedValueAccess().getValDatEnumParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMixedValueAccess().getValDatEnumParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MixedValue ****************/



/************ begin Rule ContainmentRef ****************
 *
 * ContainmentRef:
 * 	ctx=ContainmentRef1 | ctx=ContainmentRef2;
 *
 **/

// ctx=ContainmentRef1 | ctx=ContainmentRef2
protected class ContainmentRef_Alternatives extends AlternativesToken {

	public ContainmentRef_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getContainmentRefAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContainmentRef_CtxAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ContainmentRef_CtxAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getContainmentRefRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ctx=ContainmentRef1
protected class ContainmentRef_CtxAssignment_0 extends AssignmentToken  {
	
	public ContainmentRef_CtxAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContainmentRefAccess().getCtxAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContainmentRef1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ctx",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ctx");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContainmentRef1Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getContainmentRefAccess().getCtxContainmentRef1ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ctx=ContainmentRef2
protected class ContainmentRef_CtxAssignment_1 extends AssignmentToken  {
	
	public ContainmentRef_CtxAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContainmentRefAccess().getCtxAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContainmentRef2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ctx",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ctx");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContainmentRef2Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getContainmentRefAccess().getCtxContainmentRef2ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule ContainmentRef ****************/


/************ begin Rule ContainmentRef1 ****************
 *
 * ContainmentRef1 ContainmentRefN:
 * 	"kw1" val1=ID
 *
 **/

// "kw1" val1=ID
protected class ContainmentRef1_Group extends GroupToken {
	
	public ContainmentRef1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContainmentRef1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContainmentRef1_Val1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getContainmentRef1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "kw1"
protected class ContainmentRef1_Kw1Keyword_0 extends KeywordToken  {
	
	public ContainmentRef1_Kw1Keyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContainmentRef1Access().getKw1Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// val1=ID
protected class ContainmentRef1_Val1Assignment_1 extends AssignmentToken  {
	
	public ContainmentRef1_Val1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContainmentRef1Access().getVal1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContainmentRef1_Kw1Keyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("val1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("val1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getContainmentRef1Access().getVal1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getContainmentRef1Access().getVal1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ContainmentRef1 ****************/


/************ begin Rule ContainmentRef2 ****************
 *
 * ContainmentRef2 ContainmentRefN:
 * 	"kw2" val2=ID
 *
 **/

// "kw2" val2=ID
protected class ContainmentRef2_Group extends GroupToken {
	
	public ContainmentRef2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContainmentRef2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContainmentRef2_Val2Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getContainmentRef2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "kw2"
protected class ContainmentRef2_Kw2Keyword_0 extends KeywordToken  {
	
	public ContainmentRef2_Kw2Keyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContainmentRef2Access().getKw2Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// val2=ID
protected class ContainmentRef2_Val2Assignment_1 extends AssignmentToken  {
	
	public ContainmentRef2_Val2Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContainmentRef2Access().getVal2Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContainmentRef2_Kw2Keyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("val2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("val2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getContainmentRef2Access().getVal2IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getContainmentRef2Access().getVal2IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ContainmentRef2 ****************/


/************ begin Rule CrossRef ****************
 *
 * CrossRef:
 * 	name=(Terminal1 | Terminal2) (crossRef=[CrossRef|Terminal1] | crossRef=[CrossRef|Terminal2]);
 *
 **/

// name=(Terminal1 | Terminal2) (crossRef=[CrossRef|Terminal1] | crossRef=[CrossRef|Terminal2])
protected class CrossRef_Group extends GroupToken {
	
	public CrossRef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCrossRefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CrossRef_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCrossRefRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=(Terminal1 | Terminal2)
protected class CrossRef_NameAssignment_0 extends AssignmentToken  {
	
	public CrossRef_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCrossRefAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCrossRefAccess().getNameTerminal1TerminalRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCrossRefAccess().getNameTerminal1TerminalRuleCall_0_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCrossRefAccess().getNameTerminal2TerminalRuleCall_0_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCrossRefAccess().getNameTerminal2TerminalRuleCall_0_0_1();
			return obj;
		}
		return null;
	}

}

// (crossRef=[CrossRef|Terminal1] | crossRef=[CrossRef|Terminal2])
protected class CrossRef_Alternatives_1 extends AlternativesToken {

	public CrossRef_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCrossRefAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CrossRef_CrossRefAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CrossRef_CrossRefAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// crossRef=[CrossRef|Terminal1]
protected class CrossRef_CrossRefAssignment_1_0 extends AssignmentToken  {
	
	public CrossRef_CrossRefAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCrossRefAccess().getCrossRefAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CrossRef_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("crossRef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("crossRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCrossRefAccess().getCrossRefCrossRefCrossReference_1_0_0().getType().getClassifier()) && crossRefSerializer.isValid(obj.getEObject(), grammarAccess.getCrossRefAccess().getCrossRefCrossRefCrossReference_1_0_0(), (EObject)value , null)) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getCrossRefAccess().getCrossRefCrossRefCrossReference_1_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// crossRef=[CrossRef|Terminal2]
protected class CrossRef_CrossRefAssignment_1_1 extends AssignmentToken  {
	
	public CrossRef_CrossRefAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCrossRefAccess().getCrossRefAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CrossRef_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("crossRef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("crossRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCrossRefAccess().getCrossRefCrossRefCrossReference_1_1_0().getType().getClassifier()) && crossRefSerializer.isValid(obj.getEObject(), grammarAccess.getCrossRefAccess().getCrossRefCrossRefCrossReference_1_1_0(), (EObject)value , null)) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getCrossRefAccess().getCrossRefCrossRefCrossReference_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule CrossRef ****************/

}
