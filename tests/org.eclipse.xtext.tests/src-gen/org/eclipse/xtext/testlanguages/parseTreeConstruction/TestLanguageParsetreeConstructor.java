/*
 * generated by Xtext
 */
package org.eclipse.xtext.testlanguages.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import org.eclipse.xtext.testlanguages.services.TestLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class TestLanguageParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private TestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EntryRule_MultiFeatureAssignment(this, this, 0, inst);
			case 1: return new AbstractRule_Alternatives(this, this, 1, inst);
			case 2: return new ChoiceRule_Group(this, this, 2, inst);
			case 3: return new ReducibleRule_Group(this, this, 3, inst);
			case 4: return new TerminalRule_StringFeatureAssignment(this, this, 4, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule EntryRule ****************
 *
 * EntryRule Model:
 * 	multiFeature+=AbstractRule*
 *
 **/

// multiFeature+=AbstractRule*
protected class EntryRule_MultiFeatureAssignment extends AssignmentToken  {
	
	public EntryRule_MultiFeatureAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntryRuleAccess().getMultiFeatureAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbstractRule_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("multiFeature",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("multiFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractRuleRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEntryRuleAccess().getMultiFeatureAbstractRuleParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EntryRule_MultiFeatureAssignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule EntryRule ****************/


/************ begin Rule AbstractRule ****************
 *
 * AbstractRule AbstractElement:
 * 	ChoiceRule | ReducibleRule
 *
 **/

// ChoiceRule | ReducibleRule
protected class AbstractRule_Alternatives extends AlternativesToken {

	public AbstractRule_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAbstractRuleAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbstractRule_ChoiceRuleParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AbstractRule_ReducibleRuleParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getChoiceRuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReducibleRuleAccess().getReducibleCompositeActionFeatureAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerminalRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ChoiceRule
protected class AbstractRule_ChoiceRuleParserRuleCall_0 extends RuleCallToken {
	
	public AbstractRule_ChoiceRuleParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractRuleAccess().getChoiceRuleParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ChoiceRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getChoiceRuleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ChoiceRule_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ReducibleRule
protected class AbstractRule_ReducibleRuleParserRuleCall_1 extends RuleCallToken {
	
	public AbstractRule_ReducibleRuleParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractRuleAccess().getReducibleRuleParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReducibleRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReducibleRuleAccess().getReducibleCompositeActionFeatureAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerminalRuleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ReducibleRule_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AbstractRule ****************/


/************ begin Rule ChoiceRule ****************
 *
 * ChoiceRule ChoiceElement:
 * 	"choice" optionalKeyword?='optional'? name=ID
 *
 **/

// "choice" optionalKeyword?='optional'? name=ID
protected class ChoiceRule_Group extends GroupToken {
	
	public ChoiceRule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getChoiceRuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ChoiceRule_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getChoiceRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "choice"
protected class ChoiceRule_ChoiceKeyword_0 extends KeywordToken  {
	
	public ChoiceRule_ChoiceKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getChoiceRuleAccess().getChoiceKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// optionalKeyword?='optional'?
protected class ChoiceRule_OptionalKeywordAssignment_1 extends AssignmentToken  {
	
	public ChoiceRule_OptionalKeywordAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChoiceRuleAccess().getOptionalKeywordAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ChoiceRule_ChoiceKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("optionalKeyword",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("optionalKeyword");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getChoiceRuleAccess().getOptionalKeywordOptionalKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class ChoiceRule_NameAssignment_2 extends AssignmentToken  {
	
	public ChoiceRule_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChoiceRuleAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ChoiceRule_OptionalKeywordAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ChoiceRule_ChoiceKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getChoiceRuleAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getChoiceRuleAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ChoiceRule ****************/


/************ begin Rule ReducibleRule ****************
 *
 * ReducibleRule ReducibleElement:
 * 	"reducible" TerminalRule ({ReducibleComposite.actionFeature+=current} actionFeature+=TerminalRule)?
 *
 **/

// "reducible" TerminalRule ({ReducibleComposite.actionFeature+=current} actionFeature+=TerminalRule)?
protected class ReducibleRule_Group extends GroupToken {
	
	public ReducibleRule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReducibleRuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReducibleRule_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReducibleRule_TerminalRuleParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReducibleRuleAccess().getReducibleCompositeActionFeatureAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerminalRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "reducible"
protected class ReducibleRule_ReducibleKeyword_0 extends KeywordToken  {
	
	public ReducibleRule_ReducibleKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReducibleRuleAccess().getReducibleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// TerminalRule
protected class ReducibleRule_TerminalRuleParserRuleCall_1 extends RuleCallToken {
	
	public ReducibleRule_TerminalRuleParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReducibleRuleAccess().getTerminalRuleParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalRule_StringFeatureAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerminalRuleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TerminalRule_StringFeatureAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReducibleRule_ReducibleKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ({ReducibleComposite.actionFeature+=current} actionFeature+=TerminalRule)?
protected class ReducibleRule_Group_2 extends GroupToken {
	
	public ReducibleRule_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReducibleRuleAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReducibleRule_ActionFeatureAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReducibleRuleAccess().getReducibleCompositeActionFeatureAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ReducibleComposite.actionFeature+=current}
protected class ReducibleRule_ReducibleCompositeActionFeatureAction_2_0 extends ActionToken  {

	public ReducibleRule_ReducibleCompositeActionFeatureAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getReducibleRuleAccess().getReducibleCompositeActionFeatureAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReducibleRule_TerminalRuleParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("actionFeature", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("actionFeature")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// actionFeature+=TerminalRule
protected class ReducibleRule_ActionFeatureAssignment_2_1 extends AssignmentToken  {
	
	public ReducibleRule_ActionFeatureAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReducibleRuleAccess().getActionFeatureAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TerminalRule_StringFeatureAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("actionFeature",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("actionFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerminalRuleRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReducibleRuleAccess().getActionFeatureTerminalRuleParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReducibleRule_ReducibleCompositeActionFeatureAction_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ReducibleRule ****************/


/************ begin Rule TerminalRule ****************
 *
 * TerminalRule TerminalElement:
 * 	stringFeature=STRING
 *
 **/

// stringFeature=STRING
protected class TerminalRule_StringFeatureAssignment extends AssignmentToken  {
	
	public TerminalRule_StringFeatureAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminalRuleAccess().getStringFeatureAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerminalRuleRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("stringFeature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stringFeature");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTerminalRuleAccess().getStringFeatureSTRINGTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTerminalRuleAccess().getStringFeatureSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule TerminalRule ****************/

}
