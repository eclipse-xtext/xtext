/*
 * generated by Xtext
 */
package org.eclipse.xtext.formatting2.internal.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import org.eclipse.xtext.formatting2.internal.services.FormatterTestLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class FormatterTestLanguageParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private FormatterTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Root_Alternatives(this, this, 0, inst);
			case 1: return new IDList_Group(this, this, 1, inst);
			case 2: return new KWList_Group(this, this, 2, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Root ****************
 *
 * Root:
 * 	IDList | KWList;
 *
 **/

// IDList | KWList
protected class Root_Alternatives extends AlternativesToken {

	public Root_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRootAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Root_IDListParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Root_KWListParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDListAccess().getIDListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getKWListAccess().getKWListAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IDList
protected class Root_IDListParserRuleCall_0 extends RuleCallToken {
	
	public Root_IDListParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getIDListParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDListAccess().getIDListAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(IDList_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// KWList
protected class Root_KWListParserRuleCall_1 extends RuleCallToken {
	
	public Root_KWListParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getKWListParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KWList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getKWListAccess().getKWListAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(KWList_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Root ****************/


/************ begin Rule IDList ****************
 *
 * IDList:
 * 	{IDList} "idlist" ids+=ID*;
 *
 **/

// {IDList} "idlist" ids+=ID*
protected class IDList_Group extends GroupToken {
	
	public IDList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIDListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDList_IdsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IDList_IdlistKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIDListAccess().getIDListAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {IDList}
protected class IDList_IDListAction_0 extends ActionToken  {

	public IDList_IDListAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getIDListAccess().getIDListAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "idlist"
protected class IDList_IdlistKeyword_1 extends KeywordToken  {
	
	public IDList_IdlistKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIDListAccess().getIdlistKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDList_IDListAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ids+=ID*
protected class IDList_IdsAssignment_2 extends AssignmentToken  {
	
	public IDList_IdsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIDListAccess().getIdsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IDList_IdsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IDList_IdlistKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ids",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ids");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIDListAccess().getIdsIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getIDListAccess().getIdsIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule IDList ****************/


/************ begin Rule KWList ****************
 *
 * KWList:
 * 	{KWList} "kwlist" kw1?="kw1"? kw2?="kw2"? kw3?="kw3"? kw4?="kw4"? kw5?="kw5"?;
 *
 **/

// {KWList} "kwlist" kw1?="kw1"? kw2?="kw2"? kw3?="kw3"? kw4?="kw4"? kw5?="kw5"?
protected class KWList_Group extends GroupToken {
	
	public KWList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getKWListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KWList_Kw5Assignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new KWList_Kw4Assignment_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new KWList_Kw3Assignment_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new KWList_Kw2Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new KWList_Kw1Assignment_2(lastRuleCallOrigin, this, 4, inst);
			case 5: return new KWList_KwlistKeyword_1(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getKWListAccess().getKWListAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {KWList}
protected class KWList_KWListAction_0 extends ActionToken  {

	public KWList_KWListAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getKWListAccess().getKWListAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "kwlist"
protected class KWList_KwlistKeyword_1 extends KeywordToken  {
	
	public KWList_KwlistKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getKWListAccess().getKwlistKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KWList_KWListAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// kw1?="kw1"?
protected class KWList_Kw1Assignment_2 extends AssignmentToken  {
	
	public KWList_Kw1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKWListAccess().getKw1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KWList_KwlistKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getKWListAccess().getKw1Kw1Keyword_2_0();
			return obj;
		}
		return null;
	}

}

// kw2?="kw2"?
protected class KWList_Kw2Assignment_3 extends AssignmentToken  {
	
	public KWList_Kw2Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKWListAccess().getKw2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KWList_Kw1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new KWList_KwlistKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getKWListAccess().getKw2Kw2Keyword_3_0();
			return obj;
		}
		return null;
	}

}

// kw3?="kw3"?
protected class KWList_Kw3Assignment_4 extends AssignmentToken  {
	
	public KWList_Kw3Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKWListAccess().getKw3Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KWList_Kw2Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new KWList_Kw1Assignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new KWList_KwlistKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw3",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw3");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getKWListAccess().getKw3Kw3Keyword_4_0();
			return obj;
		}
		return null;
	}

}

// kw4?="kw4"?
protected class KWList_Kw4Assignment_5 extends AssignmentToken  {
	
	public KWList_Kw4Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKWListAccess().getKw4Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KWList_Kw3Assignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new KWList_Kw2Assignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new KWList_Kw1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new KWList_KwlistKeyword_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw4",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw4");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getKWListAccess().getKw4Kw4Keyword_5_0();
			return obj;
		}
		return null;
	}

}

// kw5?="kw5"?
protected class KWList_Kw5Assignment_6 extends AssignmentToken  {
	
	public KWList_Kw5Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKWListAccess().getKw5Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KWList_Kw4Assignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new KWList_Kw3Assignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new KWList_Kw2Assignment_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new KWList_Kw1Assignment_2(lastRuleCallOrigin, this, 3, inst);
			case 4: return new KWList_KwlistKeyword_1(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw5",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw5");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getKWListAccess().getKw5Kw5Keyword_6_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule KWList ****************/

}
