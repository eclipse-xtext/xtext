/*
 * generated by Xtext
 */
package org.eclipse.xtext.parser.parameters.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.parser.parameters.services.ParametersTestLanguageGrammarAccess;

@Singleton
public class ParametersTestLanguageExGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ParserRuleFragmentsExElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.parameters.ParametersTestLanguageEx.ParserRuleFragmentsEx");
		private final RuleCall cParserRuleParametersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ParserRuleFragmentsEx ParserRuleParameters:
		//	ParserRuleParameters
		@Override public ParserRule getRule() { return rule; }

		//ParserRuleParameters
		public RuleCall getParserRuleParametersParserRuleCall() { return cParserRuleParametersParserRuleCall; }
	}
	
	
	private final ParserRuleFragmentsExElements pParserRuleFragmentsEx;
	
	private final Grammar grammar;

	private final ParametersTestLanguageGrammarAccess gaParametersTestLanguage;

	@Inject
	public ParametersTestLanguageExGrammarAccess(GrammarProvider grammarProvider,
		ParametersTestLanguageGrammarAccess gaParametersTestLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaParametersTestLanguage = gaParametersTestLanguage;
		this.pParserRuleFragmentsEx = new ParserRuleFragmentsExElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.parser.parameters.ParametersTestLanguageEx".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ParametersTestLanguageGrammarAccess getParametersTestLanguageGrammarAccess() {
		return gaParametersTestLanguage;
	}

	
	//ParserRuleFragmentsEx ParserRuleParameters:
	//	ParserRuleParameters
	public ParserRuleFragmentsExElements getParserRuleFragmentsExAccess() {
		return pParserRuleFragmentsEx;
	}
	
	public ParserRule getParserRuleFragmentsExRule() {
		return getParserRuleFragmentsExAccess().getRule();
	}

	//ParserRuleParameters:
	//	{ParserRuleParameters} ('#1' scenario=Scenario1<true> | '#2' scenario=Scenario1<Param=false> | '#3'
	//	scenario=Scenario2<true> | '#4' scenario=Scenario2<false> | => ('#5' scenario=Scenario2<true>) | => ('#6'
	//	scenario=Scenario2<false>) | '#7' scenario=Scenario3<true> | '#8' scenario=Scenario3<false> | '#9'
	//	(scenario=Scenario4<true> | scenario=Scenario2<true> 'keyword'?) | '#10' (scenario=Scenario4<true> |
	//	scenario=Scenario2<false> 'keyword'?) | '#11' (scenario=Scenario4<false> | scenario=Scenario2<true> 'keyword'?) |
	//	'#12' (scenario=Scenario4<false> | scenario=Scenario2<false> 'keyword'?));
	public ParametersTestLanguageGrammarAccess.ParserRuleParametersElements getParserRuleParametersAccess() {
		return gaParametersTestLanguage.getParserRuleParametersAccess();
	}
	
	public ParserRule getParserRuleParametersRule() {
		return getParserRuleParametersAccess().getRule();
	}

	//Scenario1 <Param Scenario:
	//	<Param> first=ID
	//	| <!Param> second=ID
	public ParametersTestLanguageGrammarAccess.Scenario1Elements getScenario1Access() {
		return gaParametersTestLanguage.getScenario1Access();
	}
	
	public ParserRule getScenario1Rule() {
		return getScenario1Access().getRule();
	}

	//Scenario2 <AllowKeyword Scenario:
	//	first=IdOrKeyword<AllowKeyword>
	public ParametersTestLanguageGrammarAccess.Scenario2Elements getScenario2Access() {
		return gaParametersTestLanguage.getScenario2Access();
	}
	
	public ParserRule getScenario2Rule() {
		return getScenario2Access().getRule();
	}

	//Scenario3 <AllowKeyword Scenario:
	//	=> first=IdOrKeyword<AllowKeyword> | second='keyword'
	public ParametersTestLanguageGrammarAccess.Scenario3Elements getScenario3Access() {
		return gaParametersTestLanguage.getScenario3Access();
	}
	
	public ParserRule getScenario3Rule() {
		return getScenario3Access().getRule();
	}

	//Scenario4 <AllowKeyword Scenario:
	//	=> second=IdOrKeyword<AllowKeyword> 'keyword'
	public ParametersTestLanguageGrammarAccess.Scenario4Elements getScenario4Access() {
		return gaParametersTestLanguage.getScenario4Access();
	}
	
	public ParserRule getScenario4Rule() {
		return getScenario4Access().getRule();
	}

	//IdOrKeyword <Keyword>:
	//	<Keyword> 'keyword'
	//	| ID;
	public ParametersTestLanguageGrammarAccess.IdOrKeywordElements getIdOrKeywordAccess() {
		return gaParametersTestLanguage.getIdOrKeywordAccess();
	}
	
	public ParserRule getIdOrKeywordRule() {
		return getIdOrKeywordAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaParametersTestLanguage.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaParametersTestLanguage.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaParametersTestLanguage.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaParametersTestLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaParametersTestLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaParametersTestLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaParametersTestLanguage.getANY_OTHERRule();
	} 
}
