/*
 * generated by Xtext
 */
package org.eclipse.xtext.parser.parameters.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.parameters.parametersTestLanguage.ParametersTestLanguagePackage;
import org.eclipse.xtext.parser.parameters.parametersTestLanguage.ParserRuleParameters;
import org.eclipse.xtext.parser.parameters.parametersTestLanguage.Scenario;
import org.eclipse.xtext.parser.parameters.serializer.ParametersTestLanguageSemanticSequencer;
import org.eclipse.xtext.parser.parameters.services.NoParametersTestLanguageGrammarAccess;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public class NoParametersTestLanguageSemanticSequencer extends ParametersTestLanguageSemanticSequencer {

	@Inject
	private NoParametersTestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ParametersTestLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ParametersTestLanguagePackage.PARSER_RULE_PARAMETERS:
				sequence_ParserRuleParameters(context, (ParserRuleParameters) semanticObject); 
				return; 
			case ParametersTestLanguagePackage.SCENARIO:
				if(context == grammarAccess.getScenario1_FalseRule()) {
					sequence_Scenario1_False(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario1Rule()) {
					sequence_Scenario1(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario1_TrueRule()) {
					sequence_Scenario1_True(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario2_FalseRule()) {
					sequence_Scenario2_False(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario2Rule()) {
					sequence_Scenario2(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario2_TrueRule()) {
					sequence_Scenario2_True(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario3_FalseRule()) {
					sequence_Scenario3_False(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario3Rule()) {
					sequence_Scenario3(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario3_TrueRule()) {
					sequence_Scenario3_True(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario4_FalseRule()) {
					sequence_Scenario4_False(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario4Rule()) {
					sequence_Scenario4(context, (Scenario) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getScenario4_TrueRule()) {
					sequence_Scenario4_True(context, (Scenario) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         scenario=Scenario1_True | 
	 *         scenario=Scenario1_False | 
	 *         scenario=Scenario2_True | 
	 *         scenario=Scenario2_False | 
	 *         scenario=Scenario2_True | 
	 *         scenario=Scenario2_False | 
	 *         scenario=Scenario3_True | 
	 *         scenario=Scenario3_False | 
	 *         scenario=Scenario4_True | 
	 *         scenario=Scenario2_True | 
	 *         scenario=Scenario4_True | 
	 *         scenario=Scenario2_False | 
	 *         scenario=Scenario4_False | 
	 *         scenario=Scenario2_True | 
	 *         scenario=Scenario4_False | 
	 *         scenario=Scenario2_False
	 *     )
	 */
	protected void sequence_ParserRuleParameters(EObject context, ParserRuleParameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     second=ID
	 */
	protected void sequence_Scenario1_False(EObject context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     first=ID
	 */
	protected void sequence_Scenario1_True(EObject context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     first=IdOrKeyword_False
	 */
	protected void sequence_Scenario2_False(EObject context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     first=IdOrKeyword_True
	 */
	protected void sequence_Scenario2_True(EObject context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (first=IdOrKeyword_False | second='keyword')
	 */
	protected void sequence_Scenario3_False(EObject context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (first=IdOrKeyword_True | second='keyword')
	 */
	protected void sequence_Scenario3_True(EObject context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     second=IdOrKeyword_False
	 */
	protected void sequence_Scenario4_False(EObject context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     second=IdOrKeyword_True
	 */
	protected void sequence_Scenario4_True(EObject context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
