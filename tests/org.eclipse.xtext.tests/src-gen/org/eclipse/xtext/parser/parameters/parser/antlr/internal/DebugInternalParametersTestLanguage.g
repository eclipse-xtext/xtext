/*
 * generated by Xtext
 */
grammar DebugInternalParametersTestLanguage ;

// Rule ParserRuleParameters
ruleParserRuleParameters :
	'#1' ruleScenario1 [ true ] |
	'#2' ruleScenario1 [ false ] |
	'#3' ruleScenario2 [ true ] |
	'#4' ruleScenario2 [ false ] |
	( (
	'#5' ruleScenario2 [ true ]
	) => (
		'#5' ruleScenario2 [ true ]
	) ) |
	( (
	'#6' ruleScenario2 [ false ]
	) => (
		'#6' ruleScenario2 [ false ]
	) ) |
	'#7' ruleScenario3 [ true ] |
	'#8' ruleScenario3 [ false ] |
	'#9' (
		( (
		ruleIdOrKeyword [ true ]
		) => ruleScenario4 [ true ] ) |
		ruleScenario2 [ true ] 'keyword'?
	) |
	'#10' (
		( (
		ruleIdOrKeyword [ true ]
		) => ruleScenario4 [ true ] ) |
		ruleScenario2 [ false ] 'keyword'?
	) |
	'#11' (
		( (
		ruleIdOrKeyword [ false ]
		) => ruleScenario4 [ false ] ) |
		ruleScenario2 [ true ] 'keyword'?
	) |
	'#12' (
		( (
		ruleIdOrKeyword [ false ]
		) => ruleScenario4 [ false ] ) |
		ruleScenario2 [ false ] 'keyword'?
	)
;

// Rule Scenario1
ruleScenario1 [ boolean p_Param ] :
	{ p_Param } ? => (
		RULE_ID
	) |
	{ ! p_Param } ? => (
		RULE_ID
	)
;

// Rule Scenario2
ruleScenario2 [ boolean p_AllowKeyword ] :
	ruleIdOrKeyword [ $ruleScenario2.p_AllowKeyword ]
;

// Rule Scenario3
ruleScenario3 [ boolean p_AllowKeyword ] :
	( (
	ruleIdOrKeyword [ $ruleScenario3.p_AllowKeyword ]
	) => ruleIdOrKeyword [ $ruleScenario3.p_AllowKeyword ] ) |
	'keyword'
;

// Rule Scenario4
ruleScenario4 [ boolean p_AllowKeyword ] :
	( (
	ruleIdOrKeyword [ $ruleScenario4.p_AllowKeyword ]
	) => ruleIdOrKeyword [ $ruleScenario4.p_AllowKeyword ] ) 'keyword'
;

// Rule IdOrKeyword
ruleIdOrKeyword [ boolean p_Keyword ] :
	{ p_Keyword } ? => (
		'keyword'
	) |
	RULE_ID
;

RULE_ID :
	'^'? (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_'
	) (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_' |
		'0' .. '9'
	)*
;

RULE_INT :
	'0' .. '9'+
;

RULE_STRING :
	'"' (
		'\\' . |
		~ (
			'\\' |
			'"'
		)
	)* '"' |
	'\'' (
		'\\' . |
		~ (
			'\\' |
			'\''
		)
	)* '\''
;

RULE_ML_COMMENT :
	'/*' (
		options { greedy = false ; } : .
	)* '*/' { skip(); }
;

RULE_SL_COMMENT :
	'//' ~ (
		'\n' |
		'\r'
	)* (
		'\r'? '\n'
	)? { skip(); }
;

RULE_WS :
	(
		' ' |
		'\t' |
		'\r' |
		'\n'
	)+ { skip(); }
;

RULE_ANY_OTHER :
	.
;