/*
* generated by Xtext
*/
package org.eclipse.xtext.parser.bug419429.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import org.eclipse.xtext.parser.bug419429.services.Bug419429GrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class Bug419429ParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private Bug419429GrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EReference_ETypeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule EReference ****************
 *
 * EReference:
 * 	eType=[EClassifier];
 *
 **/

// eType=[EClassifier]
protected class EReference_ETypeAssignment extends AssignmentToken  {
	
	public EReference_ETypeAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEReferenceAccess().getETypeAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEReferenceRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("eType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEReferenceAccess().getETypeEClassifierCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getEReferenceAccess().getETypeEClassifierCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule EReference ****************/

}
