/*
 * generated by Xtext
 */
package org.eclipse.xtext.lexer.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import org.eclipse.xtext.lexer.services.BacktrackingLexerTestLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class BacktrackingLexerTestLanguageParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private BacktrackingLexerTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new Ab_Group(this, this, 1, inst);
			case 2: return new Xb_Group(this, this, 2, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 * 	enums+=EnumName* ycs+=Yc* abs+=Ab* xbs+=Xb* ys+=CharY* ^as+=CharA*;
 *
 **/

// enums+=EnumName* ycs+=Yc* abs+=Ab* xbs+=Xb* ys+=CharY* ^as+=CharA*
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_AsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_YsAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Model_XbsAssignment_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Model_AbsAssignment_2(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Model_YcsAssignment_1(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Model_EnumsAssignment_0(lastRuleCallOrigin, this, 5, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 6, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModelRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// enums+=EnumName*
protected class Model_EnumsAssignment_0 extends AssignmentToken  {
	
	public Model_EnumsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getEnumsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_EnumsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("enums",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("enums");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getModelAccess().getEnumsEnumNameEnumRuleCall_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getModelAccess().getEnumsEnumNameEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ycs+=Yc*
protected class Model_YcsAssignment_1 extends AssignmentToken  {
	
	public Model_YcsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getYcsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_YcsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_EnumsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 2, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ycs",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ycs");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getModelAccess().getYcsYcTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getModelAccess().getYcsYcTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// abs+=Ab*
protected class Model_AbsAssignment_2 extends AssignmentToken  {
	
	public Model_AbsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getAbsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Ab_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("abs",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("abs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getAbsAbParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_AbsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Model_YcsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Model_EnumsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 3, consumed);
		}	
	}	
}

// xbs+=Xb*
protected class Model_XbsAssignment_3 extends AssignmentToken  {
	
	public Model_XbsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getXbsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Xb_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("xbs",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("xbs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXbRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getXbsXbParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_XbsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Model_AbsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Model_YcsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Model_EnumsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 4, consumed);
		}	
	}	
}

// ys+=CharY*
protected class Model_YsAssignment_4 extends AssignmentToken  {
	
	public Model_YsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getYsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_YsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_XbsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Model_AbsAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Model_YcsAssignment_1(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Model_EnumsAssignment_0(lastRuleCallOrigin, this, 4, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 5, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ys",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ys");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getModelAccess().getYsCharYTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getModelAccess().getYsCharYTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ^as+=CharA*
protected class Model_AsAssignment_5 extends AssignmentToken  {
	
	public Model_AsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getAsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_AsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_YsAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Model_XbsAssignment_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Model_AbsAssignment_2(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Model_YcsAssignment_1(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Model_EnumsAssignment_0(lastRuleCallOrigin, this, 5, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 6, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("as",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("as");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getModelAccess().getAsCharATerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getModelAccess().getAsCharATerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Model ****************/


/************ begin Rule Ab ****************
 *
 * Ab:
 * 	x=CharA y=Charb;
 *
 **/

// x=CharA y=Charb
protected class Ab_Group extends GroupToken {
	
	public Ab_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Ab_YAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAbRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// x=CharA
protected class Ab_XAssignment_0 extends AssignmentToken  {
	
	public Ab_XAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbAccess().getXAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("x",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("x");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAbAccess().getXCharATerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAbAccess().getXCharATerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// y=Charb
protected class Ab_YAssignment_1 extends AssignmentToken  {
	
	public Ab_YAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbAccess().getYAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Ab_XAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("y",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("y");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAbAccess().getYCharbTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAbAccess().getYCharbTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Ab ****************/


/************ begin Rule Xb ****************
 *
 * Xb:
 * 	x=CharX y=Charb;
 *
 **/

// x=CharX y=Charb
protected class Xb_Group extends GroupToken {
	
	public Xb_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXbAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Xb_YAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getXbRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// x=CharX
protected class Xb_XAssignment_0 extends AssignmentToken  {
	
	public Xb_XAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXbAccess().getXAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("x",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("x");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getXbAccess().getXCharXTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getXbAccess().getXCharXTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// y=Charb
protected class Xb_YAssignment_1 extends AssignmentToken  {
	
	public Xb_YAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXbAccess().getYAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Xb_XAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("y",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("y");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getXbAccess().getYCharbTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getXbAccess().getYCharbTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Xb ****************/

}
