/*
 * generated by Xtext
 */
package org.eclipse.xtext.xtext.ecoreInference.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import org.eclipse.xtext.xtext.ecoreInference.services.MultiValueFeatureTestLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class MultiValueFeatureTestLanguageParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private MultiValueFeatureTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Start_FeatureAAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Start ****************
 *
 * Start:
 * 	featureA+=ID+;
 *
 **/

// featureA+=ID+
protected class Start_FeatureAAssignment extends AssignmentToken  {
	
	public Start_FeatureAAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStartAccess().getFeatureAAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Start_FeatureAAssignment(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("featureA",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("featureA");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStartAccess().getFeatureAIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStartAccess().getFeatureAIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Start ****************/

}
