/*
* generated by Xtext
*/
package org.eclipse.xtext.parsetree.transientvalues.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import org.eclipse.xtext.parsetree.transientvalues.services.TransientValuesTestGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class TransientValuesTestParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private TransientValuesTestGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Root_Group(this, this, 0, inst);
			case 1: return new TestRequired_Group(this, this, 1, inst);
			case 2: return new TestOptional_Group(this, this, 2, inst);
			case 3: return new TestList_Group(this, this, 3, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Root ****************
 *
 * Root:
 * 	"test" (TestRequired | TestOptional | TestList);
 *
 **/

// "test" (TestRequired | TestOptional | TestList)
protected class Root_Group extends GroupToken {
	
	public Root_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRootAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Root_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTestListAccess().getTestListAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTestOptionalAccess().getTestOptionalAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTestRequiredAccess().getTestRequiredAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "test"
protected class Root_TestKeyword_0 extends KeywordToken  {
	
	public Root_TestKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootAccess().getTestKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// TestRequired | TestOptional | TestList
protected class Root_Alternatives_1 extends AlternativesToken {

	public Root_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRootAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Root_TestRequiredParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Root_TestOptionalParserRuleCall_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Root_TestListParserRuleCall_1_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// TestRequired
protected class Root_TestRequiredParserRuleCall_1_0 extends RuleCallToken {
	
	public Root_TestRequiredParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getTestRequiredParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestRequired_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTestRequiredAccess().getTestRequiredAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TestRequired_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Root_TestKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// TestOptional
protected class Root_TestOptionalParserRuleCall_1_1 extends RuleCallToken {
	
	public Root_TestOptionalParserRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getTestOptionalParserRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestOptional_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTestOptionalAccess().getTestOptionalAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TestOptional_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Root_TestKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// TestList
protected class Root_TestListParserRuleCall_1_2 extends RuleCallToken {
	
	public Root_TestListParserRuleCall_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRootAccess().getTestListParserRuleCall_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTestListAccess().getTestListAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TestList_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Root_TestKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}



/************ end Rule Root ****************/


/************ begin Rule TestRequired ****************
 *
 * TestRequired:
 * 	{TestRequired} "required" required1=INT required2=INT;
 *
 **/

// {TestRequired} "required" required1=INT required2=INT
protected class TestRequired_Group extends GroupToken {
	
	public TestRequired_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTestRequiredAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestRequired_Required2Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTestRequiredAccess().getTestRequiredAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {TestRequired}
protected class TestRequired_TestRequiredAction_0 extends ActionToken  {

	public TestRequired_TestRequiredAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTestRequiredAccess().getTestRequiredAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "required"
protected class TestRequired_RequiredKeyword_1 extends KeywordToken  {
	
	public TestRequired_RequiredKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTestRequiredAccess().getRequiredKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestRequired_TestRequiredAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// required1=INT
protected class TestRequired_Required1Assignment_2 extends AssignmentToken  {
	
	public TestRequired_Required1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTestRequiredAccess().getRequired1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestRequired_RequiredKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("required1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("required1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTestRequiredAccess().getRequired1INTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTestRequiredAccess().getRequired1INTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// required2=INT
protected class TestRequired_Required2Assignment_3 extends AssignmentToken  {
	
	public TestRequired_Required2Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTestRequiredAccess().getRequired2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestRequired_Required1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("required2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("required2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTestRequiredAccess().getRequired2INTTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTestRequiredAccess().getRequired2INTTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TestRequired ****************/


/************ begin Rule TestOptional ****************
 *
 * TestOptional:
 * 	{TestOptional} "optional" opt1=INT? (":" opt2=INT)?;
 *
 **/

// {TestOptional} "optional" opt1=INT? (":" opt2=INT)?
protected class TestOptional_Group extends GroupToken {
	
	public TestOptional_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestOptional_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TestOptional_Opt1Assignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TestOptional_OptionalKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTestOptionalAccess().getTestOptionalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {TestOptional}
protected class TestOptional_TestOptionalAction_0 extends ActionToken  {

	public TestOptional_TestOptionalAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getTestOptionalAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "optional"
protected class TestOptional_OptionalKeyword_1 extends KeywordToken  {
	
	public TestOptional_OptionalKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getOptionalKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestOptional_TestOptionalAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// opt1=INT?
protected class TestOptional_Opt1Assignment_2 extends AssignmentToken  {
	
	public TestOptional_Opt1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getOpt1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestOptional_OptionalKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opt1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opt1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTestOptionalAccess().getOpt1INTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTestOptionalAccess().getOpt1INTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (":" opt2=INT)?
protected class TestOptional_Group_3 extends GroupToken {
	
	public TestOptional_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestOptional_Opt2Assignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class TestOptional_ColonKeyword_3_0 extends KeywordToken  {
	
	public TestOptional_ColonKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getColonKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestOptional_Opt1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TestOptional_OptionalKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// opt2=INT
protected class TestOptional_Opt2Assignment_3_1 extends AssignmentToken  {
	
	public TestOptional_Opt2Assignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTestOptionalAccess().getOpt2Assignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestOptional_ColonKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opt2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opt2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTestOptionalAccess().getOpt2INTTerminalRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTestOptionalAccess().getOpt2INTTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule TestOptional ****************/


/************ begin Rule TestList ****************
 *
 * TestList:
 * 	{TestList} "list" item+=INT*;
 *
 **/

// {TestList} "list" item+=INT*
protected class TestList_Group extends GroupToken {
	
	public TestList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTestListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestList_ItemAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TestList_ListKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTestListAccess().getTestListAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {TestList}
protected class TestList_TestListAction_0 extends ActionToken  {

	public TestList_TestListAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTestListAccess().getTestListAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "list"
protected class TestList_ListKeyword_1 extends KeywordToken  {
	
	public TestList_ListKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTestListAccess().getListKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestList_TestListAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// item+=INT*
protected class TestList_ItemAssignment_2 extends AssignmentToken  {
	
	public TestList_ItemAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTestListAccess().getItemAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TestList_ItemAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TestList_ListKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("item",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("item");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTestListAccess().getItemINTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTestListAccess().getItemINTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TestList ****************/

}
