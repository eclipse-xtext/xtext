/**
 * Copyright (c) 2012 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.xtend.core.tests.compiler;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend.core.tests.AbstractXtendTestCase;
import org.eclipse.xtend.core.xtend.XtendFile;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.xbase.compiler.DisableCodeGenerationAdapter;
import org.eclipse.xtext.xbase.compiler.GeneratorConfig;
import org.eclipse.xtext.xbase.compiler.IGeneratorConfigProvider;
import org.eclipse.xtext.xbase.compiler.JvmModelGenerator;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

@SuppressWarnings("all")
public class XtendCompilerTest extends AbstractXtendTestCase {
  @Inject
  private JvmModelGenerator generator;
  
  @Inject
  private IGeneratorConfigProvider generatorConfigProvider;
  
  @Test
  public void testBug386110() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import com.google.common.util.concurrent.ListenableFuture");
    _builder.newLine();
    _builder.append("import com.google.common.util.concurrent.MoreExecutors");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Foo<O> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val () => O operation = null");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def ListenableFuture<O> run() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val result = MoreExecutors::sameThreadExecutor.submit(operation)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("operation.apply");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return result");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.util.concurrent.ListenableFuture;");
    _builder_1.newLine();
    _builder_1.append("import com.google.common.util.concurrent.ListeningExecutorService;");
    _builder_1.newLine();
    _builder_1.append("import com.google.common.util.concurrent.MoreExecutors;");
    _builder_1.newLine();
    _builder_1.append("import java.util.concurrent.Callable;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo<O extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final Function0<? extends O> operation = null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public ListenableFuture<O> run() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ListeningExecutorService _sameThreadExecutor = MoreExecutors.sameThreadExecutor();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final ListenableFuture<O> result = _sameThreadExecutor.<O>submit(new Callable<O>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public O call() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return Foo.this.operation.apply();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("});");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this.operation.apply();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug383551_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("abstract class Option<T> {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("def <X> Option<X> map((T)=>X f) { switch this {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Some<T> : new Some<X>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("None<T> : new None<X>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class Some<T> extends Option<T> {}");
    _builder.newLine();
    _builder.append("class None<T> extends Option<T> {}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public abstract class Option<T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <X extends Object> Option<X> map(final Function1<? super T,? extends X> f) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Option<X> _switchResult = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("boolean _matched = false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (this instanceof Some) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("final Some<T> _some = (Some<T>)this;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Some<X> _some_1 = new Some<X>();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_switchResult = _some_1;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (this instanceof None) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("final None<T> _none = (None<T>)this;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("None<X> _none_1 = new None<X>();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_switchResult = _none_1;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _switchResult;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug383551_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("abstract class C<C_T> {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("def <X> C<X> m() { switch this {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("E<C_T> : new E<X>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class D<D_T> extends C<D_T> {}");
    _builder.newLine();
    _builder.append("class E<E_T> extends D<E_T> {}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public abstract class C<C_T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <X extends Object> C<X> m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("E<X> _switchResult = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("boolean _matched = false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (this instanceof E) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("final E<C_T> _e = (E<C_T>)this;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("E<X> _e_1 = new E<X>();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_switchResult = _e_1;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _switchResult;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  /**
   * Do not throw an exception for inherited dispatch methods.
   */
  @Test
  public void testInheritedDispatchMethods_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch testFunction1(String s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("s.length");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch testFunction1(Integer i) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("i.intValue");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class D extends C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch testFunction1(Double d) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("d.intValue");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.Arrays;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected int _testFunction1(final String s) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int _length = s.length();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _length;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected int _testFunction1(final Integer i) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int _intValue = i.intValue();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _intValue;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int testFunction1(final Object i) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (i instanceof Integer) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return _testFunction1((Integer)i);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (i instanceof String) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return _testFunction1((String)i);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw new IllegalArgumentException(\"Unhandled parameter types: \" +");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Arrays.<Object>asList(i).toString());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Ignore("TODO")
  @Test
  public void testInheritedDispatchMethods_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class D extends C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch testFunction1(Double d) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("d.intValue");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch testFunction1(String s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("s.length");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch testFunction1(Integer i) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("i.intValue");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("TODO");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Ignore("TODO")
  @Test
  public void testInheritedDispatchMethods_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class D extends C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch testFunction1(Double d) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("d.intValue");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch testFunction1(Number n) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("n.intValue");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch testFunction1(String s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("s.length");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch testFunction1(Integer i) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("i.intValue");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("TODO");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testExtensionForArrayOfT_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m1() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val String[] chars = newArrayList(\'foo\',\'bar\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("chars.at(2)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m2() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("newArrayList(\'foo\',\'bar\').at(2)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m3() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("newArrayList(\'foo\',\'bar\') => [ at(2) ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <T> T at(T[] obj, int index) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return obj.get(index)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Conversions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ObjectExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String m1() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final String[] chars = ((String[])Conversions.unwrapArray(CollectionLiterals.<String>newArrayList(\"foo\", \"bar\"), String.class));");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _at = this.<String>at(chars, 2);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (_at);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String m2() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ArrayList<String> _newArrayList = CollectionLiterals.<String>newArrayList(\"foo\", \"bar\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _at = this.<String>at(((String[])Conversions.unwrapArray(_newArrayList, String.class)), 2);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _at;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public ArrayList<String> m3() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ArrayList<String> _newArrayList = CollectionLiterals.<String>newArrayList(\"foo\", \"bar\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Procedure1<ArrayList<String>> _function = new Procedure1<ArrayList<String>>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public void apply(final ArrayList<String> it) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("C.this.<String>at(((String[])Conversions.unwrapArray(it, String.class)), 2);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ArrayList<String> _doubleArrow = ObjectExtensions.<ArrayList<String>>operator_doubleArrow(_newArrayList, _function);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _doubleArrow;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> T at(final T[] obj, final int index) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return obj[index];");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug401269_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Map");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.ArrayList");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <A> Map<A, Iterable<A>> then(Iterable<A> iter) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <A extends Number & Comparable<?>> Map<A, List<A>> then(List<A> expr) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def client(ArrayList<Long> arrayList) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val plainInvocation = then(arrayList)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("plainInvocation.toString");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val extensionInvocation = arrayList.then");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("extensionInvocation.toString");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Map;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <A extends Object> Map<A,Iterable<A>> then(final Iterable<A> iter) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <A extends Number & Comparable<?>> Map<A,List<A>> then(final List<A> expr) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String client(final ArrayList<Long> arrayList) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Map<Long,List<Long>> plainInvocation = this.<Long>then(arrayList);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("plainInvocation.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Map<Long,List<Long>> extensionInvocation = this.<Long>then(arrayList);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _string = extensionInvocation.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (_string);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug401269_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Map");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <A> Map<A, Iterable<A>> then(Iterable<A> iter) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <A extends Number & Comparable<?>> Map<A, List<A>> then(List<A> expr) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def client(Iterable<Long> iterable) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val plainInvocation = then(iterable)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("plainInvocation.toString");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val extensionInvocation = iterable.then");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("extensionInvocation.toString");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Map;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <A extends Object> Map<A,Iterable<A>> then(final Iterable<A> iter) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <A extends Number & Comparable<?>> Map<A,List<A>> then(final List<A> expr) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String client(final Iterable<Long> iterable) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Map<Long,Iterable<Long>> plainInvocation = this.<Long>then(iterable);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("plainInvocation.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Map<Long,Iterable<Long>> extensionInvocation = this.<Long>then(iterable);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _string = extensionInvocation.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (_string);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug401269_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Map");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.LinkedList");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <A> Map<A, Iterable<A>> then(Iterable<A> iter) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <A extends Number & Comparable<?>> Map<A, List<A>> then(List<A> expr) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def client(LinkedList<String> linkedList) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val plainInvocation = then(linkedList)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("plainInvocation.toString");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val extensionInvocation = linkedList.then");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("extensionInvocation.toString");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.LinkedList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Map;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <A extends Object> Map<A,Iterable<A>> then(final Iterable<A> iter) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <A extends Number & Comparable<?>> Map<A,List<A>> then(final List<A> expr) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String client(final LinkedList<String> linkedList) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Map<String,Iterable<String>> plainInvocation = this.<String>then(linkedList);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("plainInvocation.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Map<String,Iterable<String>> extensionInvocation = this.<String>then(linkedList);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _string = extensionInvocation.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (_string);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug401269_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Map");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.Set");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <A> Map<A, Iterable<A>> then(Iterable<A> iter) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <A extends Number & Comparable<?>> Map<A, List<A>> then(List<A> expr) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def client(Set<Integer> set) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val plainInvocation = then(set)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("plainInvocation.toString");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val extensionInvocation = set.then");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("extensionInvocation.toString");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Map;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Set;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <A extends Object> Map<A,Iterable<A>> then(final Iterable<A> iter) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <A extends Number & Comparable<?>> Map<A,List<A>> then(final List<A> expr) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String client(final Set<Integer> set) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Map<Integer,Iterable<Integer>> plainInvocation = this.<Integer>then(set);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("plainInvocation.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Map<Integer,Iterable<Integer>> extensionInvocation = this.<Integer>then(set);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _string = extensionInvocation.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (_string);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug401269_05() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Map");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <A> Map<A, Expression<A>> then(Expression<A> expr) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <A extends Number & Comparable<?>> Map<A, NumberExpression<A>> then(NumberExpression<A> expr) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val NumberPath<Long> count = null");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val y = then(count)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("println(y)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class NumberPath<T extends Number & Comparable<?>> extends NumberExpression<T> {}");
    _builder.newLine();
    _builder.append("class NumberExpression<T extends Number & Comparable<?>> extends ComparableExpressionBase<T> {}");
    _builder.newLine();
    _builder.append("class ComparableExpressionBase<T extends Comparable<?>> extends SimpleExpression<T> {}");
    _builder.newLine();
    _builder.append("class SimpleExpression<T> extends ExpressionBase<T> {}");
    _builder.newLine();
    _builder.append("class ExpressionBase<T> implements Expression<T> {}");
    _builder.newLine();
    _builder.append("interface Expression<T> {}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.Map;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <A extends Object> Map<A,Expression<A>> then(final Expression<A> expr) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <A extends Number & Comparable<?>> Map<A,NumberExpression<A>> then(final NumberExpression<A> expr) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final NumberPath<Long> count = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Map<Long,NumberExpression<Long>> y = this.<Long>then(count);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("InputOutput.<Map<Long,NumberExpression<Long>>>println(y);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug400823_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test.plugin");
    _builder.newLine();
    _builder.append("import static extension test.plugin.Foo.*");
    _builder.newLine();
    _builder.append("class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this - this");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static operator_minus(Foo x, Foo y) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package test.plugin;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int _minus = Foo.operator_minus(this, this);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _minus;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static int operator_minus(final Foo x, final Foo y) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return 1;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug380058_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import bug380058.Amount");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static bug380058.SI.*");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class JScienceTest {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def test() { ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val w = Amount::valueOf(100, MILLIMETER)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val h = Amount::valueOf(50, MILLIMETER)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val perim = w.plus(h).times(2)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("println(perim)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import bug380058.Amount;");
    _builder_1.newLine();
    _builder_1.append("import bug380058.Length;");
    _builder_1.newLine();
    _builder_1.append("import bug380058.SI;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class JScienceTest {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Amount<Length> test() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Amount<Length> _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Amount<Length> w = Amount.<Length>valueOf(100, SI.MILLIMETER);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Amount<Length> h = Amount.<Length>valueOf(50, SI.MILLIMETER);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Amount<Length> _plus = w.plus(h);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Amount<Length> perim = _plus.times(2);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Amount<Length> _println = InputOutput.<Amount<Length>>println(perim);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (_println);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug380059_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class C<T> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val C<?> c = this");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C<T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public C<? extends Object> m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("C<? extends Object> _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final C<?> c = this;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (c);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug362285_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class C<T> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("[T x|x].apply(null)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C<T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public T m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Function1<T,T> _function = new Function1<T,T>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public T apply(final T x) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return x;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("T _apply = _function.apply(null);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _apply;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug362285_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <T> m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("[T x|x].apply(null)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> T m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Function1<T,T> _function = new Function1<T,T>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public T apply(final T x) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return x;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("T _apply = _function.apply(null);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _apply;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug380525_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("abstract class L<E> extends java.util.AbstractList<E> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected new() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new Object() => [add(it as E) && remove]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.AbstractList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ObjectExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public abstract class L<E extends Object> extends AbstractList<E> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected L() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Object _object = new Object();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Procedure1<Object> _function = new Procedure1<Object>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public void apply(final Object it) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("boolean _and = false;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("boolean _add = L.this.add(((E) it));");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("if (!_add) {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("_and = false;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("boolean _remove = L.this.remove(it);");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("_and = (_add && _remove);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ObjectExtensions.<Object>operator_doubleArrow(_object, _function);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug380525_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("abstract class L<E> extends java.util.AbstractList<E> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected new(E e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("e => [add && remove]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.AbstractList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ObjectExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public abstract class L<E extends Object> extends AbstractList<E> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected L(final E e) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Procedure1<E> _function = new Procedure1<E>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public void apply(final E it) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("boolean _and = false;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("boolean _add = L.this.add(it);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("if (!_add) {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("_and = false;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("boolean _remove = L.this.remove(it);");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("_and = (_add && _remove);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ObjectExtensions.<E>operator_doubleArrow(e, _function);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug400433_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Test<T> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new(()=>T arg) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def <P> newInstance(()=>P arg) { new Test(arg) }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Test<T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Test(final Function0<? extends T> arg) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static <P extends Object> Test<P> newInstance(final Function0<? extends P> arg) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test<P> _test = new Test<P>(arg);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _test;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testForLoopWithTypeParameter_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class C<T extends CharSequence> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void m(Iterable<T> iter) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(x: iter) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("x.charAt(1)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C<T extends CharSequence> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m(final Iterable<T> iter) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("for (final T x : iter) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("x.charAt(1);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testForLoopWithTypeParameter_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <T extends CharSequence> void m(Iterable<T> iter) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(x: iter) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("x.charAt(1)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends CharSequence> void m(final Iterable<T> iter) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("for (final T x : iter) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("x.charAt(1);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testForLoopWithTypeParameter_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class C<T extends CharSequence> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <L extends Iterable<T>> void m(L iter) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(x: iter) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("x.charAt(1)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C<T extends CharSequence> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <L extends Iterable<T>> void m(final L iter) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("for (final T x : iter) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("x.charAt(1);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testForLoopWithTypeParameter_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("abstract class C<T extends CharSequence> implements Iterable<T> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(x: this) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("x.charAt(1)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public abstract class C<T extends CharSequence> implements Iterable<T> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("for (final T x : this) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("x.charAt(1);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug400347_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.LinkedList");
    _builder.newLine();
    _builder.newLine();
    _builder.append("interface XType {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class XItem<T extends XType> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("XList<T> gen");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("T item");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new(XList<T> gen, T item) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.gen = gen");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.item = item");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class XList<T extends XType> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val items = new LinkedList<XItem<T>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def add(T item) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val result = new XItem<T>(this, item)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("items.add(result)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public interface XType {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug400347_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.LinkedList");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class XItem<T extends XType> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("XList<T> gen");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("T item");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new(XList<T> gen, T item) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.gen = gen");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.item = item");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("interface XType {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class XList<T extends XType> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val items = new LinkedList<XItem<T>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def add(T item) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val result = new XItem<T>(this, item)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("items.add(result)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class XItem<T extends XType> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private XList<T> gen;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private T item;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public XItem(final XList<T> gen, final T item) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this.gen = gen;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this.item = item;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug400347_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.LinkedList");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class XList<T extends XType> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val items = new LinkedList<XItem<T>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def add(T item) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val result = new XItem<T>(this, item)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("items.add(result)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("interface XType {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class XItem<T extends XType> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("XList<T> gen");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("T item");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new(XList<T> gen, T item) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.gen = gen");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.item = item");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.LinkedList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class XList<T extends XType> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final LinkedList<XItem<T>> items = new Function0<LinkedList<XItem<T>>>() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public LinkedList<XItem<T>> apply() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("LinkedList<XItem<T>> _linkedList = new LinkedList<XItem<T>>();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return _linkedList;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}.apply();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean add(final T item) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("boolean _xblockexpression = false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("XItem<T> _xItem = new XItem<T>(this, item);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final XItem<T> result = _xItem;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("boolean _add = this.items.add(result);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (_add);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def String m(Pair<String, String> in) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("(\'\'->\'\').m");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String m(final Pair<String,String> in) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Pair<String,String> _mappedTo = Pair.<String, String>of(\"\", \"\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _m = this.m(_mappedTo);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def String m(Pair<String, String> in) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("(null->null).m");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String m(final Pair<String,String> in) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Pair<String,String> _mappedTo = Pair.<String, String>of(null, null);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _m = this.m(_mappedTo);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def String m(Pair<String, String> in) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("in.m");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String m(final Pair<String,String> in) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _m = this.m(in);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def <T> T m(Pair<T, T> in) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("in.m");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> T m(final Pair<T,T> in) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("T _m = this.<T>m(in);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_05() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def <T> T m(Pair<T, T> in) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("(null->null).m");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> T m(final Pair<T,T> in) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Pair<T,T> _mappedTo = Pair.<T, T>of(null, null);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("T _m = this.<T>m(_mappedTo);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_06() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def <T> String m(Pair<T, T> in) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("(\'\'->\'\').m");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> String m(final Pair<T,T> in) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Pair<String,String> _mappedTo = Pair.<String, String>of(\"\", \"\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _m = this.<String>m(_mappedTo);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_07() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def <T extends CharSequence> T m(Pair<T, T> in) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("in.m");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends CharSequence> T m(final Pair<T,T> in) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("T _m = this.<T>m(in);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_08() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def <T extends CharSequence> T m(Pair<T, T> in) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("(null->null).m");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends CharSequence> T m(final Pair<T,T> in) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Pair<T,T> _mappedTo = Pair.<T, T>of(null, null);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("T _m = this.<T>m(_mappedTo);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_09() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def String m(Pair<String, String> in) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("(\"\"->");
    _builder.append("\'\'\'\'\'\'", "    	");
    _builder.append(").m");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String m(final Pair<String,String> in) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("StringConcatenation _builder = new StringConcatenation();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Pair<String,String> _mappedTo = Pair.<String, String>of(\"\", _builder.toString());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _m = this.m(_mappedTo);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_10() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def <T> String m(Pair<T, T> it) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("m");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> String m(final Pair<T,T> it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _m = this.<T>m(it);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testLocalExtensionForPairStringString_11() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtext.xbase.lib.Pair");
    _builder.newLine();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def <T> String m(Pair<T, T> it) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("(key->value).m");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Pair;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> String m(final Pair<T,T> it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("T _key = it.getKey();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("T _value = it.getValue();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Pair<T,T> _mappedTo = Pair.<T, T>of(_key, _value);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _m = this.<T>m(_mappedTo);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _m;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testIfWithVoid() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (false) while(true) \'\'.toString");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (false) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("boolean _while = true;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("while (_while) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\".toString();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_while = true;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testIfWithVoidButNonVoidExpectation() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("val x = if (false) return;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("x");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Object _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Object _xifexpression = null;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (false) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Object x = _xifexpression;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (x);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testWorkWithArrays_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class Foo  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def void doStuff() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("val strings = newArrayOfSize(2)");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("strings.set(0, \'world\')");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("strings.set(1, \'hello\')");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("println(strings.get(1) + \' \' + strings.get(0))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void doStuff() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final String[] strings = new String[2];");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("strings[0] = \"world\";");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("strings[1] = \"hello\";");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _get = strings[1];");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _plus = (_get + \" \");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _get_1 = strings[0];");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _plus_1 = (_plus + _get_1);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("InputOutput.<String>println(_plus_1);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testWorkWithArrays_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class Foo  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def void doStuff() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("val numbers = newIntArrayOfSize(2)");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("numbers.set(0, 42)");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("numbers.set(1, 44)");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("println(numbers.get(1) + \' \' + numbers.get(0) + \' length : \' + numbers.length)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void doStuff() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final int[] numbers = new int[2];");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("numbers[0] = 42;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("numbers[1] = 44;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int _get = numbers[1];");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _plus = (Integer.valueOf(_get) + \" \");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int _get_1 = numbers[0];");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _plus_1 = (_plus + Integer.valueOf(_get_1));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _plus_2 = (_plus_1 + \" length : \");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int _length = numbers.length;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _plus_3 = (_plus_2 + Integer.valueOf(_length));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("InputOutput.<String>println(_plus_3);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testAbstractIterator_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Iterator");
    _builder.newLine();
    _builder.append("import com.google.common.collect.AbstractIterator");
    _builder.newLine();
    _builder.append("public class Foo  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def <T> Iterator<T> skipNulls(Iterator<T> iter) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("val AbstractIterator<T> result = [|");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("while(iter.hasNext) {");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("val elem = iter.next");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("if (elem != null)");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("return elem");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("return self.endOfData");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return result");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.collect.AbstractIterator;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Iterator;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ObjectExtensions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> Iterator<T> skipNulls(final Iterator<T> iter) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final AbstractIterator<T> _function = new AbstractIterator<T>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("protected T computeNext() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("boolean _hasNext = iter.hasNext();");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("boolean _while = _hasNext;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("while (_while) {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("final T elem = iter.next();");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("boolean _notEquals = ObjectExtensions.operator_notEquals(elem, null);");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("if (_notEquals) {");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("return elem;");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("boolean _hasNext_1 = iter.hasNext();");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("_while = _hasNext_1;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return this.endOfData();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final AbstractIterator<T> result = _function;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testAbstractIterator_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import com.google.common.collect.AbstractIterator");
    _builder.newLine();
    _builder.append("public class Foo  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def skipNulls() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("val AbstractIterator<String> result = [|");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("toString");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("super.toString");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("self.toString");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return result");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.collect.AbstractIterator;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public AbstractIterator<String> skipNulls() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final AbstractIterator<String> _function = new AbstractIterator<String>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("protected String computeNext() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("String _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("Foo.this.toString();");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("Foo.super.toString();");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("String _string = this.toString();");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("_xblockexpression = (_string);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final AbstractIterator<String> result = _function;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testAbstractIterator_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Iterator");
    _builder.newLine();
    _builder.append("import com.google.common.collect.AbstractIterator");
    _builder.newLine();
    _builder.append("public class Foo  {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <T> Iterator<T> skipNulls(Iterator<T> iter) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val AbstractIterator<T> result = [|");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("iter.findFirst [ it != null ] ?: self.endOfData");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return result");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.collect.AbstractIterator;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Iterator;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.IteratorExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ObjectExtensions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> Iterator<T> skipNulls(final Iterator<T> iter) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final AbstractIterator<T> _function = new AbstractIterator<T>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("protected T computeNext() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("T _elvis = null;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("final Function1<T,Boolean> _function = new Function1<T,Boolean>() {");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("public Boolean apply(final T it) {");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("boolean _notEquals = ObjectExtensions.operator_notEquals(it, null);");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("return Boolean.valueOf(_notEquals);");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("T _findFirst = IteratorExtensions.<T>findFirst(iter, _function);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("if (_findFirst != null) {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("_elvis = _findFirst;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("T _endOfData = this.endOfData();");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("_elvis = ObjectExtensions.<T>operator_elvis(_findFirst, _endOfData);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return _elvis;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final AbstractIterator<T> result = _function;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testAbstractIterator_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Iterator");
    _builder.newLine();
    _builder.append("import com.google.common.collect.AbstractIterator");
    _builder.newLine();
    _builder.append("class FindFirstOnIt {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <T> Iterator<T> skipNulls(Iterator<T> it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val AbstractIterator<T> result = [|");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("findFirst [ it != null ] ?: self.endOfData");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return result");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.collect.AbstractIterator;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Iterator;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.IteratorExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ObjectExtensions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class FindFirstOnIt {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> Iterator<T> skipNulls(final Iterator<T> it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final AbstractIterator<T> _function = new AbstractIterator<T>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("protected T computeNext() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("T _elvis = null;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("final Function1<T,Boolean> _function = new Function1<T,Boolean>() {");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("public Boolean apply(final T it) {");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("boolean _notEquals = ObjectExtensions.operator_notEquals(it, null);");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("return Boolean.valueOf(_notEquals);");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("T _findFirst = IteratorExtensions.<T>findFirst(it, _function);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("if (_findFirst != null) {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("_elvis = _findFirst;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("T _endOfData = this.endOfData();");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("_elvis = ObjectExtensions.<T>operator_elvis(_findFirst, _endOfData);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return _elvis;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final AbstractIterator<T> result = _function;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testVoidMethod_01() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System::out.println(\'\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("System.out.println(\"\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testVoidMethod_02() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("[ | System::out.println(\'\') ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Procedure0 m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Procedure0 _function = new Procedure0() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public void apply() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("System.out.println(\"\");");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _function;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testVoidMethod_03() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("[ | println(\'\') ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Function0<String> m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Function0<String> _function = new Function0<String>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public String apply() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("String _println = InputOutput.<String>println(\"\");");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return _println;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _function;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug399975_01() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("def void m(Class<?>[] c) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class B extends A{");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("override m(Class<? extends Object>[] c) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m(final Class<? extends Object>[] c) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug399975_02() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class B extends A{");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("override m(Class<? extends Object>[] c) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("def void m(Class<?>[] c) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class B extends A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m(final Class<? extends Object>[] c) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug399975_03() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("def void m(Class<?>... c) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class B extends A{");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("override m(Class<? extends Object>... c) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m(final Class<? extends Object>... c) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug399975_04() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class B extends A{");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("override m(Class<? extends Object>... c) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("def void m(Class<?>... c) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class B extends A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m(final Class<? extends Object>... c) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug399527() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Y {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("static def <T> IExpectationSetters<T> expect(T value) {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("HeaderAccess<?> unboundedMockHeaderAccess");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("def test() {");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("val Object header = unboundedMockHeaderAccess.header");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("val IExpectationSetters<Object> exp1 = expect(header)");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("val IExpectationSetters<Object> exp2 = expect(unboundedMockHeaderAccess.getHeader())");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("interface HeaderAccess<T> {");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("def T getHeader();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("interface IExpectationSetters<T> {}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Y {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static <T extends Object> IExpectationSetters<T> expect(final T value) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private HeaderAccess<? extends Object> unboundedMockHeaderAccess;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void test() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Object header = this.unboundedMockHeaderAccess.getHeader();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final IExpectationSetters<Object> exp1 = Y.<Object>expect(header);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Object _header = this.unboundedMockHeaderAccess.getHeader();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final IExpectationSetters<Object> exp2 = Y.<Object>expect(_header);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testThrowablesPropagate_01() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import static extension Throwables.*");
    _builder.newLine();
    _builder.append("import java.net.URI");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Throwables {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static <T> T propagate(()=>T proc, (Exception)=>Exception handler) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("proc.apply");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch(Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw handler.apply(e)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class Client {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val uri = [| new URI(\'\')].propagate [ new IllegalArgumentException(it) ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo (){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("uri.toString");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Exceptions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Throwables {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static <T extends Object> T propagate(final Function0<? extends T> proc, final Function1<? super Exception,? extends Exception> handler) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("T _xtrycatchfinallyexpression = null;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("T _apply = proc.apply();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_xtrycatchfinallyexpression = _apply;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("} catch (final Throwable _t) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("if (_t instanceof Exception) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("final Exception e = (Exception)_t;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("throw handler.apply(e);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("throw Exceptions.sneakyThrow(_t);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return _xtrycatchfinallyexpression;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} catch (Throwable _e) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw Exceptions.sneakyThrow(_e);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testThrowablesPropagate_02() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import static extension Throwables.*");
    _builder.newLine();
    _builder.append("import java.net.URI");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Client {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val uri = [| new URI(\'\')].propagate [ new IllegalArgumentException(it) ]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class Throwables {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static <T> T propagate(()=>T proc, (Exception)=>Exception handler) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("proc.apply");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch(Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw handler.apply(e)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.net.URI;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Exceptions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Client {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final URI uri = new Function0<URI>() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public URI apply() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Function0<URI> _function = new Function0<URI>() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("public URI apply() {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("URI _uRI = new URI(\"\");");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("return _uRI;");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("} catch (Throwable _e) {");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("throw Exceptions.sneakyThrow(_e);");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Function1<Exception,IllegalArgumentException> _function_1 = new Function1<Exception,IllegalArgumentException>() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("public IllegalArgumentException apply(final Exception it) {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("IllegalArgumentException _illegalArgumentException = new IllegalArgumentException(it);");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return _illegalArgumentException;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("URI _propagate = Throwables.<URI>propagate(_function, _function_1);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return _propagate;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}.apply();");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testAnnotationWithIntArray() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class TestXtend {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val static int a = 4");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Click(#[ a, a ])");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def meth() {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("annotation Click {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int[] value");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class TestXtend {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final static int a = 4;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Click({TestXtend.a, TestXtend.a})");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object meth() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testInterface() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("interface Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def int foo()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int bar=42");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public interface Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public abstract int foo();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public final static int bar = 42;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testEnum() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("enum Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("FOO, BAR, BAZ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public enum Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("FOO,");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("BAR,");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("BAZ;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testSneakyThrowable() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class MyClass {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void throwsSomething() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw new Throwable");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Exceptions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyClass {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void throwsSomething() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Throwable _throwable = new Throwable();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw _throwable;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} catch (Throwable _e) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw Exceptions.sneakyThrow(_e);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testThreeDataClassesExtendingEachOther() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.ArrayList");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Data class Node {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<Node> contents = newArrayList");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def String tagName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getClass.simpleName.toLowerCase");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Data class ContentNode extends Node {}");
    _builder.newLine();
    _builder.append("@Data class Body extends ContentNode {}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtend.lib.Data;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.util.ToStringHelper;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@Data");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Node {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final ArrayList<Node> _contents = new Function0<ArrayList<Node>>() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public ArrayList<Node> apply() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("ArrayList<Node> _newArrayList = CollectionLiterals.<Node>newArrayList();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return _newArrayList;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}.apply();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public ArrayList<Node> getContents() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return this._contents;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String tagName() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Class<? extends Node> _class = this.getClass();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _simpleName = _class.getSimpleName();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _lowerCase = _simpleName.toLowerCase();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _lowerCase;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Node() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int hashCode() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final int prime = 31;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int result = 1;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("result = prime * result + ((_contents== null) ? 0 : _contents.hashCode());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean equals(final Object obj) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (this == obj)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (obj == null)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (getClass() != obj.getClass())");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Node other = (Node) obj;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (_contents == null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (other._contents != null)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (!_contents.equals(other._contents))");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String toString() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String result = new ToStringHelper().toString(this);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  /**
   * see https://bugs.eclipse.org/bugs/show_bug.cgi?id=395043
   */
  @Test
  public void testOverriddenVarArgs() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class B extends A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override foo(String x, String...args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return x");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("abstract class A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def String foo(String x, String...args)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class B extends A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String foo(final String x, final String... args) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return x;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug383568() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Data class UsesExtension {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("extension String");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtend.lib.Data;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.util.ToStringHelper;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@Data");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class UsesExtension {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final String __string;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String get_string() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return this.__string;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public UsesExtension(final String _string) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this.__string = _string;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int hashCode() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final int prime = 31;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int result = 1;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("result = prime * result + ((__string== null) ? 0 : __string.hashCode());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean equals(final Object obj) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (this == obj)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (obj == null)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (getClass() != obj.getClass())");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("UsesExtension other = (UsesExtension) obj;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (__string == null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (other.__string != null)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (!__string.equals(other.__string))");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String toString() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String result = new ToStringHelper().toString(this);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug381201_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Data class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static String staticField");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtend.lib.Data;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.util.ToStringHelper;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@Data");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final static String staticField;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int hashCode() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final int prime = 31;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int result = 1;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean equals(final Object obj) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (this == obj)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (obj == null)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (getClass() != obj.getClass())");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Foo other = (Foo) obj;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String toString() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String result = new ToStringHelper().toString(this);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug381201_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Data class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static String staticField");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String nonStaticField");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtend.lib.Data;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.util.ToStringHelper;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@Data");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final static String staticField;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final String _nonStaticField;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String getNonStaticField() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return this._nonStaticField;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Foo(final String nonStaticField) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this._nonStaticField = nonStaticField;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int hashCode() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final int prime = 31;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int result = 1;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("result = prime * result + ((_nonStaticField== null) ? 0 : _nonStaticField.hashCode());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean equals(final Object obj) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (this == obj)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (obj == null)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (getClass() != obj.getClass())");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Foo other = (Foo) obj;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (_nonStaticField == null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (other._nonStaticField != null)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (!_nonStaticField.equals(other._nonStaticField))");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String toString() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String result = new ToStringHelper().toString(this);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testItShadowing_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Foo<T> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def grammar(String it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (it : it.toCharArray) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("println(it)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo<T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void grammar(final String it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("char[] _charArray = it.toCharArray();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("for (final char it_1 : _charArray) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("InputOutput.<Character>println(Character.valueOf(it_1));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testItShadowing_02() {
    final String tquotes = "\'\'\'";
    final String lt = "\u00AB";
    final String rt = "\u00BB";
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Foo<T> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def grammar(String it) ");
    _builder.append(tquotes, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append(lt, "		");
    _builder.append("FOR it: it.toCharArray");
    _builder.append(rt, "		");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append(lt, "			");
    _builder.append("it");
    _builder.append(rt, "			");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append(lt, "		");
    _builder.append("ENDFOR");
    _builder.append(rt, "		");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(tquotes, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo<T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public CharSequence grammar(final String it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("StringConcatenation _builder = new StringConcatenation();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("char[] _charArray = it.toCharArray();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("for(final char it_1 : _charArray) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_builder.append(it_1, \"\");");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_builder.newLineIfNotEmpty();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _builder;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  /**
   * see https://bugs.eclipse.org/bugs/show_bug.cgi?id=380062
   */
  @Test
  public void testBug380062_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Foo<T> {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def foo(Foo ^new) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foo(^new)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo<T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object foo(final Foo new_) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Object _foo = this.foo(new_);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _foo;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug380062_01_b() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Foo<T> {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def Object foo(Foo ^new) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foo(^new)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo<T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object foo(final Foo new_) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Object _foo = this.foo(new_);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _foo;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug380062_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Foo<T> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val String s");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("new(String ^new) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("s = ^new");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo<T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final String s;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Foo(final String new_) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this.s = new_;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testDataClasses_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Data class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String name");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("boolean myFlag");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("java.lang.Iterable<? extends Foo> references");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtend.lib.Data;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.util.ToStringHelper;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@Data");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final String _name;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String getName() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return this._name;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final boolean _myFlag;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean isMyFlag() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return this._myFlag;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final Iterable<? extends Foo> _references;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Iterable<? extends Foo> getReferences() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return this._references;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Foo(final String name, final boolean myFlag, final Iterable<? extends Foo> references) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this._name = name;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this._myFlag = myFlag;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this._references = references;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int hashCode() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final int prime = 31;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int result = 1;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("result = prime * result + ((_name== null) ? 0 : _name.hashCode());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("result = prime * result + (_myFlag ? 1231 : 1237);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("result = prime * result + ((_references== null) ? 0 : _references.hashCode());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean equals(final Object obj) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (this == obj)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (obj == null)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (getClass() != obj.getClass())");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Foo other = (Foo) obj;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (_name == null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (other._name != null)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (!_name.equals(other._name))");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (other._myFlag != _myFlag)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (_references == null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (other._references != null)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (!_references.equals(other._references))");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String toString() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String result = new ToStringHelper().toString(this);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testDataClasses_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Data class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String name = \'foo\'");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtend.lib.Data;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.util.ToStringHelper;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@Data");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final String _name = \"foo\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String getName() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return this._name;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int hashCode() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final int prime = 31;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int result = 1;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("result = prime * result + ((_name== null) ? 0 : _name.hashCode());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean equals(final Object obj) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (this == obj)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (obj == null)");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (getClass() != obj.getClass())");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Foo other = (Foo) obj;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (_name == null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (other._name != null)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (!_name.equals(other._name))");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String toString() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String result = new ToStringHelper().toString(this);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug380060() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Foo<T> {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static void main(String[] args) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("new Foo()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo<T extends Object> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static void main(final String[] args) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("new Foo<Object>();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug372864() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected String testSwitch(Object e) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("switch e {");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("String : return \"\"");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("default: null");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected String testSwitch(final Object e) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _switchResult = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("boolean _matched = false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (e instanceof String) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("final String _string = (String)e;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return \"\";");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_switchResult = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _switchResult;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testJavaLangReflectImport() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void doStuff(java.lang.reflect.Method m) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.lang.reflect.Method;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void doStuff(final Method m) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testSwitchAsVoid() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def m(Object a) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("switch a {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("case \'b\': while(true) \'\'.toString");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("case \'c\': if (true) return");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("case \'d\': for(i: 1..1) i.toString");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.base.Objects;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.IntegerRange;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m(final Object a) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("boolean _matched = false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (Objects.equal(a,\"b\")) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("boolean _while = true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("while (_while) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("\"\".toString();");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("_while = true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (Objects.equal(a,\"c\")) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("if (true) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (Objects.equal(a,\"d\")) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("IntegerRange _upTo = new IntegerRange(1, 1);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("for (final Integer i : _upTo) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("i.toString();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testSwitchWithNonVoidReturn() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class C  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def m(Object a) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("switch a {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("case \'b\': while(true) \'\'.toString");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("case \'c\': if (true) return \'a\'");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("case \'d\': for(i: 1..1) i.toString");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.base.Objects;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.IntegerRange;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String m(final Object a) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _switchResult = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("boolean _matched = false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (Objects.equal(a,\"b\")) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("boolean _while = true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("while (_while) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("\"\".toString();");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("_while = true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (Objects.equal(a,\"c\")) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("String _xifexpression = null;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("if (true) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return \"a\";");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_switchResult = _xifexpression;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (Objects.equal(a,\"d\")) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("IntegerRange _upTo = new IntegerRange(1, 1);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("for (final Integer i : _upTo) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("i.toString();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _switchResult;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testSwitchOverNull() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class Foo  {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def foo() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("switch null {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("case null : [Object it|it]");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("case null : [Integer it|it]");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import com.google.common.base.Objects;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Function1<? super Integer,? extends Object> foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Function1<? super Integer,? extends Object> _switchResult = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Object _switchValue = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("boolean _matched = false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (Objects.equal(_switchValue,null)) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("final Function1<Object,Object> _function = new Function1<Object,Object>() {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("public Object apply(final Object it) {");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("return it;");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_switchResult = _function;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (Objects.equal(_switchValue,null)) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("final Function1<Integer,Integer> _function_1 = new Function1<Integer,Integer>() {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("public Integer apply(final Integer it) {");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("return it;");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_switchResult = _function_1;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _switchResult;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testTryCatch() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void doStuff(java.lang.reflect.Method m) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// do nothing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (java.io.IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw e");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw e");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// do nothing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.io.IOException;");
    _builder_1.newLine();
    _builder_1.append("import java.lang.reflect.Method;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Exceptions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void doStuff(final Method m) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("} catch (final Throwable _t) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("if (_t instanceof IOException) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("final IOException e = (IOException)_t;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("throw e;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("} else if (_t instanceof Exception) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("final Exception e_1 = (Exception)_t;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("throw e_1;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("throw Exceptions.sneakyThrow(_t);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("} finally {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} catch (Throwable _e) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw Exceptions.sneakyThrow(_e);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testClosureSneakyThrow() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.io.File");
    _builder.newLine();
    _builder.append("import java.io.IOException");
    _builder.newLine();
    _builder.append("import java.util.Collections");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Foo {");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("def bar() {");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("newArrayList(\"file1.ext\").map(f| new File(f).canonicalFile)");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("} catch(IOException o) {");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("Collections::<File>emptyList");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.io.File;");
    _builder_1.newLine();
    _builder_1.append("import java.io.IOException;");
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Collections;");
    _builder_1.newLine();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Exceptions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ListExtensions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public List<File> bar() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("List<File> _xtrycatchfinallyexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("ArrayList<String> _newArrayList = CollectionLiterals.<String>newArrayList(\"file1.ext\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Function1<String,File> _function = new Function1<String,File>() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("public File apply(final String f) {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("File _file = new File(f);");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("File _canonicalFile = _file.getCanonicalFile();");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("return _canonicalFile;");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("} catch (Throwable _e) {");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("throw Exceptions.sneakyThrow(_e);");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("List<File> _map = ListExtensions.<String, File>map(_newArrayList, _function);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xtrycatchfinallyexpression = _map;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} catch (final Throwable _t) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (_t instanceof IOException) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("final IOException o = (IOException)_t;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("List<File> _emptyList = Collections.<File>emptyList();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_xtrycatchfinallyexpression = _emptyList;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("throw Exceptions.sneakyThrow(_t);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xtrycatchfinallyexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testClosureSneakyThrow_02() throws Exception {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("abstract class Foo {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("def Object getFoo(String x) throws Exception");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("def bar() {");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<String>newArrayList.toMap[foo]");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Map;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Exceptions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.IterableExtensions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public abstract class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public abstract Object getFoo(final String x) throws Exception;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Map<Object,String> bar() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ArrayList<String> _newArrayList = CollectionLiterals.<String>newArrayList();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Function1<String,Object> _function = new Function1<String,Object>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public Object apply(final String it) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("Object _foo = Foo.this.getFoo(it);");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return _foo;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("} catch (Throwable _e) {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("throw Exceptions.sneakyThrow(_e);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Map<Object,String> _map = IterableExtensions.<Object, String>toMap(_newArrayList, _function);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _map;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testFieldInitialization_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s1 = null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String s2 = \'\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String s3 = s2");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private String s1 = null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected String s2 = \"\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String s3 = this.s2;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testFieldInitialization_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s0 = s1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static String s1 = null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static String s2 = \'\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String s3 = s2");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private String s0 = Bar.s1;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private static String s1 = null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected static String s2 = \"\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static String s3 = Bar.s2;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testFieldInitialization_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = newArrayList.toString");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private String s = new Function0<String>() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public String apply() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("ArrayList<Object> _newArrayList = CollectionLiterals.<Object>newArrayList();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _string = _newArrayList.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return _string;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}.apply();");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testFieldInitialization_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String s = toString + super.toString");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private String s = new Function0<String>() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public String apply() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _string = Bar.this.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _string_1 = Bar.super.toString();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _plus = (_string + _string_1);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return _plus;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}.apply();");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testConstructorDeclaration_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Bar() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testConstructorDeclaration_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this(123)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new(int a) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Bar() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this(123);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Bar(final int a) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testConstructorDeclaration_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this(123.toString)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new(String s) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Bar() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this(new Function0<String>() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public String apply() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("String _string = Integer.valueOf(123).toString();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return _string;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}.apply());");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Bar(final String s) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testSneakyThrow() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void doStuff() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw new java.io.IOException()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.io.IOException;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Exceptions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void doStuff() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("IOException _iOException = new IOException();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw _iOException;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} catch (Throwable _e) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw Exceptions.sneakyThrow(_e);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testSneakyThrow_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void doStuff() throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw new IOException()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.io.IOException;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void doStuff() throws IOException {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("IOException _iOException = new IOException();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("throw _iOException;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testSimple() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def Integer doStuff(String x) {x.length}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Integer doStuff(final String x) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int _length = x.length();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return Integer.valueOf(_length);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testConstructor() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo() {new String()}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _string = new String();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _string;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testExtends() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar extends Thread {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar extends Thread {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testExtendsException() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class NoSuchElementException extends java.util.NoSuchElementException {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class NoSuchElementException extends java.util.NoSuchElementException {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testVisibilityOfDispatchMethods() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class NoSuchElementException {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch void foo(String s) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch void foo(Object s) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.Arrays;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class NoSuchElementException {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void _foo(final String s) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void _foo(final Object s) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void foo(final Object s) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (s instanceof String) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_foo((String)s);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (s != null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_foo(s);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw new IllegalArgumentException(\"Unhandled parameter types: \" +");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Arrays.<Object>asList(s).toString());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testParenthesisInDispatchMethodsGuards() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class MyType {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch void foo(String s, CharSequence other) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch void foo(String s, Void other) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch void foo(Object s, Object other) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.Arrays;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyType {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void _foo(final String s, final CharSequence other) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void _foo(final String s, final Void other) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void _foo(final Object s, final Object other) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void foo(final Object s, final Object other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (s instanceof String");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("&& other instanceof CharSequence) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_foo((String)s, (CharSequence)other);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (s instanceof String");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("&& other == null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_foo((String)s, (Void)null);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (s != null");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("&& other != null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_foo(s, other);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw new IllegalArgumentException(\"Unhandled parameter types: \" +");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Arrays.<Object>asList(s, other).toString());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testParenthesisInDispatchMethodsGuards_reordered() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class MyType {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch void foo(Object s, Object other) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch void foo(String s, Void other) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch void foo(String s, CharSequence other) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.Arrays;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyType {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void _foo(final Object s, final Object other) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void _foo(final String s, final Void other) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void _foo(final String s, final CharSequence other) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void foo(final Object s, final Object other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (s instanceof String");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("&& other instanceof CharSequence) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_foo((String)s, (CharSequence)other);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (s instanceof String");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("&& other == null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_foo((String)s, (Void)null);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (s != null");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("&& other != null) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_foo(s, other);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw new IllegalArgumentException(\"Unhandled parameter types: \" +");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Arrays.<Object>asList(s, other).toString());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testNoUnnecessaryCastInDispatchMethods() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class MyType {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch void foo(StringBuilder s, boolean b, String other) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def dispatch void foo(StringBuffer s, boolean b, String other) {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.Arrays;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyType {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void _foo(final StringBuilder s, final boolean b, final String other) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void _foo(final StringBuffer s, final boolean b, final String other) {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void foo(final Object s, final boolean b, final String other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (s instanceof StringBuffer) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_foo((StringBuffer)s, b, other);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else if (s instanceof StringBuilder) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_foo((StringBuilder)s, b, other);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("throw new IllegalArgumentException(\"Unhandled parameter types: \" +");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Arrays.<Object>asList(s, b, other).toString());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testExtendsArrayList_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class MyList<T> extends java.util.ArrayList<T> {}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyList<T extends Object> extends ArrayList<T> {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testExtendsArrayList_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class StringList extends java.util.ArrayList<String> {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class StringList extends ArrayList<String> {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testImplements() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar implements Cloneable, java.io.Serializable {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.io.Serializable;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar implements Cloneable, Serializable {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testConstructor_2() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo() {new java.util.HashMap<String,java.io.Serializable>()}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.io.Serializable;");
    _builder_1.newLine();
    _builder_1.append("import java.util.HashMap;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public HashMap<String,Serializable> foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("HashMap<String,Serializable> _hashMap = new HashMap<String,Serializable>();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _hashMap;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testAnnotation() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@com.google.inject.Inject String string");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import com.google.inject.Inject;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Inject");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private String string;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testAnnotationOnAnnotation() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("@java.lang.annotation.Documented");
    _builder.newLine();
    _builder.append("annotation Bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@com.google.inject.Inject String string");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import com.google.inject.Inject;");
    _builder_1.newLine();
    _builder_1.append("import java.lang.annotation.Documented;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@Documented");
    _builder_1.newLine();
    _builder_1.append("public @interface Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Inject");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String string();");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testSuperCall_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package x class Y extends Object {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override boolean equals(Object p){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (\'foo\' == p)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super.equals(p) ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package x;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ObjectExtensions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Y {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean equals(final Object p) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("boolean _xifexpression = false;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("boolean _equals = ObjectExtensions.operator_equals(\"foo\", p);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (_equals) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("boolean _equals_1 = super.equals(p);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xifexpression = _equals_1;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xifexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testSuperCall_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package x");
    _builder.newLine();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def String getThing() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.getThing(\'\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\'\'.getThing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.thing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\'\'.thing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("thing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getThing(\'\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected String getThing(String s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return s");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class B extends A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override getThing() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return super.getThing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return getThing(\'\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package x;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String getThing() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing(\"\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing(\"\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing(\"\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _thing = this.getThing(\"\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (_thing);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected String getThing(final String s) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return s;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testSuperCall_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package x");
    _builder.newLine();
    _builder.append("class B extends A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override getThing() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.getThing(\'\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\'\'.getThing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.thing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\'\'.thing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("thing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getThing(\'\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.getThing(\'\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.thing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.getThing");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.getThing()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def String getThing() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getThing(\'\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def protected String getThing(String s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return s");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package x;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import x.A;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class B extends A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String getThing() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing(\"\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing(\"\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing(\"\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.getThing(\"\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("super.getThing(\"\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("super.getThing();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("super.getThing();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _thing = super.getThing();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (_thing);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testCreateExtension() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def create result: new StringBuilder() aBuilder(String x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("result.append(x)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.HashMap;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public StringBuilder aBuilder(final String x) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final ArrayList<?>_cacheKey = CollectionLiterals.newArrayList(x);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final StringBuilder _result;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("synchronized (_createCache_aBuilder) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (_createCache_aBuilder.containsKey(_cacheKey)) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return _createCache_aBuilder.get(_cacheKey);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("StringBuilder _stringBuilder = new StringBuilder();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_result = _stringBuilder;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_createCache_aBuilder.put(_cacheKey, _result);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_init_aBuilder(_result, x);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _result;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final HashMap<ArrayList<? extends Object>,StringBuilder> _createCache_aBuilder = CollectionLiterals.newHashMap();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private void _init_aBuilder(final StringBuilder result, final String x) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("result.append(x);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testJavaDocs() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* I am Bar");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo() {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* I am bar,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* really!");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int bar");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* I am Bar");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* I am bar,");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* really!");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private int bar;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testJavaDocs_2() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param string");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo(String string) {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* @param string");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object foo(final String string) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testJavaDocs_3() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* {@link java.lang.String @see Integer}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo(String string) {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* {@link java.lang.String @see Integer}");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object foo(final String string) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testJavaDocs_4() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* {@link java.lang.String @see Integer}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo(String string) {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* {@link java.lang.String @see Integer}");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object foo(final String string) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testJavaDocs_5() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* {@link java.lang.String");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param string - stuff");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param string2");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo(String string, String string2) {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* {@link java.lang.String");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* @param string - stuff");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* @param string2");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object foo(final String string, final String string2) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testStaticMethod() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static foo() { 42 }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static int foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return 42;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testStaticMethod_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar<T extends CharSequence> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def factory() { new Bar }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def concreteFactory() { new Bar<StringBuilder> }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def <X extends String> parameterizedFactory() { new Bar<X> }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar<T extends CharSequence> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static Bar<CharSequence> factory() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Bar<CharSequence> _bar = new Bar<CharSequence>();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _bar;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static Bar<StringBuilder> concreteFactory() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Bar<StringBuilder> _bar = new Bar<StringBuilder>();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _bar;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static <X extends String> Bar<X> parameterizedFactory() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Bar<X> _bar = new Bar<X>();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _bar;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testInstanceMethod() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar<T extends CharSequence> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def factory() { new Bar }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def concreteFactory() { new Bar<String> }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def parameterizedFactory() { new Bar<T> }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <X extends T> concreteParameterizedFactory() { new Bar<X> }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar<T extends CharSequence> {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Bar<CharSequence> factory() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Bar<CharSequence> _bar = new Bar<CharSequence>();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _bar;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Bar<String> concreteFactory() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Bar<String> _bar = new Bar<String>();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _bar;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Bar<T> parameterizedFactory() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Bar<T> _bar = new Bar<T>();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _bar;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <X extends T> Bar<X> concreteParameterizedFactory() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Bar<X> _bar = new Bar<X>();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _bar;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testStaticField() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static int foo");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private static int foo;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testNestedClosureWithIt() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class X {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val (String)=>String function = [ [String it | it].apply(it) ]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function.apply(\'foo\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class X {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Function1<String,String> _function = new Function1<String,String>() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("public String apply(final String it) {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("final Function1<String,String> _function = new Function1<String,String>() {");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("public String apply(final String it) {");
    _builder_1.newLine();
    _builder_1.append("                  ");
    _builder_1.append("return it;");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("String _apply = _function.apply(it);");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return _apply;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Function1<? super String,? extends String> function = _function;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String _apply = function.apply(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = (_apply);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testNestedClosureSuperCall() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class X {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("[| [| super.toString ].apply ].apply");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class X {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Function0<String> _function = new Function0<String>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public String apply() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("final Function0<String> _function = new Function0<String>() {");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("public String apply() {");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("String _string = X.super.toString();");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("return _string;");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("String _apply = _function.apply();");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return _apply;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _apply = _function.apply();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _apply;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testExplicitBoxingUnboxing_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class X {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo(int p0, Integer p1) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("foo(p1,p0)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class X {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object foo(final int p0, final Integer p1) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Object _foo = this.foo((p1).intValue(), Integer.valueOf(p0));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _foo;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testExplicitBoxingUnboxing_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class X {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def Object foo(int p0, Integer p1) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("foo(p1,p0)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class X {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object foo(final int p0, final Integer p1) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Object _foo = this.foo((p1).intValue(), Integer.valueOf(p0));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _foo;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testOptionalSemicola() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int bar;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private File baz;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.io.File;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private int bar;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private File baz;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testNoDeclarationForFeatureCalls() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String FOO = \"Holla\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String baz = FOO;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private static String FOO = \"Holla\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private String baz = Foo.FOO;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testNoDeclarationForFeatureCalls_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String FOO = \"Holla\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String foo = \"Holla\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void test(String x, String y, int integer) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new Foo().test(foo, FOO, Integer::MAX_VALUE)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private static String FOO = \"Holla\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private String foo = \"Holla\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void test(final String x, final String y, final int integer) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Foo _foo = new Foo();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_foo.test(this.foo, Foo.FOO, Integer.MAX_VALUE);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testStringExtensionInlined_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def String returnString(String x, String y) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("x + \'\' + y");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String returnString(final String x, final String y) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _plus = (x + \"\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _plus_1 = (_plus + y);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _plus_1;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testNoVarForReturnExpression() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def String returnString(String x, String y) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return x + \'\' + y");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String returnString(final String x, final String y) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _plus = (x + \"\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return (_plus + y);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testNoVarForRightHandSideOfVarDecl() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def String returnString(String x, String y) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val z = x + \'\' + y");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return z");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String returnString(final String x, final String y) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _plus = (x + \"\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final String z = (_plus + y);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return z;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testJavaKeywordsUsed() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void someMethod(String assert) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val synchronized = newArrayList(\'foo\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (volatile : synchronized) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch continue : volatile {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case continue.length > 2 : synchronized.forEach(break | (break + continue).toString)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.IterableExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void someMethod(final String assert_) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final ArrayList<String> synchronized_ = CollectionLiterals.<String>newArrayList(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("for (final String volatile_ : synchronized_) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final String continue_ = volatile_;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("boolean _matched = false;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (!_matched) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("int _length = continue_.length();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("boolean _greaterThan = (_length > 2);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("if (_greaterThan) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("_matched=true;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("final Procedure1<String> _function = new Procedure1<String>() {");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("public void apply(final String break_) {");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("String _plus = (break_ + continue_);");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("_plus.toString();");
    _builder_1.newLine();
    _builder_1.append("              ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("IterableExtensions.<String>forEach(synchronized_, _function);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testExtensionField() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class NoNPE {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("extension String");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def useExtension() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_string.toString");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class NoNPE {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private String _string;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String useExtension() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _string = this._string.toString();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _string;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testFindFirstOnIt_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class FindFirstOnIt {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def <T> useExtension(Iterable<T> it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("findFirst [ it != null ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function1;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.IterableExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ObjectExtensions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class FindFirstOnIt {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <T extends Object> T useExtension(final Iterable<T> it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Function1<T,Boolean> _function = new Function1<T,Boolean>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public Boolean apply(final T it) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("boolean _notEquals = ObjectExtensions.operator_notEquals(it, null);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return Boolean.valueOf(_notEquals);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("T _findFirst = IterableExtensions.<T>findFirst(it, _function);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _findFirst;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testReturnType() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import test.ReturnTypeUsesTypeParameter");
    _builder.newLine();
    _builder.append("class MyClass implements ReturnTypeUsesTypeParameter {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override <LocalName extends CharSequence> accept(LocalName param) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import test.ReturnTypeUsesTypeParameter;");
    _builder_1.newLine();
    _builder_1.append("import test.ReturnTypeUsesTypeParameter.Inner;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyClass implements ReturnTypeUsesTypeParameter {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <LocalName extends CharSequence> Inner<LocalName> accept(final LocalName param) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testReturnType_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import test.ReturnTypeUsesTypeParameter");
    _builder.newLine();
    _builder.append("class MyClass implements ReturnTypeUsesTypeParameter {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override <LocalName extends CharSequence> accept(LocalName param) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("[ if (true) it?.apply(param) ] ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;");
    _builder_1.newLine();
    _builder_1.append("import test.ReturnTypeUsesTypeParameter;");
    _builder_1.newLine();
    _builder_1.append("import test.ReturnTypeUsesTypeParameter.Inner;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyClass implements ReturnTypeUsesTypeParameter {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public <LocalName extends CharSequence> Inner<LocalName> accept(final LocalName param) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Inner<LocalName> _function = new Inner<LocalName>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public void useProcedure(final Procedure1<? super LocalName> it) {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("if (true) {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("if (it!=null) it.apply(param);");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _function;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testReturnType_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.LinkedList");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class B extends A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def String client(CharSequence c) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("client(m)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\'\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("abstract class A {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def CharSequence m() ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class B extends A {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String client(final CharSequence c) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("CharSequence _m = this.m();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String _client = this.client(_m);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _client;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public CharSequence m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return \"\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testBug373482() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class X {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def method() ");
    _builder.append("\'\'\'\u00AB", "	");
    _builder.append("logSomething");
    _builder.append("\u00BB\'\'\'", "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("def void logSomething() {println(\"zonk\")}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class X {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public CharSequence method() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("StringConcatenation _builder = new StringConcatenation();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this.logSomething();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _builder;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void logSomething() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("InputOutput.<String>println(\"zonk\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testAnnotationSupport() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class X {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Property val String x = \'hello\'");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class X {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final String _x = \"hello\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String getX() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return this._x;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testRichStringAutoConversionToString_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public String test() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("StringConcatenation _builder = new StringConcatenation();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("_builder.append(\"SomeString\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return _builder.toString();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCompilesTo(
      "class Foo { def String test() \'\'\'SomeString\'\'\' }", _builder);
  }
  
  @Test
  public void testRichStringAutoConversionToString_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public String test() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("StringConcatenation _builder = new StringConcatenation();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("_builder.append(\"SomeString\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String _println = InputOutput.<String>println(_builder.toString());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return _println;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCompilesTo(
      "class Foo { def String test() { println(\'\'\'SomeString\'\'\') } }", _builder);
  }
  
  @Test
  public void testRichStringAutoConversionToString_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public String test() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String _xblockexpression = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("StringConcatenation _builder = new StringConcatenation();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("_builder.append(\"SomeString\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("final String x = InputOutput.<String>println(_builder.toString());");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("_xblockexpression = (x);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return _xblockexpression;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCompilesTo(
      "class Foo { def String test() { val x = println(\'\'\'SomeString\'\'\') x } }", _builder);
  }
  
  @Test
  public void testRichStringAutoConversionToString_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public String test() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String _xblockexpression = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("StringConcatenation _builder = new StringConcatenation();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("_builder.append(\"SomeString\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("final String x = _builder.toString();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("_xblockexpression = (x);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return _xblockexpression;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCompilesTo(
      "class Foo { def String test() { val x = \'\'\'SomeString\'\'\' x } }", _builder);
  }
  
  @Test
  public void testRichStringAutoConversionToString_05() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public String test() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("StringConcatenation _builder = new StringConcatenation();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("_builder.append(\"SomeString\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String _string = _builder.toString();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return _string;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCompilesTo(
      "class Foo { def String test() { \'\'\'SomeString\'\'\'.toString } }", _builder);
  }
  
  @Test
  public void testRichStringNoAutoConversionToString_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public CharSequence test() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("StringConcatenation _builder = new StringConcatenation();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("_builder.append(\"SomeString\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return _builder;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCompilesTo(
      "class Foo { def test() \'\'\'SomeString\'\'\' }", _builder);
  }
  
  @Test
  public void testRichStringAutoConversionDueToUnboundTypeParam_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public String test() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("StringConcatenation _builder = new StringConcatenation();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("_builder.append(\"SomeString\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String _println = InputOutput.<String>println(_builder.toString());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return _println;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCompilesTo(
      "class Foo { def test() { println(\'\'\'SomeString\'\'\') } }", _builder);
  }
  
  @Test
  public void testRichStringNoAutoConversionToString_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void test() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("StringConcatenation _builder = new StringConcatenation();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("_builder.append(\"SomeString\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("System.out.println(_builder);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCompilesTo(
      "class Foo { def test(){ System::out.println(\'\'\'SomeString\'\'\') } }", _builder);
  }
  
  @Test
  public void testRichStringAutoConversionDueToUnboundTypeParam_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.xtend2.lib.StringConcatenation;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class Foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void test() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("StringConcatenation _builder = new StringConcatenation();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("_builder.append(\"SomeString\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String _println = InputOutput.<String>println(_builder.toString());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("System.out.println(_println);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCompilesTo(
      "class Foo { def test(){ System::out.println(println(\'\'\'SomeString\'\'\')) } }", _builder);
  }
  
  @Test
  public void testAnnotationType_1() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("annotation MyAnnotation { ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String x;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Class<?>[] value;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("public @interface MyAnnotation {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String x();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int y();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Class<? extends Object>[] value();");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testAnnotationType_2() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("annotation MyAnnotation { ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String x = \'foo\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int y = 42");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Class<?> value = typeof(String)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("boolean flag = true");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("public @interface MyAnnotation {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String x() default \"foo\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int y() default 42;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Class<? extends Object> value() default String.class;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean flag() default true;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void testAnnotationType_3() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("annotation annotation { ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String annotation = \'foo\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val inferred = \'bar\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val inferredClass = typeof(StringBuilder)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("public @interface annotation {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String annotation() default \"foo\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String inferred() default \"bar\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Class<StringBuilder> inferredClass() default StringBuilder.class;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileAnnotationWithFileHeader() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* All rights reserved. This program and the accompanying materials");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* are made available under the terms of the Eclipse Public License v1.0");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* which accompanies this distribution, and is available at");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* http://www.eclipse.org/legal/epl-v10.html");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("annotation bar { ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String name = \'foobar\'");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* All rights reserved. This program and the accompanying materials");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* are made available under the terms of the Eclipse Public License v1.0");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* which accompanies this distribution, and is available at");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* http://www.eclipse.org/legal/epl-v10.html");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public @interface bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public String name() default \"foobar\";");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileClassWithFileHeader() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* All rights reserved. This program and the accompanying materials");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* are made available under the terms of the Eclipse Public License v1.0");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* which accompanies this distribution, and is available at");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* http://www.eclipse.org/legal/epl-v10.html");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class bar { ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String name = \'foobar\'");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* All rights reserved. This program and the accompanying materials");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* are made available under the terms of the Eclipse Public License v1.0");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* which accompanies this distribution, and is available at");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* http://www.eclipse.org/legal/epl-v10.html");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private String name = \"foobar\";");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileClassInDefaultPackageWithFileHeader() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Xtend can\'t decide whether this is a header or a javadoc");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class bar { ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* Xtend can\'t decide whether this is a header or a javadoc");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* Xtend can\'t decide whether this is a header or a javadoc");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class bar {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileClassInDefaultPackageWithFileHeaderAndJavaDoc() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* header");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* javadoc");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class bar { ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* header");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* javadoc");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class bar {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileClassInDefaultPackageWithFileHeaderAndImport() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* header");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("import java.util.Date");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Date d");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* header");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("import java.util.Date;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private Date d;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileClassInDefaultPackageWithJavadDocAndImport() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Date");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* javadoc");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Date d");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.Date;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* javadoc");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private Date d;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileAllClassesWithTheSameFileHeader() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/**");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* All rights reserved. This program and the accompanying materials");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* are made available under the terms of the Eclipse Public License v1.0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* which accompanies this distribution, and is available at");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* http://www.eclipse.org/legal/epl-v10.html");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("package foo");
      _builder.newLine();
      _builder.newLine();
      _builder.append("class bar {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("String name = \'foobar\'");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("class baz {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("String name = \'foobaz\'");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String input = _builder.toString();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("/**");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("* Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("* All rights reserved. This program and the accompanying materials");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("* are made available under the terms of the Eclipse Public License v1.0");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("* which accompanies this distribution, and is available at");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("* http://www.eclipse.org/legal/epl-v10.html");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("*/");
      _builder_1.newLine();
      _builder_1.append("package foo;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@SuppressWarnings(\"all\")");
      _builder_1.newLine();
      _builder_1.append("public class bar {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("private String name = \"foobar\";");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      final String expectedBarClass = _builder_1.toString();
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("/**");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* All rights reserved. This program and the accompanying materials");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* are made available under the terms of the Eclipse Public License v1.0");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* which accompanies this distribution, and is available at");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* http://www.eclipse.org/legal/epl-v10.html");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("*/");
      _builder_2.newLine();
      _builder_2.append("package foo;");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("@SuppressWarnings(\"all\")");
      _builder_2.newLine();
      _builder_2.append("public class baz {");
      _builder_2.newLine();
      _builder_2.append("  ");
      _builder_2.append("private String name = \"foobaz\";");
      _builder_2.newLine();
      _builder_2.append("}");
      _builder_2.newLine();
      final String expectedBazClass = _builder_2.toString();
      String _string = input.toString();
      final XtendFile file = this.file(_string, true);
      Resource _eResource = file.eResource();
      EList<EObject> _contents = _eResource.getContents();
      Iterable<JvmDeclaredType> _filter = Iterables.<JvmDeclaredType>filter(_contents, JvmDeclaredType.class);
      final JvmDeclaredType barType = IterableExtensions.<JvmDeclaredType>head(_filter);
      Resource _eResource_1 = file.eResource();
      EList<EObject> _contents_1 = _eResource_1.getContents();
      Iterable<JvmDeclaredType> _filter_1 = Iterables.<JvmDeclaredType>filter(_contents_1, JvmDeclaredType.class);
      final JvmDeclaredType bazType = IterableExtensions.<JvmDeclaredType>last(_filter_1);
      final GeneratorConfig generatorConfig = this.generatorConfigProvider.get(barType);
      final CharSequence barJavaCode = this.generator.generateType(barType, generatorConfig);
      final CharSequence bazJavaCode = this.generator.generateType(bazType, generatorConfig);
      String _string_1 = expectedBarClass.toString();
      String _string_2 = barJavaCode.toString();
      XtendCompilerTest.assertEquals(_string_1, _string_2);
      String _string_3 = expectedBazClass.toString();
      String _string_4 = bazJavaCode.toString();
      XtendCompilerTest.assertEquals(_string_3, _string_4);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * see https://bugs.eclipse.org/bugs/show_bug.cgi?id=391077
   */
  @Test
  public void testBug391077() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class TestError {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def Void voidObjectReturned() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def void sampleMethod() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("voidObjectReturned");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Integer::parseInt(\'1\')");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Exceptions;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class TestError {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Void voidObjectReturned() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void sampleMethod() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("this.voidObjectReturned();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("} catch (final Throwable _t) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (_t instanceof Exception) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("final Exception e = (Exception)_t;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Integer.parseInt(\"1\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("} else {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("throw Exceptions.sneakyThrow(_t);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileWithConfiguration() {
    final GeneratorConfig generatorConfig = this.generatorConfigProvider.get(null);
    generatorConfig.setGenerateSyntheticSuppressWarnings(false);
    generatorConfig.setGenerateExpressions(false);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* javadoc");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("1 + 1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* javadoc");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("throw new UnsupportedOperationException(\"foo is not implemented\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1, generatorConfig);
  }
  
  @Test
  public void compileWithConfiguration_2() {
    final GeneratorConfig generatorConfig = this.generatorConfigProvider.get(null);
    generatorConfig.setGenerateSyntheticSuppressWarnings(true);
    generatorConfig.setGenerateExpressions(false);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* javadoc");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"unused\")");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("1 + 1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* javadoc");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("throw new UnsupportedOperationException(\"foo is not implemented\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1, generatorConfig);
  }
  
  @Test
  public void compileWithConfiguration_3() {
    final GeneratorConfig generatorConfig = this.generatorConfigProvider.get(null);
    generatorConfig.setGenerateSyntheticSuppressWarnings(true);
    generatorConfig.setGenerateExpressions(false);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* javadoc");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@Deprecated");
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"unused\")");
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def foo(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("1 + 1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* javadoc");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("@Deprecated");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public int foo() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("throw new UnsupportedOperationException(\"foo is not implemented\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1, generatorConfig);
  }
  
  @Test
  public void compileImportForTypeRefInJavaDoc() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.ArrayList");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* {@link List}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see ArrayList");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def doStuff(){}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* {@link List}");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* @see ArrayList");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object doStuff() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileImportForTypeRefInJavaDoc_2() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.ArrayList");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* {@link List}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see ArrayList");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def doStuff(ArrayList l){}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* {@link List}");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* @see ArrayList");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Object doStuff(final ArrayList l) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileImportForTypeRefInJavaDoc_3() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.ArrayList");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see ArrayList");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<String> list = null");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.ArrayList;");
    _builder_1.newLine();
    _builder_1.append("import java.util.List;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("* @see ArrayList");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private List<String> list = null;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileImportForTypeRefInJavaDoc_Same_Package() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* {@link Bar}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class Foo {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class Bar{}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* {@link Bar}");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Foo {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void compileProperty() {
    final GeneratorConfig generatorConfig = this.generatorConfigProvider.get(null);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Bar {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Property");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("boolean generateExpressions = true");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Bar {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private boolean _generateExpressions = true;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public boolean isGenerateExpressions() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return this._generateExpressions;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void setGenerateExpressions(final boolean generateExpressions) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this._generateExpressions = generateExpressions;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1, generatorConfig);
  }
  
  public void assertCompilesTo(final CharSequence input, final CharSequence expected) {
    GeneratorConfig _get = this.generatorConfigProvider.get(null);
    this.assertCompilesTo(input, expected, _get);
  }
  
  public void assertCompilesTo(final CharSequence input, final CharSequence expected, final GeneratorConfig config) {
    try {
      String _string = input.toString();
      final XtendFile file = this.file(_string, true);
      Resource _eResource = file.eResource();
      EList<EObject> _contents = _eResource.getContents();
      Iterable<JvmDeclaredType> _filter = Iterables.<JvmDeclaredType>filter(_contents, JvmDeclaredType.class);
      final JvmDeclaredType inferredType = IterableExtensions.<JvmDeclaredType>head(_filter);
      boolean _isDisabled = DisableCodeGenerationAdapter.isDisabled(inferredType);
      Assert.assertFalse(_isDisabled);
      final CharSequence javaCode = this.generator.generateType(inferredType, config);
      String _string_1 = expected.toString();
      String _string_2 = javaCode.toString();
      XtendCompilerTest.assertEquals(_string_1, _string_2);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
