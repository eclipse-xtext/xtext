/**
 * generated by Xtext
 */
package org.eclipse.xtext.example.arithmetics.scoping;

import com.google.common.base.Objects;
import com.google.common.base.Predicate;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.FilteringScope;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class ArithmeticsScopeProvider extends AbstractDeclarativeScopeProvider {
  /**
   * we delegate to the default but filter out all descriptions with a qualified name (i.e. with '.' in the name)
   */
  public IScope getScope(final EObject context, final EReference reference) {
    FilteringScope _xblockexpression = null;
    {
      final IScope scope = super.getScope(context, reference);
      final Predicate<IEObjectDescription> _function = new Predicate<IEObjectDescription>() {
          public boolean apply(final IEObjectDescription it) {
            boolean _and = false;
            boolean _and_1 = false;
            boolean _notEquals = (!Objects.equal(it, null));
            if (!_notEquals) {
              _and_1 = false;
            } else {
              QualifiedName _name = it.getName();
              boolean _notEquals_1 = (!Objects.equal(_name, null));
              _and_1 = (_notEquals && _notEquals_1);
            }
            if (!_and_1) {
              _and = false;
            } else {
              QualifiedName _name_1 = it.getName();
              int _segmentCount = _name_1.getSegmentCount();
              boolean _equals = (_segmentCount == 1);
              _and = (_and_1 && _equals);
            }
            return _and;
          }
        };
      FilteringScope _filteringScope = new FilteringScope(scope, _function);
      _xblockexpression = (_filteringScope);
    }
    return _xblockexpression;
  }
}
