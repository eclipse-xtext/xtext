package generator.xtend;

import generator.xtend.AbstractXtendWebsite;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class ReleaseNotes24 extends AbstractXtendWebsite {
  public String path() {
    return "releasenotes_2_4.html";
  }
  
  protected boolean isPrettyPrint() {
    return true;
  }
  
  public CharSequence contents() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    CharSequence _headline = this.headline("Release Notes - Version 2.4");
    _builder.append(_headline, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<div id=\"page\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<div class=\"inner\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"container clearfix\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<h2>Xtend 2.4 Release Notes</h2>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<hr>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"span1\">&nbsp;</div>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<div class=\"span9\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("This release includes almost <a href=\"https://bugs.eclipse.org/bugs/buglist.cgi?o5=anywordssubstr&f1=OP&f0=OP&resolution=FIXED&classification=Modeling&classification=Tools&f4=CP&v5=kepler&query_format=advanced&j1=OR&f3=CP&bug_status=RESOLVED&bug_status=VERIFIED&f5=flagtypes.name&component=Backlog&component=Common&component=Core&component=Releng&component=Website&component=Xtext&component=Xtext%20Backlog&product=TMF&product=Xtend&list_id=4768360\">300 bug fixes and new features</a>.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>Table of contents</h2>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<li><a href=\"#android_development\">Android Support</a>");
    _builder.newLine();
    _builder.append("          \t");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("          \t\t");
    _builder.append("<li><a href=\"#android_debugging\">Debugging</a>");
    _builder.newLine();
    _builder.append("          \t\t");
    _builder.append("<li><a href=\"#android_maven\">Maven Archetype</a>");
    _builder.newLine();
    _builder.append("          \t");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<li><a href=\"#new_language_features\">New Language Features</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#active_annotations\">Active Annotations</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#collection_literals\">Collection Literals and Array Access</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#extension_values\">Extension Values</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#interfaces_enums_annotations\">Interfaces, Enumerations and Annotations</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#sam_types\">SAM Type Conversion</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#new_operators\">New Operators</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</li>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<li><a href=\"#new_ide_features\">New Editor Features</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#organize_imports\">Organize Imports</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#extract_method\">Extract Method and Extract Local Variable</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#suppression_followup\">Supression of Follow-Up Errors</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#optional_errors\">Optional Errors and Warnings</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#quickfixes\">New Quickfixes</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#content_assist\">Improved Content Assist</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#formatter\">Code Formatter</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#javadoc\">JavaDoc</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<li><a href=\"#copy_qualifiedname\">Copy Qualified Name</a>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</li>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<section id=\"android_development\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<h2>Android Support</h2>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>As Xtend compiles to Java and does not have its own standard library but relies on the JDK, it is a ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("great choice for Android application development. With version 2.4 the Android support has been ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("further improved.");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<h3 id=\"android_debugging\">Debugging</h3>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Previously Xtend supported debugging through JSR-45 only, which works great in standard ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("JVMs as it allows you to switch between Xtend and generated Java source during a debug ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("session. The Dalvik VM unfortunately does not support JSR-45. Now you can configure ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("the compiler to use either JSR-45 or install the debug information such that Android ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("debugging simply works.");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<h3 id=\"android_maven\">Maven Archetype</h3>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("There is also a Maven archetype to set up a working Android project easily. If you ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("have installed Maven and the Android SDK the you only need the following command to ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("get started:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint linenums\">");
    _builder.newLine();
    _builder.append("mvn archetype:generate -DarchetypeGroupId=org.eclipse.xtend \\");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("-DarchetypeArtifactId=xtend-android-archetype \\");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("-DarchetypeCatalog=http://build.eclipse.org/common/xtend/maven/");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("This will provide you with a fully configured Android/Xtend project.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<section id=\"new_language_features\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>New Language Features</h2>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("The following new features have been added to the Xtend language.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h3 id=\"active_annotations\" >Active Annotations (Provisional API)</h3>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Xtend\'s <em>Active Annotations</em> allow developers to use a simple annotation to tell ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("that a certain pattern should be expanded to a specific piece of Java code. A simple example would be a JavaBeans ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("property supporting the Observer pattern. Here you need a getter and a ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("setter method for each field and also an observer list and the proper code to notify ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("them about changes. In many software systems you have hundreds of these properties. ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Active Annotation allow you to define and automate the implementation of such patterns ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("and idioms at a single point and ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("let the compiler expand it on the fly. And all this based on lightweight, custom libraries. ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("You do no longer have to write nor ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("read the boiler plate code anymore. <a href=\"documentation.html#activeAnnotations\">Read more...</a>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Example: To compile the Xtend code on the left to the Java code on the right");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<table class=\"table table-bordered table-condensed\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<th>Xtend</th>");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<th>Java</th>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<td>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("@Observable");
    _builder.newLine();
    _builder.append("class Person {");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("String name");
    _builder.newLine();
    _builder.append("} ");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<td>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-java linenums\">");
    _builder.newLine();
    _builder.append("public class Person {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setName(final String name) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String _oldValue = this.name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("_propertyChangeSupport.firePropertyChange(");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"name\", _oldValue, name);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PropertyChangeSupport _propertyChangeSupport ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("= new PropertyChangeSupport(this);");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// method addPropertyChangeListener");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// method removePropertyChangeListener");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("you have to implement a simple active annotation <code class=\"prettyprint lang-xtend\">@Observable</code> as");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("@Active(typeof(ObservableCompilationParticipant))");
    _builder.newLine();
    _builder.append("annotation Observable {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ObservableCompilationParticipant extends AbstractClassProcessor {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("override doTransform(MutableClassDeclaration clazz, extension TransformationContext context) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for (f : clazz.declaredFields) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("val fieldName = f.simpleName");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("val fieldType = f.type");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("clazz.addMethod(\'get\' + fieldName.toFirstUpper) [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("returnType = fieldType");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("body = [\'");
    _builder.append("\'\'return this.&laquo;fieldName&raquo;;\'\'");
    _builder.append("\']");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("clazz.addMethod(\'set\' + fieldName.toFirstUpper) [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("addParameter(fieldName, fieldType)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("body = [\'");
    _builder.append("\'\'");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("&laquo;fieldType&raquo; _oldValue = this.&laquo;fieldName&raquo;;");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("this.&laquo;fieldName&raquo; = &laquo;fieldName&raquo;;");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("_propertyChangeSupport.firePropertyChange(\"&laquo;fieldName&raquo;\", _oldValue, ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("&laquo;fieldName&raquo;);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\'\'");
    _builder.append("\']");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val changeSupportType = typeof(PropertyChangeSupport).newTypeReference");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("clazz.addField(\'_propertyChangeSupport\') [");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("type = changeSupportType");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("initializer = [\'\'");
    _builder.append("\'new &laquo;toJavaCode(changeSupportType)&raquo;(this)\'\'");
    _builder.append("\']");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// add method addPropertyChangeListener");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// add method removePropertyChangeListener");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h3 id=\"collection_literals\">Collection Literals and Arrays</h3>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Xtend now has literals for unmodifiable collections.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("val listOfWords = #[\"Hello\", \"Xtend\"]");
    _builder.newLine();
    _builder.append("val setOfWords  = #{\"Hello\", \"Xtend\"}");
    _builder.newLine();
    _builder.append("val mapOfWords  = #{1->\"Hello\", 2->\"Xtend\"}");
    _builder.newLine();
    _builder.append("</pre> ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Collections created with a literal are immutable. The list literal can be used to natively create arrays, too. ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("If the target type is an array, it will compile to an array initializer.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("val String[] arrayOfWords = #[\"Hello\", \"Xtend\"]");
    _builder.newLine();
    _builder.append("</pre> ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("In addition to literals for arrays you can now also easily access and modify arrays ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("as well as create empty arrays of any size.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("val String[] arrayOfWords = newArrayOfSize(2)");
    _builder.newLine();
    _builder.append("arrayOfWords.set(0, \'Hello\')");
    _builder.newLine();
    _builder.append("arrayOfWords.set(1, \'Xtend\')");
    _builder.newLine();
    _builder.append("</pre> ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<h3 id=\"interfaces_enums_annotations\">Interfaces, Enums and Annotations</h3>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Interfaces, enumerations and annotation types can now be declared directly in Xtend. ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("interface Container<T> {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("def T findChild((T)=>boolean matcher)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("enum Color {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("RED, GREEN, BLUE");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Retention(RetentionPolicy::RUNTIME)");
    _builder.newLine();
    _builder.append("@Target(ElementType::TYPE)");
    _builder.newLine();
    _builder.append("annotation DependsOn {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Class&lt;? extends Target&gt; value");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("val version = \"2.4.0\" // type \'String\' inferred ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<h3 id=\"extension_values\">Extension Values</h3>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Extension methods allow to add new methods to existing types without modifying them. ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Consider the omnipresent class <code class=\"prettyprint lang-java\">java.lang.String</code>.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("If you have to parse a string to a number, you could always write");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-java linenums\">");
    _builder.newLine();
    _builder.append("Integer::parseInt(\'42\')");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>but what you actually think of is</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("\'42\'.parseInt");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>To make that possible, you simply import the class <code class=\"prettyprint lang-java\">Integer</code> as a static extension:</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("import static extension java.lang.Integer.*");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>This enables to pass the base of the number as an argument, too:</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("\'2A\'.parseInt(16)");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Extension methods are available in C# as well, but Xtend can do better. In Xtend, fields, ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("parameters and local variables can provide extensions, too. In fact, not all");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("the useful functionality is available statically: if you now want to format the");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("parsed number to present it in the UI according to a localized pattern");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("from a <code class=\"prettyprint lang-java\">ResourceBundle</code>,");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("you can simply use a <code class=\"prettyprint lang-java\">Formatter</code> and ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("write readable code that\'s easy to grasp:");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("def getFormattedNumber(String number, extension ResourceBundle bundle) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("val localized = \'number_pattern\'.getString");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("extension val formatter = new Formatter");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("localized.format(number.parseInt)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>The above is equivalent to the slightly more bulky:</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("def getFormattedNumber(String number, ResourceBundle bundle) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("val localized = bundle.getString(\'number_pattern\')");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("val formatter = new Formatter");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("formatter.format(localized, Integer::valueOf(number))");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Extensions are a handy mechanism to add layer specific ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("functionality to classes: You could add UI related ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("methods to your domain models via extensions just where they are needed, ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("without introducing a UI dependency for other clients.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<h3 id=\"sam_types\">SAM Type Conversion</h3>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Lambda expressions now work with abstract classes with a single abstract method ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(SAM types). For example, the <code class=\"prettyprint lang-java\">AbstractIterator</code> ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("from the Guava library has a single abstract method ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<code class=\"prettyprint lang-java\">computeNext()</code>. A lambda can be used to implement that:");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("val AbstractIterator&lt;Double&gt; infiniteRandomNumbers = [| Math::random]");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<h3 id=\"new_operators\">New Operators</h3>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Some new operators have been added. In addition to the usual <code>==</code> and <code>!=</code>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("operators which map to <code>Object.equals(Object)</code>, the operators <code>===</code> and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<code>!==</code> respectively can be used to test for identity equality.");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("if (myObject === otherObject) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("println(\"same objects\")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Also new exclusive range operators have been introduced. In order to iterate over a list and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("work with the index you can write:</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("for (idx : 0 ..&lt; list.size) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("println(\"(\"+idx+\") \"+list.get(idx))");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Or if you want to iterate backwards :</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("for (idx : list.size &gt;.. 0) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("println(\"(\"+idx+\") \"+list.get(idx))");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<section id=\"new_ide_features\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>New IDE Features</h2>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<p>Being an Eclipse project Xtend has always been designed with IDE integration in ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("mind. We are proud to announce that the editing support is now almost on par with ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Java\'s and in some cases already even better. A user recently wrote in the newsgroup:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<blockquote>");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("Tooling for Xtend is unlike any other language for the JVM after Java. The IDE support ");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("is first class. It will take years for some languages to catch up. Some never will.");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("</blockquote>");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("The following new IDE features improve the editing experience significantly:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<dl>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h3 id=\"organize_imports\">Organize Imports</h3>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("With the new release we have overhauled the <em>Organize imports</em> action. It ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("processes all kinds of imports, asks to resolve conflicts, and shortens qualified names");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("automatically.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/organize_imports.png\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h3 id=\"extract_method\">Extract Method and Extract Local Variable</h3>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("New refactorings have been added. You can now extract code into a new local variable");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/extract_local_variable.png\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("or into a new method.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/extract_method_refactoring.png\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h3 id=\"suppression_followup\">Supression of Follow-Up Errors</h3>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Follow-up error markers are now suppressed and errors in general are much more local, ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("so it is very easy spot the problem immediately. In addition, the compiler generates ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("as much valid Java code as possible in order not to break dependent resources on changes.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/follow_up_errors.png\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h3 id=\"optional_errors\">Optional Errors and Warnings</h3>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<p>The severity of optional compiler errors can be configured globally as well as ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("individually for a single project.</p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/issue_severities.png\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h3 id=\"quickfixes\">More Quickfixes</h3>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Xtend now offers to create missing elements. Fields, methods, extension methods and types ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("can be added with a quickfix, be it in Xtend or in Java classes.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/quickfixes.png\"/> ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h3 id=\"content_assist\">Improved Content Assist</h3>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("The content assist has become much smarter. It now proposes lambda brackets if the argument ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("takes a single function and it gives you hints on the possible parameter types when you ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("are working with overloaded methods.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/content_assist.png\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h3 id=\"formatter\">Formatter</h3>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("A configurable formatter which pretty prints and indents code idiomatically is now available.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/formatter.png\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/formatter_preferences.png\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h3 id=\"javadoc\">JavaDoc</h3>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("An Xtend editor now has validation and content assist within JavaDoc comments.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/javadoc_content_assist.png\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h3 id=\"copy_qualifiedname\">Copy Qualified Name</h3>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("You can use <em>Copy qualifed name</em> in the editor and the outline view to copy the name");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("of types, fields and methods into the clipboard.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/copy_qualified_name.png\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</dl>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</section>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</div>  ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"span1\">&nbsp;</div>  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
}
