package generator.xtend;

import generator.xtend.AbstractXtendWebsite;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class ReleaseNotes extends AbstractXtendWebsite {
  public String path() {
    return "releasenotes.html";
  }
  
  protected boolean isPrettyPrint() {
    return true;
  }
  
  public CharSequence contents() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("        ");
    CharSequence _headline = this.headline("Release Notes");
    _builder.append(_headline, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("<div id=\"page\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<div class=\"inner\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"container clearfix\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>Xtend 2.6.0 Release Notes (May 21th, 2014)</h2>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<hr>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"span1\">&nbsp;</div>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<div class=\"span9\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("Version 2.6 got many bug fixes and performance improvements (<a href=\"https://bugs.eclipse.org/bugs/buglist.cgi?bug_status=RESOLVED&bug_status=VERIFIED&bug_status=CLOSED&status_whiteboard=v2.6\">full bugzilla list</a>). The new features are:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</section><section id=\"anonymous_classes\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Anonymous Classes</h2>");
    _builder.newLine();
    _builder.append("<p>Xtend supports using lambdas to implement anonymous classes with just one abstract method since its inception. ");
    _builder.newLine();
    _builder.append("For interfaces and abstract classes with more than one method you can now also use the an anonymous class using the following syntax:</p>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("val tabListener = new ActionBar.TabListener() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("override onTabSelected(ActionBar.Tab tab, FragmentTransaction ft) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// show the given tab");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("override onTabUnselected(ActionBar.Tab tab, FragmentTransaction ft) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// hide the given tab");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("override onTabReselected(ActionBar.Tab tab, FragmentTransaction ft) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// probably ignore this event");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.append("</pre>     ");
    _builder.newLine();
    _builder.append("</section><section id=\"static_nested_classes\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Static Nested Classes</h2>");
    _builder.newLine();
    _builder.append("<p>Xtend now supports static nested classes.</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("class A {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static class NestedClass {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("</section><section id=\"operator_declaration\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Operator Declarations</h2>");
    _builder.newLine();
    _builder.append("<p>In addition to overloading operators by adhering to the name mappings, listed in <a href=\"documentation.html#operators\">the documentation</a>, ");
    _builder.newLine();
    _builder.append("one can now use the actual operator in the declaration as well.</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("class Money {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def + (Money other) { ... }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def - (Money other) { ... }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def * (BigDecimal times) { ... }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("...");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("</section><section id=\"synchronized_expression\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Synchronized Expression</h2>");
    _builder.newLine();
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("The synchronized expression works basically like Java\'s synchronized statement.");
    _builder.newLine();
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("synchronized(lock) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// do stuff");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("But of course it is an expression, as everything in Xtend/Xbase. So you can write the following as well:");
    _builder.newLine();
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("someMethodCall(synchronized(lock) { ... })");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("</section><section id=\"qualified_static_imports\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Qualified Static Imports</h2>");
    _builder.newLine();
    _builder.append("<p>It is now possible to import features in a fully qualified way. This works for regular static imports as well as for extension imports.</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("// static import");
    _builder.newLine();
    _builder.append("import static java.util.Collections.singleton");
    _builder.newLine();
    _builder.append("// extension import");
    _builder.newLine();
    _builder.append("import static extension java.util.Collections.min");
    _builder.newLine();
    _builder.append("import static extension java.util.Collections.max");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("</section><section id=\"switch_fall_through\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Switch Fall Through</h2>");
    _builder.newLine();
    _builder.append("<p>The switch expression now supports a kind of fall through. Here\'s an example</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("switch myOperator {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case \'+\',");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case \'-\' : handlePlusMinus()    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case \'*\',");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case \'/\' : handleDivMultiply()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("default : throw new IllegalStateException");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("</section><section id=\"compound_assignments\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Compound Assignments</h2>");
    _builder.newLine();
    _builder.append("<p>Xtend now supports compound assignment operators.</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("var i = 0");
    _builder.newLine();
    _builder.append("i += 42");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("<p>Compound operators work on overloaded operators as well. That is you don\'t need to declare \'+=\' if you have \'+\' defined. ");
    _builder.newLine();
    _builder.append("Example:</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("var distance = 15.km");
    _builder.newLine();
    _builder.append("distance += 5.km");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("</section><section id=\"postfix_operators\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Postfix Operators</h2>");
    _builder.newLine();
    _builder.append("<p>Postfix operators for incrementing and decrementing numbers have been added.</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("var i = 0");
    _builder.newLine();
    _builder.append("while (condition()) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("i++");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("</section><section id=\"traditional_for_loop\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Traditional For-Loop</h2>");
    _builder.newLine();
    _builder.append("<p>The traditional for-loop from Java is now available in Xtend, too.</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("for (var i = 0; i < 99; i++) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("println(\'\'+i+\' bottles of beer on the wall.\')");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</section><section id=\"multivalued_annotation_sugar\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Multivalued Annotations Sugar</h2>");
    _builder.newLine();
    _builder.append("<p>Instead of writing </p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("@SurpressWarnings(#[\"unused\", \"unchecked\"])");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("<p> you can write</p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("@SurpressWarnings(\"unused\", \"unchecked\")");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</section><section id=\"active_annotation_mark_as_read\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Active Annotations - Flag fields as read resp. initialized</h2>");
    _builder.newLine();
    _builder.append("<p>When initializing a final field within a synthetic constructor, the control flow analysis couldn\'t detect it was in fact initialized and would raise an error. Another typical solution was a warning when a private field was only accessed through methods added by an active annotation (e.g. a setter or getter). You can now mark a field as read resp. initialized.</p>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</section><section id=\"style_checks\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Style Checks</h2>");
    _builder.newLine();
    _builder.append("<p>2.6 adds the following optional compiler checks (inactive by default):</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<h3>Force return expression</h3>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/2_6_0_validation-explicit-return.png\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<h3>Force declare return types</h3>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/2_6_0_validation-explicit-return-declaration.png\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<h3>Force empty parenthesis on method invocation</h3>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/2_6_0_validation-empty-parenthesis.png\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</section><section id=\"new_ide_features\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Task Tags</h2>");
    _builder.newLine();
    _builder.append("<p>TODO, FIXME, and XXX markers in comments are no recognized by teh IDE as task markers.");
    _builder.newLine();
    _builder.append("The Xtend editor picks up the preference of JDT for adding new kind of markers or removing existing ones.</p>");
    _builder.newLine();
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/2_6_0_task_markers.png\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</section><section id=\"new_ide_features\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Open Implementation</h2>");
    _builder.newLine();
    _builder.append("<p>In addition to go to declaration, you can now navigate to existing implementations of a method. It works just like in JDT</p>");
    _builder.newLine();
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/2_6_0_open_implementation.png\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</section><section id=\"new_ide_features\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Debug Hover Shows Inspect Dialog</h2>");
    _builder.newLine();
    _builder.append("<p>In a debug session, when hovering over a local variable or a visible field, the popo up shows the inspection tree of the hovered value.</p>");
    _builder.newLine();
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/2_6_0_debug_hover_variable.png\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</section><section id=\"new_ide_features\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Hover Shows Annotations</h2>");
    _builder.newLine();
    _builder.append("<p>The declaration hover now includes the annotations.</p>");
    _builder.newLine();
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/2_6_0_annotations_in_hover.png\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</section><section id=\"new_ide_features\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<h2>Gradle Plug-in</h2>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<p>A gradle plug-in for easy integration of the Xtend compiler in any gradle based Java projects is now available.");
    _builder.newLine();
    _builder.append("The gradle plug-in even also works with the new Android buildsystem developed by Google. <br/>");
    _builder.newLine();
    _builder.append("The gradle plug-in is hosted <a href=\"https://github.com/oehme/xtend-gradle-plugin\">at github</a>. </p>");
    _builder.newLine();
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("buildscript {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("repositories {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mavenCentral()");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("dependencies {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("classpath \'org.xtend:xtend-gradle-plugin:0.0.8\'");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("apply plugin: \'xtend\'");
    _builder.newLine();
    _builder.append("repositories {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mavenCentral()");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("dependencies {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("//or testCompile if you only want to use Xtend for some tests");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("compile \'org.eclipse.xtend:org.eclipse.xtend.lib:2.6.0\'");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("</section><section id=\"new_ide_features\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("<h2>Treeshaken Lib for Android</h2>");
    _builder.newLine();
    _builder.append("<p>For large Android projects there is a need to have as little code packaged as possible. ");
    _builder.newLine();
    _builder.append("Usually this is achieved by proguarding cour code and the dependencies during the build. ");
    _builder.newLine();
    _builder.append("For people who find that tedious and want to work with a reduced lib from the get go, we offer a treeshaken version of the library, which is only 300k small.</p>");
    _builder.newLine();
    _builder.append("<p>The library can be <a href=\"http://search.maven.org/#search%7Cga%7C1%7Corg.eclipse.xtext.xbase.lib.slim\">downloaded from maven central</a>.</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<div class=\"inner\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"container clearfix\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>Xtend 2.5.0 Release Notes (Dec 11th, 2013)</h2>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<hr>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"span1\">&nbsp;</div>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<div class=\"span9\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("With over <a href=\"http://goo.gl/7zorrn\">100 bugfixes</a> Version 2.5.0 is mainly a bugfix and");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("performance release. The team has been working on ironing out any glitches in the user experience");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("and further improving a fluent workflow with the language and the tools.");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<section id=\"annotations_2_5\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h2>Full support for Java 7 Annotations</h2>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("The Xtend compiler now supports all annotation values and constant expressions in annotations.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("These annotation can be evaluated during compilation within active annotations. Also all values");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("supported in Java can now be set during annotation processing.");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("annotation Columns {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Column[] value = #[ @Column(\'id\') ]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("annotation Column {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("String value");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("int length = 2 << 16");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("class Entity {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("@Columns(#[@Column(\'id\'), @Column(value = \'timestamp\', length = 2 * 3 * 7)])");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("CompositeKey key");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<section id=\"compiler_checks_2_5\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h2>Improved compiler checks</h2>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("The Xtend compiler now detects ambiguously overloaded methods.");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h3 id=\"ambiguous_methods\">Method overload validation</h3>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Ambiguous method invocations are checked and reported with a detailled message.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("The compiler optionally detects valid but suspiciously overloaded methods");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("that could be implemented by accident. This is especially handy when property access and ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("extension methods come into play.");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("class A {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("def isCheck() {..}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("class B extends A {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("* Ambiguous feature call.");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("* The methods");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("*     getCheck() in B and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("*     isCheck() in A");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("* both match.");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("*/ ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.check");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("def getCheck() {..}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<em>Important note:</em>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("You have to make sure to use the library in version 2.5 along with the introduced compiler checks.");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h3 id=\"discouraged_variable_names\">Discouraged variable names</h3>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Some variable names are used implicitely by Xtend, for example the variable name \'self\'.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("The compiler optionally reports if these names were picked manually.");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<section id=\"language_enhancements_2_5\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h2>Small language enhancements</h2>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Some refinements have been made to the Xtend language semantics to improve the overall experience.");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h3 id=\"improved_auto_casts\">Auto casts</h3>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Xtend supported auto-casts right from the beginning with its powerful switch expression.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("In 2.5, the more familiar syntax with instance-of checks caught up and also applies automatic");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("casts in if expressions and while loops. ");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def m(CharSequence c) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (c instanceof String) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("c.substring(42)");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h3 id=\"switch_enum\">Switch over enums</h3>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("One of the few places where Xtend\'s syntax could be improved compared to Java, was a switch expression");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("over enumeration values. Now it\'s no longer necessary to use a qualified name or static imports for the enum values but");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("the literals are available automatically for the case guards. ");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def m(RetentionPolicy p) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("switch p {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("case CLASS: 1");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("case RUNTIME: 2");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("case SOURCE: 3");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre> ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<section id=\"template_expression_2_5\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h2>Customizable template expression</h2>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("The template expressions can now be semantically enhanced via target typing.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("One use case is code generation where imports are automatically added when concatenating a type");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("or if the appended object does not have a proper string representation. It is also possible");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("to pass an explicit line delimiter rather than using the platform default.");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def StringConcatenationClient m() \'");
    _builder.append("\'\'my template\'");
    _builder.append("\'\' // uses target type");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// caller code");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val result = new StringConcatenation(lineDelimiter) // custom line delimiter or subtype");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("result.append(m)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return result.toString()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<section id=\"primitive_types_2_5\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h2>Improved type inference with primitive values</h2>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("The local type inference has been improved when primitive types are involved. Their wrapper");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("types will be used in fewer cases which prevents unexpected exceptions at runtime.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("An optional compiler check can point to places where primitive defaults are used rather than");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("explicit values.");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<section id=\"mvn_android_2_5\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h2>Better experience with Maven and Android</h2>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("The Android archetype for Maven was improved. It");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("properly configures the compiler and debug settings, uses the latest Android libraries and the produced");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Eclipse project matches the structure that is created by the ADT wizards.");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"container clearfix\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>Xtend 2.4.3 Release Notes (Sep 04th, 2013)</h2>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<hr>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"span1\">&nbsp;</div>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<div class=\"span9\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("The team is proud to present a release with ");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("more than <a href=\"https://bugs.eclipse.org/bugs/buglist.cgi?o5=anywordssubstr&f1=OP&f0=OP&resolution=FIXED&classification=Modeling&classification=Tools&f4=CP&v5=kepler&query_format=advanced&j1=OR&f3=CP&bug_status=RESOLVED&bug_status=VERIFIED&f5=flagtypes.name&component=Backlog&component=Common&component=Core&component=Releng&component=Website&component=Xtext&component=Xtext%20Backlog&product=TMF&product=Xtend&list_id=4768360\">450 bug fixes</a> and features.");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h2>Table of contents</h2>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<li><a href=\"#android_development\">Android Support</a>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                      ");
    _builder.append("<li><a href=\"#android_debugging\">Debugging</a>");
    _builder.newLine();
    _builder.append("                      ");
    _builder.append("<li><a href=\"#android_maven\">Maven Archetype</a>");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<li><a href=\"#new_language_features\">New Language Features</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#streamlined\">Streamlined Syntax Changes</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#active_annotations\">Active Annotations</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#collection_literals\">Collection Literals and Array Access</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#extension_provider\">Extension Providers</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#interfaces_enums_annotations\">Interfaces, Enumerations and Annotations</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#sam_types\">SAM Type Conversion</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#new_operators\">New Operators</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</li>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<li><a href=\"#new_ide_features\">New Editor Features</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#organize_imports\">Organize Imports</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#extract_method\">Extract Method and Extract Local Variable</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#suppression_followup\">Supression of Follow-Up Errors</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#optional_errors\">Optional Errors and Warnings</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#quickfixes\">New Quickfixes</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#content_assist\">Improved Content Assist</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#formatter\">Code Formatter</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#javadoc\">JavaDoc</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<li><a href=\"#copy_qualifiedname\">Copy Qualified Name</a>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</li>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<section id=\"android_development\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h2>Android Support</h2>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<p>Xtend is a great choice for Android application development because it compiles to Java source code ");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("and doesn\'t require a fat runtime library. With version 2.4 the Android support has been ");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("further improved.");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h3 id=\"android_debugging\">Debugging</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Debugging Android applications works now. Previously Xtend supported debugging through JSR-45 only, which is not supported by the ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Dalvik VM. Now you can configure the compiler to install the debug information in a Dalvik-compatible manner.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("<h3 id=\"android_maven\">Maven Archetype</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("There is also a Maven archetype to set up a working Android project easily. If you ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("have installed Maven and the Android SDK you only need the following command to ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("get started:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mvn archetype:generate -DarchetypeGroupId=org.eclipse.xtend \\");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("-DarchetypeArtifactId=xtend-android-archetype \\");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("-DarchetypeCatalog=http://repo.maven.apache.org/maven2");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<section id=\"new_language_features\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h2>New Language Features</h2>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("The following new features have been added to the Xtend language.");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h3 id=\"streamlined\" >Streamlined Java syntax</h3>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("In 2.4.2 we have introduced new (more Java-like) ways to access nested classes and static members. Also ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("type literals can be written by just using the class name.");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Here is an example for a static access of the generated methods in Android\'s ubiquitous R class:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("R.id.edit_message ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// previously it was (still supported) :");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("R$id::edit_message");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre> ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Type literals can now be written even shorter. Let\'s say you want to filter a list by type:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("myList.filter(MyType) ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// where previously you had to write (still supported) :");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("myList.filter(typeof(MyType)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre> ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("If you use the Java syntax (e.g. <i>MyType.class</i>), you\'ll get an error marker pointing you to the right syntax.");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h3 id=\"active_annotations\" >Active Annotations (Provisional API)</h3>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<em>Active Annotations</em> let developers particpate in the translation process");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("from Xtend code to Java source code. The developer declares an annotation and a call back for the compiler where ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("the generated Java code can be customized arbitrarily. This doesn\'t break static typing ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("or the IDE! Any changes made in an active annotation are completely reflected by the environment.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("          ");
    _builder.append("A simple example would be a JavaBeans ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("property supporting the Observer pattern. Here you need a getter and a ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("setter method for each field and also an observer list and the proper code to notify ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("them about changes. In many software systems you have hundreds of these properties. ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("Active Annotation allow you to define and automate the implementation of such patterns ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("and idioms at a single point and ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("let the compiler expand it on the fly. And all this based on lightweight, custom libraries. ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("You do no longer have to write nor ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("read the boiler plate code anymore. <a href=\"documentation.html#activeAnnotations\">Read more...</a>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h3 id=\"collection_literals\">Collection Literals and Arrays</h3>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Xtend now has literals for unmodifiable collections.");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val listOfWords = #[\"Hello\", \"Xtend\"]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val setOfWords  = #{\"Hello\", \"Xtend\"}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val mapOfWords  = #{1->\"Hello\", 2->\"Xtend\"}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre> ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("Collections created with a literal are immutable. The list literal can be used to natively create arrays, too. ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("If the target type is an array, it will compile to an array initializer.");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val String[] arrayOfWords = #[\"Hello\", \"Xtend\"]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre> ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("In addition to literals for arrays you can now also easily access and modify arrays ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("as well as create empty arrays of any size.");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val String[] arrayOfWords = newArrayOfSize(2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("arrayOfWords.set(0, \'Hello\')");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("arrayOfWords.set(1, \'Xtend\')");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre> ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<h3 id=\"interfaces_enums_annotations\">Interfaces, Enums and Annotations</h3>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("Interfaces, enumerations and annotation types can now be declared directly in Xtend. ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("interface Container<T> {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("def T findChild((T)=>boolean matcher)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("enum Color {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RED, GREEN, BLUE");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Retention(RetentionPolicy::RUNTIME)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Target(ElementType::TYPE)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("annotation DependsOn {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Class&lt;? extends Target&gt; value");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("val version = \"2.4.0\" // type \'String\' inferred ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<h3 id=\"extension_provider\">Extension Provider</h3>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("Extension methods allow to add new methods to existing types without modifying them. ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("Consider the omnipresent class <code class=\"prettyprint lang-java\">java.lang.String</code>.");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("If you have to parse a string to a number, you could always write");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-java linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Integer::parseInt(\'42\')");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>but what you actually think of is</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\'42\'.parseInt");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>To make that possible, you simply import the class <code class=\"prettyprint lang-java\">Integer</code> as a static extension:</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("import static extension java.lang.Integer.*");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>This enables to pass the base of the number as an argument, too:</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\'2A\'.parseInt(16)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("Extension methods are available in other language such as C# as well, but Xtend can do better.");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("The new <em>Extensions Providers</em> render a former limitiation obsolete: In Xtend 2.4, fields, ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("parameters and local variables can provide extensions, too. <a href=\"documentation.html#Extension_Provider\">Read more...</a>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<br><br>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<h3 id=\"sam_types\">SAM Type Conversion</h3>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("Lambda expressions now work with interfaces and classes with a single abstract method ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("(SAM types). For example, the <code class=\"prettyprint lang-java\">AbstractIterator</code> ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("from the Guava library has a single abstract method ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<code class=\"prettyprint lang-java\">computeNext()</code>. A lambda can be used to implement that:");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val AbstractIterator&lt;Double&gt; infiniteRandomNumbers = [| Math::random]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<h3 id=\"new_operators\">New Operators</h3>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("Some new operators have been added. In addition to the usual <code>==</code> and <code>!=</code>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("operators which map to <code>Object.equals(Object)</code>, the operators <code>===</code> and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<code>!==</code> respectively can be used to test for identity equality.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (myObject === otherObject) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("println(\"same objects\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Also new exclusive range operators have been introduced. In order to iterate over a list and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("work with the index you can write:</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for (idx : 0 ..&lt; list.size) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("println(\"(\"+idx+\") \"+list.get(idx))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Or if you want to iterate backwards :</p>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<pre class=\"prettyprint lang-xtend linenums\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for (idx : list.size &gt;.. 0) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("println(\"(\"+idx+\") \"+list.get(idx))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</pre>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<section id=\"new_ide_features\" style=\"padding-top: 68px; margin-top: -68px;\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<h2>New IDE Features</h2>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<p>Being an Eclipse project Xtend has always been designed with IDE integration in ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mind. The team is proud to announce that the editing support is now almost on par with ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Java\'s and in some aspects already even better. A user recently wrote in the newsgroup:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<blockquote>");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("Tooling for Xtend is unlike any other language for the JVM after Java. The IDE support ");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("is first class. It will take years for some languages to catch up. Some never will.");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("</blockquote>");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("The following new IDE features improve the editing experience significantly:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<dl>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h3 id=\"organize_imports\">Organize Imports</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("With the new release we have overhauled the <em>Organize imports</em> action. It ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("processes all kinds of imports, asks to resolve conflicts, and shortens qualified names");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("automatically.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/organize_imports.png\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h3 id=\"extract_method\">Extract Method and Extract Local Variable</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("New refactorings have been added. You can now extract code into a new local variable");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/extract_local_variable.png\"/>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("or into a new method.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/extract_method_refactoring.png\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h3 id=\"suppression_followup\">Supression of Follow-Up Errors</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Follow-up error markers are now suppressed and errors in general are much more local, ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("so it is very easy to spot the problem immediately.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/follow_up_errors.png\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h3 id=\"optional_errors\">Optional Errors and Warnings</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>The severity of optional compiler errors can be configured globally as well as ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("individually for a single project. They can either be set explicitly or delegate to the equivalent");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("setting of the Java compiler.</p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/issue_severities.png\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h3 id=\"quickfixes\">More Quickfixes</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Xtend now offers to create missing fields, methods, and types through quick fix proposals.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/quickfixes.png\"/> ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h3 id=\"content_assist\">Improved Content Assist</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("The content assist has become much smarter. It now proposes lambda brackets if the method ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("accepts a single function and it offers hints on the parameter types when you ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("are working with overloaded methods.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/content_assist.png\"/>");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h3 id=\"formatter\">Formatter</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("A configurable formatter which pretty prints and indents code idiomatically is now available.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/formatter.png\"/>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/formatter_preferences.png\"/>");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h3 id=\"javadoc\">JavaDoc</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("An Xtend editor now has validation and content assist within JavaDoc comments.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/javadoc_content_assist.png\"/>");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<h3 id=\"copy_qualifiedname\">Copy Qualified Name</h3>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("You can use <em>Copy Qualified Name</em> in the editor and the outline view to copy the name");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("of types, fields and methods into the clipboard.");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<img class=\"image_between_p\" src=\"images/releasenotes/copy_qualified_name.png\"/>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</dl>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</div>  ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<div class=\"span1\">&nbsp;</div>  ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
}
