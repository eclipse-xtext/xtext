def runtimeSuites = ['xtext', 'xtend'].collect{it + '-runtime-tests'}
def ideSuites = ['xtext', 'xtend'].collect{it + '-ide-tests'}
def java8Suites= ['xtend-runtime-tests-java8']
def intellijSuites = ['intellij-tests','intellij-eap-tests']
// TODO for smaller server: def intellijSuites = ['intellij-tests']
def onPushSuites = runtimeSuites + ideSuites + intellijSuites + java8Suites

def slowSuites = ['xtext', 'xtend'].collect{it + '-slow-tests'}
def smokeSuites = ['smoke-tests']
def generatorSuites = ['generator-tests']
def allSuites = onPushSuites + slowSuites + smokeSuites + generatorSuites
// TODO for smaller server: def allSuites = onPushSuites 


def testScripts = allSuites.collectEntries{suite -> [(suite): project.file("scripts/${suite}.txt").text]}

def gradleBuilds = ['web-deploy']

branches.each { branch ->
	def testJobs = [allSuites, branch.platforms.keySet()]
		.combinations{ suite, platformName ->
			def platform = branch.platforms[platformName]
			new TestJob(branch: branch.name, branchDisplayName: branch.displayName, suite: suite, platformName: platformName, target: platform.target, jdk: platform.jdk, buildSystem: 'buckminster')
		}
		.findAll {
			(!(smokeSuites + java8Suites).contains(it.suite) || it.platformName == 'latest') &&
			(!intellijSuites.contains(it.suite) || (it.branch == 'master' && it.platformName == 'latest'))
		}
		.each {
			if(java8Suites.contains(it.suite)) {
				it.jdk = jdks['1.8']
			}
			if(intellijSuites.contains(it.suite)) {
				it.buildSystem = 'gradle'
			}
		}

	jenkins {

		jobs.create("xtext-${branch.displayName}").definition {
			xml templates.push.override { config ->
				config.scm.branches.'hudson.plugins.git.BranchSpec'.name = branch.name
				config.description = "This job was generated"
				config.builders.'hudson.plugins.copyartifact.CopyArtifact'[0]
					.project = "target-platforms-${branch.displayName}"
				config.publishers.'hudson.plugins.parameterizedtrigger.BuildTrigger'.configs
					.'hudson.plugins.parameterizedtrigger.BuildTriggerConfig'
					.projects	= testJobs.findAll{onPushSuites.contains(it.suite)}.collect{it.name}.join(',')
				}
		}

		gradleBuilds.each { job ->
			jobs.create("xtext-web-${branch.displayName}").definition {
				xml templates.gradleBuild.override { config ->
					config.scm.branches.'hudson.plugins.git.BranchSpec'.name = branch.name
					config.scm.userRemoteConfigs
						.'hudson.plugins.git.UserRemoteConfig'
						.refspec = "+refs/heads/${branch.name}:refs/remotes/origin/${branch.name}"
			
					config.description = "This job was generated"
					applyGradleConfiguration(config, job)
				}
			}
		}

		jobs.create("target-platforms-${branch.displayName}").definition {
			xml templates.targetPlatforms.override { config ->
				config.scm.branches.'hudson.plugins.git.BranchSpec'.name = branch.name
				config.description = "This job was generated"
				def shellCmd = '''rm -f ${WORKSPACE}/*.b3agg*
				b3home=$JENKINS_HOME/tools/b3-headless
				b3FilesDir=${WORKSPACE}/git-repo/releng/org.eclipse.xtext.releng/releng/mirroring
				'''.stripIndent()

				def platforms = ['Helios', 'Indigo', 'Juno', 'Kepler', 'Luna', 'Mars', 'Latest']
				// TODO for smaller server:  def platforms = ['Juno', 'Mars', 'Latest']
								
				platforms.each {
					shellCmd = shellCmd + '${b3home}/b3 aggregate --buildModel ${b3FilesDir}/'+it+'.b3aggr --action ${B3_ACTION}\n'
				}

				shellCmd = shellCmd + 'rm -rf ' + platforms.join(' ') + '\nmv $b3FilesDir/* .'

				config.builders.'hudson.tasks.Shell'.command = shellCmd
				config.publishers.'hudson.tasks.Fingerprinter'.targets = platforms.collect { it+'/final/*'}.join(',')

				config.publishers.'hudson.plugins.parameterizedtrigger.BuildTrigger'.configs
					.'hudson.plugins.parameterizedtrigger.BuildTriggerConfig'
					.projects	= testJobs.findAll{slowSuites.contains(it.suite) || generatorSuites.contains(it.suite)}.collect{it.name}.join(',')
				}
		}

		testJobs.each { job ->
			jobs.create(job.name).definition {
				def template = templates["${job.buildSystem}StyleTest"]
				xml template.override { config ->
					config.properties.'hudson.model.ParametersDefinitionProperty'
						.parameterDefinitions.'hudson.model.ChoiceParameterDefinition'
						.choices.a.string = job.target
					config.scm.branches.'hudson.plugins.git.BranchSpec'[1].name = job.branch
					config.description = "This job was generated"
					config.jdk = job.jdk

					def trigger = config.triggers.'org.jenkinsci.plugins.ghprb.GhprbTrigger'
					trigger.triggerPhrase = "Jenkins ${job.name}"
					trigger.commitStatusContext = "Jenkins/${job.name}"
					trigger.project = job.name
					if ((slowSuites + ideSuites + generatorSuites).contains(job.suite)
						|| job.suite == 'xtext-runtime-tests' // FIXME these currently contain ui tests
						) {
						config.buildWrappers.appendNode {
							'hudson.plugins.xvnc.Xvnc'('plugin' : 'xvnc@1.21') {
								takeScreenshot(false)
								useXauthority(true)
							}
						}
					}
					if (slowSuites.contains(job.suite)) {
						config.buildWrappers.'hudson.plugins.build__timeout.BuildTimeoutWrapper'
							.strategy.timeoutMinutes = 180
					}

					if (smokeSuites.contains(job.suite)) {
						config.triggers.appendNode {
							'hudson.triggers.TimerTrigger'() {
								spec("H 21 * * *")
							}
						}
						config.logRotator.daysToKeep = 20
						config.buildWrappers.'hudson.plugins.build__timeout.BuildTimeoutWrapper'
							.strategy.timeoutMinutes = 600
					}

					if (job.buildSystem == 'buckminster') {
						config.builders.'hudson.plugins.copyartifact.CopyArtifact'[0]
							.project = "xtext-${branch.displayName}"
						config.builders.'hudson.plugins.copyartifact.CopyArtifact'[1]
							.project = "target-platforms-${branch.displayName}"
						def builder = config.builders.'hudson.plugins.buckminster.EclipseBuckminsterBuilder'
						def params = '-Declipse.p2.mirrors=false\n-Dcheckout.location=${WORKSPACE}/git-repo/\n-Dxtext.checkout.location=${checkout.location}\n-Dxtext.p2.repository=${WORKSPACE}/repositories/xtext.p2.repository'
						if (job.jdk == jdks['1.8']) {
							params += '\n-DJAVA8=true'
							builder.installationName = 'buckminster-4.4'
						}
						if (generatorSuites.contains(job.suite)) {

							if(branch.name == 'master') {
								params += '\n-DECLIPSE.TARGET.ALIAS=Stable\n-DWITH.MWE2=true\n-DEV.BUILD=false\n-Dforce.javadoc=false\n-Dantlr_gen.p2.repository=http://download.itemis.de/updates/nightly\n-Demf.target.platform=http://download.eclipse.org/modeling/emf/emf/updates/nightly/'
							} else {
								params += '\n-DECLIPSE.TARGET.ALIAS=Stable\n-DWITH.MWE2=true\n-DEV.BUILD=false\n-Dforce.javadoc=false\n-Dantlr_gen.p2.repository=http://download.itemis.de/updates/nightly\n-Demf.target.platform=http://download.eclipse.org/modeling/emf/emf/updates/2.10.x/'
							}
							builder.installationName = 'buckminster-mwe2-headless'
						}
						builder.commands = testScripts[job.suite]
						builder.params = params
					}

					if (job.buildSystem == 'gradle') {
						applyGradleConfiguration(config, job.suite)
					}
				}
			}
		}
	}
}

def applyGradleConfiguration(config, scriptName) {
	def props = new Properties()
	props.load(new FileInputStream(project.file("scripts/${scriptName}.txt")))

	def builder = config.builders.'hudson.plugins.gradle.Gradle'
	props.each { prop ->
		builder.'*'.find { node-> node.name() == prop.key}.replaceBody(prop.value)
	}
}

@groovy.transform.Canonical
class TestJob {
	String suite
	String platformName
	String target
	String jdk
	String branch
	String branchDisplayName
	String buildSystem

	def getName() {
		suite + "-" + branchDisplayName + "-" + platformName
	}
}
