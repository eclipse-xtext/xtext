/*******************************************************************************
 * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
module org.eclipse.xtext.idea.example.entities.GenerateEntities

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var baseName = "org.eclipse.xtext.idea.example.entities"

Workflow {
    
    component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				rootPath = rootPath
				baseName = baseName
				genericIde = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				ideaPlugin = {
					enabled = true
				}
			}
			code = {
				encoding = "ISO-8859-1"
				fileHeader = 
"/*******************************************************************************
 * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/"
			}
		}
    	language = {
    		grammarUri = "classpath:/org/eclipse/xtext/idea/example/entities/Entities.xtext"
    		fileExtensions = "entities"
    		referencedResource = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
    
    		// Java API to access grammar elements (required by several other fragments)
    		fragment = grammarAccess.GrammarAccessFragment2 {}
    
    		// generates Java API for the generated EPackages
    		fragment = ecore.EMFGeneratorFragment2 {}
    
    		// serializer 2.0
    		fragment = serializer.SerializerFragment2 {
    			generateStub = false
    		}
    
    		// a custom ResourceFactory for use with EMF
    		fragment = resourceFactory.ResourceFactoryFragment2 {}
    
    		// The antlr parser generator fragment.
    		fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
    		}
    
    		// Xtend-based API for validation
    		fragment = validation.ValidatorFragment2 {
    		}
    
    		// scoping and exporting API
    		fragment = scoping.ImportNamespacesScopingFragment2 {}
    		fragment = exporting.QualifiedNamesFragment2 {}
    		fragment = builder.BuilderIntegrationFragment2 {}
    
    		// generator API
    		fragment = generator.GeneratorFragment2 {}
    
    		// formatter API
    		fragment = formatting.Formatter2Fragment2 {}
    
    		// labeling API
    		fragment = ui.labeling.LabelProviderFragment2 {}
    
    		// outline API
    		fragment = ui.outline.OutlineTreeProviderFragment2 {}
    		fragment = ui.outline.QuickOutlineFragment2 {}
    
    		// quickfix API
    		fragment = ui.quickfix.QuickfixProviderFragment2 {}
    
    		// content assist API
    		fragment = ui.contentAssist.ContentAssistFragment2 {}
    
    		// generates junit test support classes into Generator#pathTestProject
    		fragment = junit.Junit4Fragment2 {}
    
    		// rename refactoring
    		fragment = ui.refactoring.RefactorElementNameFragment2 {}
    
    		// provides the necessary bindings for java types integration
    		fragment = types.TypesGeneratorFragment2 {}
    
    		// generates the required bindings only if the grammar inherits from Xbase
    		fragment = xbase.XbaseGeneratorFragment2 {}
    		
    		// generates the required bindings only if the grammar inherits from Xtype
    		fragment = xbase.XtypeGeneratorFragment2 {}
    
    		// provides a preference page for template proposals
    		fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
    
    		// provides a compare view
    		fragment = ui.compare.CompareFragment2 {}
	        
	        fragment = idea.parser.antlr.XtextAntlrIDEAGeneratorFragment {}
    		
    		fragment = idea.IdeaPluginGenerator {}
    	}
    }
}

