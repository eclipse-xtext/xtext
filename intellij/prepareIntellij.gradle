allprojects {
  ext.intellijHome = file("${rootDir}/intellij-ce")
  def osName = System.getProperty('os.name')
  ext.isWindows = osName.startsWith('Win')
  ext.isMac = osName.startsWith('Mac')
  ext.isUnix = osName.startsWith('Linux')
  if (isWindows || isUnix) {
    ext.intellijLibs = file("${intellijHome}/lib")
  } else if (isMac) {
    ext.intellijLibs = file("${intellijHome}/IntelliJ IDEA 14 CE EAP.app/Contents/lib")
  }
}
def archiveBaseName = 'ideaIC-138.SNAPSHOT'
def archiveName
if (isWindows) {
  archiveName = '${archiveBaseName}.win.zip'
} else if (isMac) {
  archiveName = '${archiveBaseName}.mac.zip'
} else if (isUnix) {
  archiveName = '${archiveBaseName}.tar.gz'
}

task downloadIntellij {
  onlyIf {!file("${intellijHome}/${archiveName}").exists()}
  doLast {
    intellijHome.mkdirs()
    ant.get(src:"https://teamcity.jetbrains.com/repository/download/bt410/153679:id/${archiveName}?guest", dest: intellijHome)
    ant.get(src:'https://teamcity.jetbrains.com/repository/download/bt410/153679:id/sources.zip?guest', dest: intellijHome)
  }
}

task unpackIntellij(type: Copy, dependsOn: downloadIntellij) {
	if (isUnix) {
	  from tarTree("${intellijHome}/${archiveName}")
		into(intellijHome) {
			eachFile {file ->
				def targetPath = (file.path - "${archiveBaseName}/")
				file.path = targetPath
			}
		}
	} else {
	  from zipTree("${intellijHome}/${archiveName}")	
		into intellijHome
	}
}

task prepareIntellij(dependsOn: [unpackIntellij, ':intellij-dependencies:eclipseClasspath'])

task cleanTestSystem(type: Delete) {
  delete "${intellijHome}/test-system"
}

task cleanIntellij(type: Delete) {
  delete intellijHome
}