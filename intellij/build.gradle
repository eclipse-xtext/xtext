import java.nio.file.Files

apply from: 'prepareIntellij.gradle'

allprojects {
	apply plugin: 'base'
	apply plugin: 'maven'
	group = 'org.eclipse.xtext'
	version = '2.8.0-SNAPSHOT'
	
	repositories {
		if (!System.getProperty("JOB_NAME")) {
			mavenLocal()
		}
		mavenCentral()
		maven {
			url "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
}

configure(subprojects.findAll{p->p.name !='intellij-dependencies'}) {
	apply plugin: 'java'
	
	configurations {
		provided
	}
	
	sourceSets.main.compileClasspath += configurations.provided
	
	dependencies {
		provided project(':intellij-dependencies')
		provided "org.eclipse.xtext:org.eclipse.xtext.xtext:${version}"
		provided "org.eclipse.xtext:org.eclipse.xtext.xbase:${version}"
		provided "org.eclipse.xtext:org.eclipse.xtext.ide:${version}"
		provided "org.eclipse.xtend:org.eclipse.xtend.lib:${version}"
	}
	
	sourceSets {
		main {
			java.srcDirs = ['src', 'xtend-gen', 'src-gen']
			resources {
				srcDirs = ['src', 'src-gen']
				exclude '**/*.xtend'
				exclude '**/*.xtext'
				exclude '**/*.mwe2'
			}
		}
	}
	
	jar {
		metaInf {
			from('META-INF')
		}
	}
	
	sourceCompatibility = 1.5
}

def intellijPluginProjects = [
	project(':org.eclipse.xtext.idea'),
	project(':org.eclipse.xtext.xtext.idea'),
	project(':org.eclipse.xtext.xbase.idea'),
	project(':org.eclipse.xtext.idea.sdomain.idea'),
	project(':org.eclipse.xtext.idea.example.entities.idea'),
	project(':org.eclipse.xtend.idea')
]
configure(intellijPluginProjects) {

	configurations.compile {
		exclude module:'guava'
		exclude module:'cglib'
		exclude module:'log4j'
		exclude module:'icu4j'
		exclude group:'org.ow2.asm'
	}
	
	task assembleLibFolder(type: Copy) {
		from configurations.runtime.allArtifacts.files
		from configurations.runtime
		into 'lib'
	}
	
	assemble.dependsOn(assembleLibFolder)

	task zip(dependsOn: jar, type: Zip) {
		from configurations.runtime.allArtifacts.files
		from configurations.runtime
		into(project.name + '-' + project.version + '/lib')
	}
}

//TODO generate this automatically
task createIntellijRepository(type: Copy) {
	from "updatePlugins.xml"
	from intellijPluginProjects*.zip
	into "$rootDir/build/intellijRepository"
}

def intellijPluginAndTestProjects = intellijPluginProjects + project(':org.eclipse.xtext.idea.common.types.tests')

configure(intellijPluginAndTestProjects) {
	ext.sandboxDirName = 'sandbox'
	ext.sandboxDir = file(sandboxDirName)
	ext.sandboxPluginsDir = file("${sandboxDir}/plugins")
	ext.sandboxPluginDir = file("${sandboxPluginsDir}/${project.name}")
	
	task createSandbox {
		onlyIf {!sandboxDir.exists()}
		doLast {
			sandboxPluginDir.mkdirs()

			Files.createSymbolicLink(file("${sandboxPluginDir}/classes").toPath(), project.file('bin').toPath())
			Files.createSymbolicLink(file("${sandboxPluginDir}/META-INF").toPath(), file("META-INF").toPath())
			
			File pluginLibDir = file("${sandboxPluginDir}/lib")
			pluginLibDir.mkdirs();

			configurations.runtime.allDependencies.withType(ExternalDependency) { dependency ->
				copy {
					from configurations.runtime.fileCollection(dependency)
					into pluginLibDir
				}
			}

			configurations.runtime.allDependencies.withType(ProjectDependency) {
				Files.createSymbolicLink(file("${pluginLibDir}/${it.dependencyProject.name}").toPath(), it.dependencyProject.file('bin').toPath())
			}

			configurations.provided.allDependencies.withType(ProjectDependency).findAll{intellijPluginProjects.contains(it.dependencyProject)}.each {
				Files.createSymbolicLink(file("${sandboxPluginsDir}/${it.dependencyProject.name}").toPath(), it.dependencyProject.sandboxPluginDir.toPath())
			}
		}
	}

	task cleanSandbox {
		onlyIf {sandboxDir.exists()}
		doLast {
			ant.delete(includeEmptyDirs: true, removeNotFollowedSymlinks: true, verbose: true) {
				fileset(dir: sandboxDir, followSymlinks: false, defaultExcludes: "no")
			}
			delete sandboxDir
		}
	}

	task updateSandbox(dependsOn: [cleanSandbox, createSandbox])
}

// Stub tasks for intellij project
task createSandbox {}
task cleanSandbox {}
task updateSandbox {}
