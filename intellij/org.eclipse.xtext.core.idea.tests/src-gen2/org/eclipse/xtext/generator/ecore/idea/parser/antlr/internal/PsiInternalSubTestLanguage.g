/*
 * generated by Xtext
 */
grammar PsiInternalSubTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.generator.ecore.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.generator.ecore.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.generator.ecore.idea.lang.SubTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.generator.ecore.services.SubTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected SubTestLanguageGrammarAccess grammarAccess;

	protected SubTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalSubTestLanguageParser(PsiBuilder builder, TokenStream input, SubTestLanguageElementTypeProvider elementTypeProvider, SubTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
		this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "SubMain";
	}

}

//Entry rule entryRuleSubMain
entryRuleSubMain returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSubMainElementType()); }
	iv_ruleSubMain=ruleSubMain
	{ $current=$iv_ruleSubMain.current; }
	EOF;

// Rule SubMain
ruleSubMain returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getSubMain_LeftCurlyBracketKeyword_0ElementType());
		}
		otherlv_0='{'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getSubMain_SuperMainsSuperMainParserRuleCall_1_0ElementType());
				}
				lv_superMains_1_0=ruleSuperMain
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getSubMain_RightCurlyBracketKeyword_2ElementType());
		}
		otherlv_2='}'
		{
			doneLeaf(otherlv_2);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getSubMain_AnotherAnotherSuperMainParserRuleCall_3_0ElementType());
				}
				lv_another_3_0=ruleAnotherSuperMain
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)?
	)
;

//Entry rule entryRuleAnotherSuperMain
entryRuleAnotherSuperMain returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAnotherSuperMainElementType()); }
	iv_ruleAnotherSuperMain=ruleAnotherSuperMain
	{ $current=$iv_ruleAnotherSuperMain.current; }
	EOF;

// Rule AnotherSuperMain
ruleAnotherSuperMain returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getAnotherSuperMain_UpsKeyword_0ElementType());
		}
		otherlv_0='ups'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getAnotherSuperMain_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
	)
;

//Entry rule entryRuleSuperMain
entryRuleSuperMain returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSuperMainElementType()); }
	iv_ruleSuperMain=ruleSuperMain
	{ $current=$iv_ruleSuperMain.current; }
	EOF;

// Rule SuperMain
ruleSuperMain returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getSuperMain_SuperKeyword_0ElementType());
		}
		otherlv_0='super'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getSuperMain_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
