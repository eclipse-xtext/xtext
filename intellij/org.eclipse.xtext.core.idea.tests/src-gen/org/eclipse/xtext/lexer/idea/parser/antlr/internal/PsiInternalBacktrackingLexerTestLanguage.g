/*
 * generated by Xtext
 */
grammar PsiInternalBacktrackingLexerTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
	backtrack=true;
	memoize=true;
}

@lexer::header {
package org.eclipse.xtext.lexer.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.lexer.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.lexer.idea.lang.BacktrackingLexerTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.lexer.services.BacktrackingLexerTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

	protected BacktrackingLexerTestLanguageGrammarAccess grammarAccess;

	protected BacktrackingLexerTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalBacktrackingLexerTestLanguageParser(PsiBuilder builder, TokenStream input, BacktrackingLexerTestLanguageElementTypeProvider elementTypeProvider, BacktrackingLexerTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getModel_EnumsEnumNameEnumRuleCall_0_0ElementType());
				}
				lv_enums_0_0=ruleEnumName
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		(
			(
				{
					markLeaf(elementTypeProvider.getModel_YcsYcTerminalRuleCall_1_0ElementType());
				}
				lv_ycs_1_0=RULE_YC
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_ycs_1_0);
				}
			)
		)*
		(
			(
				{
					markComposite(elementTypeProvider.getModel_AbsAbParserRuleCall_2_0ElementType());
				}
				lv_abs_2_0=ruleAb
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		(
			(
				{
					markComposite(elementTypeProvider.getModel_XbsXbParserRuleCall_3_0ElementType());
				}
				lv_xbs_3_0=ruleXb
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		(
			(
				{
					markLeaf(elementTypeProvider.getModel_YsCharYTerminalRuleCall_4_0ElementType());
				}
				lv_ys_4_0=RULE_CHARY
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_ys_4_0);
				}
			)
		)*
		(
			(
				{
					markLeaf(elementTypeProvider.getModel_AsCharATerminalRuleCall_5_0ElementType());
				}
				lv_as_5_0=RULE_CHARA
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_as_5_0);
				}
			)
		)*
	)
;

//Entry rule entryRuleAb
entryRuleAb returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAbElementType()); }
	iv_ruleAb=ruleAb
	{ $current=$iv_ruleAb.current; }
	EOF;

// Rule Ab
ruleAb returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getAb_XCharATerminalRuleCall_0_0ElementType());
				}
				lv_x_0_0=RULE_CHARA
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_x_0_0);
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getAb_YCharbTerminalRuleCall_1_0ElementType());
				}
				lv_y_1_0=RULE_CHARB
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_y_1_0);
				}
			)
		)
	)
;

//Entry rule entryRuleXb
entryRuleXb returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getXbElementType()); }
	iv_ruleXb=ruleXb
	{ $current=$iv_ruleXb.current; }
	EOF;

// Rule Xb
ruleXb returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getXb_XCharXTerminalRuleCall_0_0ElementType());
				}
				lv_x_0_0=RULE_CHARX
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_x_0_0);
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getXb_YCharbTerminalRuleCall_1_0ElementType());
				}
				lv_y_1_0=RULE_CHARB
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_y_1_0);
				}
			)
		)
	)
;

// Rule EnumName
ruleEnumName returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getEnumName_AbcEnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='Abc'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getEnumName_EfgEnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='Efg'
			{
				doneLeaf(enumLiteral_1);
			}
		)
	)
;

RULE_CHARA : 'A';

RULE_CHARB : 'b';

RULE_CHARX : 'X';

RULE_YC : RULE_CHARY RULE_CHARC;

RULE_CHARY : 'Y';

fragment RULE_CHARC : 'c';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;
