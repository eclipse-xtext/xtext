/*
 * generated by Xtext
 */
grammar PsiInternalIgnoreCaseLexerTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.lexer.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.lexer.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.lexer.idea.lang.IgnoreCaseLexerTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.lexer.services.IgnoreCaseLexerTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected IgnoreCaseLexerTestLanguageGrammarAccess grammarAccess;

	protected IgnoreCaseLexerTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalIgnoreCaseLexerTestLanguageParser(PsiBuilder builder, TokenStream input, IgnoreCaseLexerTestLanguageElementTypeProvider elementTypeProvider, IgnoreCaseLexerTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	EOF;

// Rule Model
ruleModel:
	(
		{
			markLeaf(elementTypeProvider.getModel_CaseKeyword_0ElementType());
		}
		otherlv_0='case'
		{
			doneLeaf(otherlv_0);
		}
		(
			{
				markLeaf(elementTypeProvider.getModel_FooKeyword_1ElementType());
			}
			otherlv_1='foo'
			{
				doneLeaf(otherlv_1);
			}
		)?
		(
			(
				{
					markLeaf(elementTypeProvider.getModel_ValueCaSeKeyword_2_0ElementType());
				}
				lv_value_2_0='CaSe'
				{
					doneLeaf(lv_value_2_0);
				}
			)
		)
	)
;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;
