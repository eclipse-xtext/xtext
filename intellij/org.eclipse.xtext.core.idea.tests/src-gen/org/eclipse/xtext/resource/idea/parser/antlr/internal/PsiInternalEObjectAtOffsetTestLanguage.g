/*
 * generated by Xtext
 */
grammar PsiInternalEObjectAtOffsetTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.resource.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.resource.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.resource.idea.lang.EObjectAtOffsetTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.resource.services.EObjectAtOffsetTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected EObjectAtOffsetTestLanguageGrammarAccess grammarAccess;

	protected EObjectAtOffsetTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalEObjectAtOffsetTestLanguageParser(PsiBuilder builder, TokenStream input, EObjectAtOffsetTestLanguageElementTypeProvider elementTypeProvider, EObjectAtOffsetTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getModel_FoosFooParserRuleCall_0_0ElementType());
				}
				lv_foos_0_0=ruleFoo
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		    |
		(
			(
				{
					markComposite(elementTypeProvider.getModel_BarsAbstractBarParserRuleCall_1_0ElementType());
				}
				lv_bars_1_0=ruleAbstractBar
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)*
;

//Entry rule entryRuleAbstractBar
entryRuleAbstractBar returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAbstractBarElementType()); }
	iv_ruleAbstractBar=ruleAbstractBar
	{ $current=$iv_ruleAbstractBar.current; }
	EOF;

// Rule AbstractBar
ruleAbstractBar returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getAbstractBar_ZonkKeyword_0ElementType());
			}
			otherlv_0='zonk'
			{
				doneLeaf(otherlv_0);
			}
		)?
		(
			{
				markLeaf(elementTypeProvider.getAbstractBar_INTTerminalRuleCall_1ElementType());
			}
			this_INT_1=RULE_INT
			{
				doneLeaf(this_INT_1);
			}
		)?
		{
			markComposite(elementTypeProvider.getAbstractBar_BarParserRuleCall_2ElementType());
		}
		this_Bar_2=ruleBar
		{
			$current = $this_Bar_2.current;
			doneComposite();
		}
		(
			(
				{
					precedeComposite(elementTypeProvider.getAbstractBar_FooBarBarAction_3_0ElementType());
					doneComposite();
					associateWithSemanticElement();
				}
			)
			{
				markLeaf(elementTypeProvider.getAbstractBar_FoobarKeyword_3_1ElementType());
			}
			otherlv_4='foobar'
			{
				doneLeaf(otherlv_4);
			}
			(
				(
					{
						if (!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						markComposite(elementTypeProvider.getAbstractBar_FooFooCrossReference_3_2_0ElementType());
					}
					ruleQualifiedNameWithOtherDelim
					{
						doneComposite();
					}
				)
			)
		)?
		(
			(
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					markComposite(elementTypeProvider.getAbstractBar_FooFooCrossReference_4_0ElementType());
				}
				ruleQualifiedNameWithOtherDelim
				{
					doneComposite();
				}
			)
		)?
	)
;

//Entry rule entryRuleBar
entryRuleBar returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getBarElementType()); }
	iv_ruleBar=ruleBar
	{ $current=$iv_ruleBar.current; }
	EOF;

// Rule Bar
ruleBar returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getBar_BarKeyword_0ElementType());
		}
		otherlv_0='bar'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getBar_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		(
			(
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					markComposite(elementTypeProvider.getBar_FooFooCrossReference_2_0ElementType());
				}
				ruleQualifiedNameWithOtherDelim
				{
					doneComposite();
				}
			)
		)
		(
			{
				markLeaf(elementTypeProvider.getBar_CommaKeyword_3_0ElementType());
			}
			otherlv_3=','
			{
				doneLeaf(otherlv_3);
			}
			(
				(
					{
						if (!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						markComposite(elementTypeProvider.getBar_FooFooCrossReference_3_1_0ElementType());
					}
					ruleQualifiedNameWithOtherDelim
					{
						doneComposite();
					}
				)
			)
		)*
	)
;

//Entry rule entryRuleFoo
entryRuleFoo returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getFooElementType()); }
	iv_ruleFoo=ruleFoo
	{ $current=$iv_ruleFoo.current; }
	EOF;

// Rule Foo
ruleFoo returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getFoo_FooKeyword_0ElementType());
		}
		otherlv_0='foo'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getFoo_NameQualifiedNameWithOtherDelimParserRuleCall_1_0ElementType());
				}
				lv_name_1_0=ruleQualifiedNameWithOtherDelim
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

//Entry rule entryRuleQualifiedNameWithOtherDelim
entryRuleQualifiedNameWithOtherDelim returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getQualifiedNameWithOtherDelimElementType()); }
	iv_ruleQualifiedNameWithOtherDelim=ruleQualifiedNameWithOtherDelim
	{ $current=$iv_ruleQualifiedNameWithOtherDelim.current; }
	EOF;

// Rule QualifiedNameWithOtherDelim
ruleQualifiedNameWithOtherDelim returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getQualifiedNameWithOtherDelim_QualifiedNameParserRuleCall_0ElementType());
		}
		ruleQualifiedName
		{
			doneComposite();
		}
		(
			{
				markLeaf(elementTypeProvider.getQualifiedNameWithOtherDelim_EqualsSignKeyword_1_0ElementType());
			}
			kw='='
			{
				doneLeaf(kw);
			}
			{
				markComposite(elementTypeProvider.getQualifiedNameWithOtherDelim_QualifiedNameParserRuleCall_1_1ElementType());
			}
			ruleQualifiedName
			{
				doneComposite();
			}
		)*
	)
;

//Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getQualifiedNameElementType()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current; }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getQualifiedName_IDTerminalRuleCall_0ElementType());
		}
		this_ID_0=RULE_ID
		{
			doneLeaf(this_ID_0);
		}
		(
			{
				markLeaf(elementTypeProvider.getQualifiedName_FullStopKeyword_1_0ElementType());
			}
			kw='.'
			{
				doneLeaf(kw);
			}
			{
				markLeaf(elementTypeProvider.getQualifiedName_IDTerminalRuleCall_1_1ElementType());
			}
			this_ID_2=RULE_ID
			{
				doneLeaf(this_ID_2);
			}
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
