/*
 * generated by Xtext
 */
grammar PsiInternalRegionAccessTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.formatting2.regionaccess.internal.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.formatting2.regionaccess.internal.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.formatting2.regionaccess.internal.idea.lang.RegionAccessTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.formatting2.regionaccess.internal.services.RegionAccessTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected RegionAccessTestLanguageGrammarAccess grammarAccess;

	protected RegionAccessTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalRegionAccessTestLanguageParser(PsiBuilder builder, TokenStream input, RegionAccessTestLanguageElementTypeProvider elementTypeProvider, RegionAccessTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Root";
	}

}

//Entry rule entryRuleRoot
entryRuleRoot:
	{ markComposite(elementTypeProvider.getRootElementType()); }
	ruleRoot
	EOF;

// Rule Root
ruleRoot:
	(
		{
			markLeaf(elementTypeProvider.getRoot_TestKeyword_0ElementType());
		}
		otherlv_0='test'
		{
			doneLeaf(otherlv_0);
		}
		(
			{
				markComposite(elementTypeProvider.getRoot_SimpleParserRuleCall_1_0ElementType());
			}
			ruleSimple
			{
				doneComposite();
			}
			    |
			{
				markComposite(elementTypeProvider.getRoot_DelegationParserRuleCall_1_1ElementType());
			}
			ruleDelegation
			{
				doneComposite();
			}
			    |
			{
				markComposite(elementTypeProvider.getRoot_UnassignedParserRuleCall_1_2ElementType());
			}
			ruleUnassigned
			{
				doneComposite();
			}
			    |
			{
				markComposite(elementTypeProvider.getRoot_PrefixedUnassignedParserRuleCall_1_3ElementType());
			}
			rulePrefixedUnassigned
			{
				doneComposite();
			}
		)
	)
;

//Entry rule entryRuleSimple
entryRuleSimple:
	{ markComposite(elementTypeProvider.getSimpleElementType()); }
	ruleSimple
	EOF;

// Rule Simple
ruleSimple:
	(
		{
			markLeaf(elementTypeProvider.getSimple_DigitOneKeyword_0ElementType());
		}
		otherlv_0='1'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getSimple_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
	)
;

//Entry rule entryRuleDelegation
entryRuleDelegation:
	{ markComposite(elementTypeProvider.getDelegationElementType()); }
	ruleDelegation
	EOF;

// Rule Delegation
ruleDelegation:
	(
		{
			markLeaf(elementTypeProvider.getDelegation_DigitTwoKeyword_0ElementType());
		}
		otherlv_0='2'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getDelegation_DelegateDelegateParserRuleCall_1_0ElementType());
				}
				lv_delegate_1_0=ruleDelegate
				{
					doneComposite();
				}
			)
		)
	)
;

//Entry rule entryRuleUnassigned
entryRuleUnassigned:
	{ markComposite(elementTypeProvider.getUnassignedElementType()); }
	ruleUnassigned
	EOF;

// Rule Unassigned
ruleUnassigned:
	(
		{
			markLeaf(elementTypeProvider.getUnassigned_DigitThreeKeyword_0ElementType());
		}
		otherlv_0='3'
		{
			doneLeaf(otherlv_0);
		}
		{
			markComposite(elementTypeProvider.getUnassigned_DelegateParserRuleCall_1ElementType());
		}
		ruleDelegate
		{
			doneComposite();
		}
	)
;

//Entry rule entryRulePrefixedUnassigned
entryRulePrefixedUnassigned:
	{ markComposite(elementTypeProvider.getPrefixedUnassignedElementType()); }
	rulePrefixedUnassigned
	EOF;

// Rule PrefixedUnassigned
rulePrefixedUnassigned:
	(
		{
			markLeaf(elementTypeProvider.getPrefixedUnassigned_DigitFourKeyword_0ElementType());
		}
		otherlv_0='4'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getPrefixedUnassigned_DelegatePrefixedDelegateParserRuleCall_1_0ElementType());
				}
				lv_delegate_1_0=rulePrefixedDelegate
				{
					doneComposite();
				}
			)
		)
	)
;

//Entry rule entryRulePrefixedDelegate
entryRulePrefixedDelegate:
	{ markComposite(elementTypeProvider.getPrefixedDelegateElementType()); }
	rulePrefixedDelegate
	EOF;

// Rule PrefixedDelegate
rulePrefixedDelegate:
	(
		{
			markLeaf(elementTypeProvider.getPrefixedDelegate_PrefixKeyword_0ElementType());
		}
		otherlv_0='prefix'
		{
			doneLeaf(otherlv_0);
		}
		{
			markComposite(elementTypeProvider.getPrefixedDelegate_DelegateParserRuleCall_1ElementType());
		}
		ruleDelegate
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleDelegate
entryRuleDelegate:
	{ markComposite(elementTypeProvider.getDelegateElementType()); }
	ruleDelegate
	EOF;

// Rule Delegate
ruleDelegate:
	(
		(
			{
				markLeaf(elementTypeProvider.getDelegate_NameIDTerminalRuleCall_0ElementType());
			}
			lv_name_0_0=RULE_ID
			{
				doneLeaf(lv_name_0_0);
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
