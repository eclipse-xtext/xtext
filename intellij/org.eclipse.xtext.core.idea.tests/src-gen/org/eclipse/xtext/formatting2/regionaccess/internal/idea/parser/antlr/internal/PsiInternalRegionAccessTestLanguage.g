/*
 * generated by Xtext
 */
grammar PsiInternalRegionAccessTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.formatting2.regionaccess.internal.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.formatting2.regionaccess.internal.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.formatting2.regionaccess.internal.idea.lang.RegionAccessTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.formatting2.regionaccess.internal.services.RegionAccessTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected RegionAccessTestLanguageGrammarAccess grammarAccess;

	protected RegionAccessTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalRegionAccessTestLanguageParser(PsiBuilder builder, TokenStream input, RegionAccessTestLanguageElementTypeProvider elementTypeProvider, RegionAccessTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Root";
	}

}

//Entry rule entryRuleRoot
entryRuleRoot returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRootElementType()); }
	iv_ruleRoot=ruleRoot
	{ $current=$iv_ruleRoot.current; }
	EOF;

// Rule Root
ruleRoot returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getRoot_SimpleParserRuleCall_0ElementType());
		}
		this_Simple_0=ruleSimple
		{
			$current = $this_Simple_0.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getRoot_DelegationParserRuleCall_1ElementType());
		}
		this_Delegation_1=ruleDelegation
		{
			$current = $this_Delegation_1.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getRoot_UnassignedParserRuleCall_2ElementType());
		}
		this_Unassigned_2=ruleUnassigned
		{
			$current = $this_Unassigned_2.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getRoot_PrefixedUnassignedParserRuleCall_3ElementType());
		}
		this_PrefixedUnassigned_3=rulePrefixedUnassigned
		{
			$current = $this_PrefixedUnassigned_3.current;
			doneComposite();
		}
		    |
		(
			{
				markLeaf(elementTypeProvider.getRoot_DigitFiveKeyword_4_0ElementType());
			}
			otherlv_4='5'
			{
				doneLeaf(otherlv_4);
			}
			{
				markComposite(elementTypeProvider.getRoot_ExpressionParserRuleCall_4_1ElementType());
			}
			this_Expression_5=ruleExpression
			{
				$current = $this_Expression_5.current;
				doneComposite();
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getRoot_DigitSixKeyword_5_0ElementType());
			}
			otherlv_6='6'
			{
				doneLeaf(otherlv_6);
			}
			{
				markComposite(elementTypeProvider.getRoot_MixedParserRuleCall_5_1ElementType());
			}
			this_Mixed_7=ruleMixed
			{
				$current = $this_Mixed_7.current;
				doneComposite();
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getRoot_DigitSevenKeyword_6_0ElementType());
			}
			otherlv_8='7'
			{
				doneLeaf(otherlv_8);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getRoot_MixedMixedParserRuleCall_6_1_0ElementType());
					}
					lv_mixed_9_0=ruleMixed
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)
	)
;

//Entry rule entryRuleSimple
entryRuleSimple returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSimpleElementType()); }
	iv_ruleSimple=ruleSimple
	{ $current=$iv_ruleSimple.current; }
	EOF;

// Rule Simple
ruleSimple returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getSimple_DigitOneKeyword_0ElementType());
		}
		otherlv_0='1'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getSimple_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
	)
;

//Entry rule entryRuleDelegation
entryRuleDelegation returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getDelegationElementType()); }
	iv_ruleDelegation=ruleDelegation
	{ $current=$iv_ruleDelegation.current; }
	EOF;

// Rule Delegation
ruleDelegation returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getDelegation_DigitTwoKeyword_0ElementType());
		}
		otherlv_0='2'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getDelegation_DelegateDelegateParserRuleCall_1_0ElementType());
				}
				lv_delegate_1_0=ruleDelegate
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

//Entry rule entryRuleUnassigned
entryRuleUnassigned returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getUnassignedElementType()); }
	iv_ruleUnassigned=ruleUnassigned
	{ $current=$iv_ruleUnassigned.current; }
	EOF;

// Rule Unassigned
ruleUnassigned returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getUnassigned_DigitThreeKeyword_0ElementType());
		}
		otherlv_0='3'
		{
			doneLeaf(otherlv_0);
		}
		{
			markComposite(elementTypeProvider.getUnassigned_DelegateParserRuleCall_1ElementType());
		}
		this_Delegate_1=ruleDelegate
		{
			$current = $this_Delegate_1.current;
			doneComposite();
		}
	)
;

//Entry rule entryRulePrefixedUnassigned
entryRulePrefixedUnassigned returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getPrefixedUnassignedElementType()); }
	iv_rulePrefixedUnassigned=rulePrefixedUnassigned
	{ $current=$iv_rulePrefixedUnassigned.current; }
	EOF;

// Rule PrefixedUnassigned
rulePrefixedUnassigned returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getPrefixedUnassigned_DigitFourKeyword_0ElementType());
		}
		otherlv_0='4'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getPrefixedUnassigned_DelegatePrefixedDelegateParserRuleCall_1_0ElementType());
				}
				lv_delegate_1_0=rulePrefixedDelegate
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

//Entry rule entryRulePrefixedDelegate
entryRulePrefixedDelegate returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getPrefixedDelegateElementType()); }
	iv_rulePrefixedDelegate=rulePrefixedDelegate
	{ $current=$iv_rulePrefixedDelegate.current; }
	EOF;

// Rule PrefixedDelegate
rulePrefixedDelegate returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getPrefixedDelegate_PrefixKeyword_0ElementType());
		}
		otherlv_0='prefix'
		{
			doneLeaf(otherlv_0);
		}
		{
			markComposite(elementTypeProvider.getPrefixedDelegate_DelegateParserRuleCall_1ElementType());
		}
		this_Delegate_1=ruleDelegate
		{
			$current = $this_Delegate_1.current;
			doneComposite();
		}
	)
;

//Entry rule entryRuleDelegate
entryRuleDelegate returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getDelegateElementType()); }
	iv_ruleDelegate=ruleDelegate
	{ $current=$iv_ruleDelegate.current; }
	EOF;

// Rule Delegate
ruleDelegate returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getDelegate_NameIDTerminalRuleCall_0ElementType());
			}
			lv_name_0_0=RULE_ID
			{
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
			{
				doneLeaf(lv_name_0_0);
			}
		)
	)
;

//Entry rule entryRuleExpression
entryRuleExpression returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getExpressionElementType()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getExpression_PrimaryParserRuleCall_0ElementType());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			doneComposite();
		}
		(
			(
				{
					precedeComposite(elementTypeProvider.getExpression_AddLeftAction_1_0ElementType());
					doneComposite();
					associateWithSemanticElement();
				}
			)
			{
				markLeaf(elementTypeProvider.getExpression_PlusSignKeyword_1_1ElementType());
			}
			otherlv_2='+'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getExpression_RightPrimaryParserRuleCall_1_2_0ElementType());
					}
					lv_right_3_0=rulePrimary
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)*
	)
;

//Entry rule entryRulePrimary
entryRulePrimary returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getPrimaryElementType()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [Boolean current=false]
:
	(
		(
			(
				{
					precedeComposite(elementTypeProvider.getPrimary_NamedAction_0_0ElementType());
					doneComposite();
					associateWithSemanticElement();
				}
			)
			(
				(
					{
						markLeaf(elementTypeProvider.getPrimary_NameIDTerminalRuleCall_0_1_0ElementType());
					}
					lv_name_1_0=RULE_ID
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_name_1_0);
					}
				)
			)
		)
		    |
		{
			markComposite(elementTypeProvider.getPrimary_ParenthesizedParserRuleCall_1ElementType());
		}
		this_Parenthesized_2=ruleParenthesized
		{
			$current = $this_Parenthesized_2.current;
			doneComposite();
		}
	)
;

//Entry rule entryRuleParenthesized
entryRuleParenthesized returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getParenthesizedElementType()); }
	iv_ruleParenthesized=ruleParenthesized
	{ $current=$iv_ruleParenthesized.current; }
	EOF;

// Rule Parenthesized
ruleParenthesized returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getParenthesized_LeftParenthesisKeyword_0ElementType());
		}
		otherlv_0='('
		{
			doneLeaf(otherlv_0);
		}
		{
			markComposite(elementTypeProvider.getParenthesized_ExpressionParserRuleCall_1ElementType());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			doneComposite();
		}
		{
			markLeaf(elementTypeProvider.getParenthesized_RightParenthesisKeyword_2ElementType());
		}
		otherlv_2=')'
		{
			doneLeaf(otherlv_2);
		}
	)
;

//Entry rule entryRuleMixed
entryRuleMixed returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getMixedElementType()); }
	iv_ruleMixed=ruleMixed
	{ $current=$iv_ruleMixed.current; }
	EOF;

// Rule Mixed
ruleMixed returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getMixed_LeftParenthesisKeyword_0ElementType());
		}
		otherlv_0='('
		{
			doneLeaf(otherlv_0);
		}
		(
			{
				markLeaf(elementTypeProvider.getMixed_UnassignedKeyword_1_0ElementType());
			}
			otherlv_1='unassigned'
			{
				doneLeaf(otherlv_1);
			}
			(
				{
					markLeaf(elementTypeProvider.getMixed_IDTerminalRuleCall_1_1_0ElementType());
				}
				this_ID_2=RULE_ID
				{
					doneLeaf(this_ID_2);
				}
				    |
				{
					markComposite(elementTypeProvider.getMixed_DatatypeParserRuleCall_1_1_1ElementType());
				}
				ruleDatatype
				{
					doneComposite();
				}
			)
		)?
		(
			(
				{
					precedeComposite(elementTypeProvider.getMixed_ActionAction_2_0ElementType());
					doneComposite();
					associateWithSemanticElement();
				}
			)
			    |
			{
				markComposite(elementTypeProvider.getMixed_MixedParserRuleCall_2_1ElementType());
			}
			this_Mixed_5=ruleMixed
			{
				$current = $this_Mixed_5.current;
				doneComposite();
			}
			    |
			(
				(
					(
						{
							markLeaf(elementTypeProvider.getMixed_NameIDTerminalRuleCall_2_2_0_0ElementType());
						}
						lv_name_6_0=RULE_ID
						{
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						{
							doneLeaf(lv_name_6_0);
						}
					)
				)
				    |
				(
					{
						markLeaf(elementTypeProvider.getMixed_ChildKeyword_2_2_1_0ElementType());
					}
					otherlv_7='child'
					{
						doneLeaf(otherlv_7);
					}
					(
						(
							{
								markComposite(elementTypeProvider.getMixed_EobjMixedParserRuleCall_2_2_1_1_0ElementType());
							}
							lv_eobj_8_0=ruleMixed
							{
								doneComposite();
								if(!$current) {
									associateWithSemanticElement();
									$current = true;
								}
							}
						)
					)
				)
				    |
				(
					(
						{
							markComposite(elementTypeProvider.getMixed_DatatypeDatatypeParserRuleCall_2_2_2_0ElementType());
						}
						lv_datatype_9_0=ruleDatatype
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
				    |
				(
					{
						markLeaf(elementTypeProvider.getMixed_RefKeyword_2_2_3_0ElementType());
					}
					otherlv_10='ref'
					{
						doneLeaf(otherlv_10);
					}
					(
						(
							{
								if (!$current) {
									associateWithSemanticElement();
									$current = true;
								}
							}
							{
								markLeaf(elementTypeProvider.getMixed_RefMixedCrossReference_2_2_3_1_0ElementType());
							}
							otherlv_11=RULE_ID
							{
								doneLeaf(otherlv_11);
							}
						)
					)
				)
				    |
				(
					(
						{
							markComposite(elementTypeProvider.getMixed_LitEnumEnumRuleCall_2_2_4_0ElementType());
						}
						lv_lit_12_0=ruleEnum
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
			)
		)
		{
			markLeaf(elementTypeProvider.getMixed_RightParenthesisKeyword_3ElementType());
		}
		otherlv_13=')'
		{
			doneLeaf(otherlv_13);
		}
		(
			(
				{
					precedeComposite(elementTypeProvider.getMixed_AssignedActionChildAction_4_0ElementType());
					doneComposite();
					associateWithSemanticElement();
				}
			)
			{
				markLeaf(elementTypeProvider.getMixed_ActionKeyword_4_1ElementType());
			}
			otherlv_15='action'
			{
				doneLeaf(otherlv_15);
			}
			(
				(
					(
						{
							markComposite(elementTypeProvider.getMixed_BodyMixedParserRuleCall_4_2_0_0ElementType());
						}
						lv_body_16_0=ruleMixed
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
				{
					markLeaf(elementTypeProvider.getMixed_EndKeyword_4_2_1ElementType());
				}
				otherlv_17='end'
				{
					doneLeaf(otherlv_17);
				}
			)?
		)*
	)
;

//Entry rule entryRuleDatatype
entryRuleDatatype returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getDatatypeElementType()); }
	iv_ruleDatatype=ruleDatatype
	{ $current=$iv_ruleDatatype.current; }
	EOF;

// Rule Datatype
ruleDatatype returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getDatatype_DatatypeKeyword_0ElementType());
		}
		kw='datatype'
		{
			doneLeaf(kw);
		}
		(
			{
				markComposite(elementTypeProvider.getDatatype_DatatypeParserRuleCall_1_0ElementType());
			}
			ruleDatatype
			{
				doneComposite();
			}
			    |
			{
				markLeaf(elementTypeProvider.getDatatype_IDTerminalRuleCall_1_1ElementType());
			}
			this_ID_2=RULE_ID
			{
				doneLeaf(this_ID_2);
			}
		)
	)
;

// Rule Enum
ruleEnum returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getEnum_Lit1EnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='lit1'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getEnum_Lit2EnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='lit2'
			{
				doneLeaf(enumLiteral_1);
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
