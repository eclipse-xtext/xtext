/*
 * generated by Xtext
 */
grammar PsiInternalIndentationAwareTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.testlanguages.indent.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.indent.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.testlanguages.indent.idea.lang.IndentationAwareTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.testlanguages.indent.services.IndentationAwareTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected IndentationAwareTestLanguageGrammarAccess grammarAccess;

	protected IndentationAwareTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalIndentationAwareTestLanguageParser(PsiBuilder builder, TokenStream input, IndentationAwareTestLanguageElementTypeProvider elementTypeProvider, IndentationAwareTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "NodeList";
	}

}

//Entry rule entryRuleNodeList
entryRuleNodeList:
	{ markComposite(elementTypeProvider.getNodeListElementType()); }
	ruleNodeList
	EOF;

// Rule NodeList
ruleNodeList:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getNodeList_ChildrenNodeParserRuleCall_0_0ElementType());
				}
				lv_children_0_0=ruleNode
				{
					doneComposite();
				}
			)
		)
		(
			{
				markLeaf(elementTypeProvider.getNodeList_NLTerminalRuleCall_1_0ElementType());
			}
			this_NL_1=RULE_NL
			{
				doneLeaf(this_NL_1);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getNodeList_ChildrenNodeParserRuleCall_1_1_0ElementType());
					}
					lv_children_2_0=ruleNode
					{
						doneComposite();
					}
				)
			)
		)*
	)
;

//Entry rule entryRuleNode
entryRuleNode:
	{ markComposite(elementTypeProvider.getNodeElementType()); }
	ruleNode
	EOF;

// Rule Node
ruleNode:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getNode_NameStringParserRuleCall_0_0ElementType());
				}
				lv_name_0_0=ruleString
				{
					doneComposite();
				}
			)
		)
		(
			{
				markLeaf(elementTypeProvider.getNode_NLTerminalRuleCall_1_0ElementType());
			}
			this_NL_1=RULE_NL
			{
				doneLeaf(this_NL_1);
			}
			{
				markLeaf(elementTypeProvider.getNode_BEGINTerminalRuleCall_1_1ElementType());
			}
			this_BEGIN_2=RULE_BEGIN
			{
				doneLeaf(this_BEGIN_2);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getNode_ChildrenNodeListParserRuleCall_1_2_0ElementType());
					}
					lv_children_3_0=ruleNodeList
					{
						doneComposite();
					}
				)
			)
			{
				markLeaf(elementTypeProvider.getNode_ENDTerminalRuleCall_1_3ElementType());
			}
			this_END_4=RULE_END
			{
				doneLeaf(this_END_4);
			}
		)?
	)
;

//Entry rule entryRuleString
entryRuleString:
	{ markComposite(elementTypeProvider.getStringElementType()); }
	ruleString
	EOF;

// Rule String
ruleString:
	(
		{
			markLeaf(elementTypeProvider.getString_OTHERTerminalRuleCallElementType());
		}
		this_OTHER_0=RULE_OTHER
		{
			doneLeaf(this_OTHER_0);
		}
	)+
;

RULE_NL : ('\r'|'\n')+ '\t'*;

RULE_BEGIN : '{';

RULE_END : '}';

RULE_OTHER : .;
