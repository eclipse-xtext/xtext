/*
 * generated by Xtext
 */
grammar PsiInternalFowlerDslTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.testlanguages.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.testlanguages.idea.lang.FowlerDslTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.testlanguages.services.FowlerDslTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected FowlerDslTestLanguageGrammarAccess grammarAccess;

	protected FowlerDslTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalFowlerDslTestLanguageParser(PsiBuilder builder, TokenStream input, FowlerDslTestLanguageElementTypeProvider elementTypeProvider, FowlerDslTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Statemachine";
	}

}

//Entry rule entryRuleStatemachine
entryRuleStatemachine returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getStatemachineElementType()); }
	iv_ruleStatemachine=ruleStatemachine
	{ $current=$iv_ruleStatemachine.current; }
	EOF;

// Rule Statemachine
ruleStatemachine returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getStatemachine_EventsKeyword_0ElementType());
		}
		otherlv_0='events'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getStatemachine_EventsEventParserRuleCall_1_0ElementType());
				}
				lv_events_1_0=ruleEvent
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		{
			markLeaf(elementTypeProvider.getStatemachine_EndKeyword_2ElementType());
		}
		otherlv_2='end'
		{
			doneLeaf(otherlv_2);
		}
		{
			markLeaf(elementTypeProvider.getStatemachine_CommandsKeyword_3ElementType());
		}
		otherlv_3='commands'
		{
			doneLeaf(otherlv_3);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getStatemachine_CommandsCommandParserRuleCall_4_0ElementType());
				}
				lv_commands_4_0=ruleCommand
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		{
			markLeaf(elementTypeProvider.getStatemachine_EndKeyword_5ElementType());
		}
		otherlv_5='end'
		{
			doneLeaf(otherlv_5);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getStatemachine_StatesStateParserRuleCall_6_0ElementType());
				}
				lv_states_6_0=ruleState
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
	)
;

//Entry rule entryRuleEvent
entryRuleEvent returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getEventElementType()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getEvent_ResettingResettingKeyword_0_0ElementType());
				}
				lv_resetting_0_0='resetting'
				{
					doneLeaf(lv_resetting_0_0);
				}
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)?
		(
			(
				{
					markLeaf(elementTypeProvider.getEvent_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getEvent_CodeIDTerminalRuleCall_2_0ElementType());
				}
				lv_code_2_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_code_2_0);
				}
			)
		)
	)
;

//Entry rule entryRuleCommand
entryRuleCommand returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getCommandElementType()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getCommand_NameIDTerminalRuleCall_0_0ElementType());
				}
				lv_name_0_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_0_0);
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getCommand_CodeIDTerminalRuleCall_1_0ElementType());
				}
				lv_code_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_code_1_0);
				}
			)
		)
	)
;

//Entry rule entryRuleState
entryRuleState returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getStateElementType()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getState_StateKeyword_0ElementType());
		}
		otherlv_0='state'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getState_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		(
			{
				markLeaf(elementTypeProvider.getState_ActionsKeyword_2_0ElementType());
			}
			otherlv_2='actions'
			{
				doneLeaf(otherlv_2);
			}
			{
				markLeaf(elementTypeProvider.getState_LeftCurlyBracketKeyword_2_1ElementType());
			}
			otherlv_3='{'
			{
				doneLeaf(otherlv_3);
			}
			(
				(
					{
						if (!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						markLeaf(elementTypeProvider.getState_ActionsCommandCrossReference_2_2_0ElementType());
					}
					otherlv_4=RULE_ID
					{
						doneLeaf(otherlv_4);
					}
				)
			)+
			{
				markLeaf(elementTypeProvider.getState_RightCurlyBracketKeyword_2_3ElementType());
			}
			otherlv_5='}'
			{
				doneLeaf(otherlv_5);
			}
		)?
		(
			(
				{
					markComposite(elementTypeProvider.getState_TransitionsTransitionParserRuleCall_3_0ElementType());
				}
				lv_transitions_6_0=ruleTransition
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		{
			markLeaf(elementTypeProvider.getState_EndKeyword_4ElementType());
		}
		otherlv_7='end'
		{
			doneLeaf(otherlv_7);
		}
	)
;

//Entry rule entryRuleTransition
entryRuleTransition returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getTransitionElementType()); }
	iv_ruleTransition=ruleTransition
	{ $current=$iv_ruleTransition.current; }
	EOF;

// Rule Transition
ruleTransition returns [Boolean current=false]
:
	(
		(
			(
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					markLeaf(elementTypeProvider.getTransition_EventEventCrossReference_0_0ElementType());
				}
				otherlv_0=RULE_ID
				{
					doneLeaf(otherlv_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getTransition_EqualsSignGreaterThanSignKeyword_1ElementType());
		}
		otherlv_1='=>'
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					markLeaf(elementTypeProvider.getTransition_StateStateCrossReference_2_0ElementType());
				}
				otherlv_2=RULE_ID
				{
					doneLeaf(otherlv_2);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
