/*
 * generated by Xtext
 */
grammar PsiInternalActionTestLanguage2;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.testlanguages.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.testlanguages.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.testlanguages.idea.lang.ActionTestLanguage2ElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.testlanguages.services.ActionTestLanguage2GrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected ActionTestLanguage2GrammarAccess grammarAccess;

	protected ActionTestLanguage2ElementTypeProvider elementTypeProvider;

	public PsiInternalActionTestLanguage2Parser(PsiBuilder builder, TokenStream input, ActionTestLanguage2ElementTypeProvider elementTypeProvider, ActionTestLanguage2GrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "ORing";
	}

}

//Entry rule entryRuleORing
entryRuleORing returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getORingElementType()); }
	iv_ruleORing=ruleORing
	{ $current=$iv_ruleORing.current; }
	EOF;

// Rule ORing
ruleORing returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getORing_ValueParserRuleCall_0ElementType());
		}
		this_Value_0=ruleValue
		{
			$current = $this_Value_0.current;
			doneComposite();
		}
		(
			(
				{
					precedeComposite(elementTypeProvider.getORing_ORingDisjunctsAction_1_0ElementType());
					doneComposite();
					associateWithSemanticElement();
				}
			)
			{
				markLeaf(elementTypeProvider.getORing_VerticalLineKeyword_1_1ElementType());
			}
			otherlv_2='|'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getORing_DisjunctsValueParserRuleCall_1_2_0ElementType());
					}
					lv_disjuncts_3_0=ruleValue
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)*
	)
;

//Entry rule entryRuleValue
entryRuleValue returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getValueElementType()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getValue_ValueAKeyword_0ElementType());
			}
			lv_value_0_0='a'
			{
				doneLeaf(lv_value_0_0);
			}
			{
				if (!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
