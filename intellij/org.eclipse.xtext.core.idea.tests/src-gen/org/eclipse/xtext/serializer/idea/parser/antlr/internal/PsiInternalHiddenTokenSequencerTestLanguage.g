/*
 * generated by Xtext
 */
grammar PsiInternalHiddenTokenSequencerTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.serializer.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.serializer.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.serializer.idea.lang.HiddenTokenSequencerTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.serializer.services.HiddenTokenSequencerTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected HiddenTokenSequencerTestLanguageGrammarAccess grammarAccess;

	protected HiddenTokenSequencerTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalHiddenTokenSequencerTestLanguageParser(PsiBuilder builder, TokenStream input, HiddenTokenSequencerTestLanguageElementTypeProvider elementTypeProvider, HiddenTokenSequencerTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	EOF;

// Rule Model
ruleModel:
	(
		(
			{
				markComposite(elementTypeProvider.getModel_DomainModelDomainModelParserRuleCall_0ElementType());
			}
			lv_domainModel_0_0=ruleDomainModel
			{
				doneComposite();
			}
		)
	)
;

//Entry rule entryRuleDomainModel
entryRuleDomainModel:
	{ markComposite(elementTypeProvider.getDomainModelElementType()); }
	ruleDomainModel
	EOF;

// Rule DomainModel
ruleDomainModel:
	(
		{
			markLeaf(elementTypeProvider.getDomainModel_EntitiesKeyword_0ElementType());
		}
		otherlv_0='entities'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getDomainModel_EntitiesEntityParserRuleCall_1_0ElementType());
				}
				lv_entities_1_0=ruleEntity
				{
					doneComposite();
				}
			)
		)*
		{
			markLeaf(elementTypeProvider.getDomainModel_EndKeyword_2ElementType());
		}
		otherlv_2='end'
		{
			doneLeaf(otherlv_2);
		}
	)
;

//Entry rule entryRuleEntity
entryRuleEntity:
	{ markComposite(elementTypeProvider.getEntityElementType()); }
	ruleEntity
	EOF;

// Rule Entity
ruleEntity:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getEntity_NameIDTerminalRuleCall_0_0ElementType());
				}
				lv_name_0_0=RULE_ID
				{
					doneLeaf(lv_name_0_0);
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getEntity_DescriptionSTRINGTerminalRuleCall_1_0ElementType());
				}
				lv_description_1_0=RULE_STRING
				{
					doneLeaf(lv_description_1_0);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
