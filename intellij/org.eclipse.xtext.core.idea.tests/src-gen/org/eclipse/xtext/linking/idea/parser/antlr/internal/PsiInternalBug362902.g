/*
 * generated by Xtext
 */
grammar PsiInternalBug362902;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.linking.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.linking.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.linking.idea.lang.Bug362902ElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.linking.services.Bug362902GrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected Bug362902GrammarAccess grammarAccess;

	protected Bug362902ElementTypeProvider elementTypeProvider;

	public PsiInternalBug362902Parser(PsiBuilder builder, TokenStream input, Bug362902ElementTypeProvider elementTypeProvider, Bug362902GrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getModel_GreetingsGreetingParserRuleCall_0_0ElementType());
				}
				lv_greetings_0_0=ruleGreeting
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		{
			markLeaf(elementTypeProvider.getModel_FavouriteKeyword_1ElementType());
		}
		otherlv_1='favourite'
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					markComposite(elementTypeProvider.getModel_FavouriteGreetingCrossReference_2_0ElementType());
				}
				ruleMyId
				{
					doneComposite();
				}
			)
		)
	)
;

//Entry rule entryRuleGreeting
entryRuleGreeting returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getGreetingElementType()); }
	iv_ruleGreeting=ruleGreeting
	{ $current=$iv_ruleGreeting.current; }
	EOF;

// Rule Greeting
ruleGreeting returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getGreeting_HelloKeyword_0ElementType());
		}
		otherlv_0='Hello'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getGreeting_NameMyIdParserRuleCall_1_0ElementType());
				}
				lv_name_1_0=ruleMyId
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getGreeting_ExclamationMarkKeyword_2ElementType());
		}
		otherlv_2='!'
		{
			doneLeaf(otherlv_2);
		}
	)
;

//Entry rule entryRuleMyId
entryRuleMyId returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getMyIdElementType()); }
	iv_ruleMyId=ruleMyId
	{ $current=$iv_ruleMyId.current; }
	EOF;

// Rule MyId
ruleMyId returns [Boolean current=false]
:
	{
		markLeaf(elementTypeProvider.getMyId_IDTerminalRuleCallElementType());
	}
	this_ID_0=RULE_ID
	{
		doneLeaf(this_ID_0);
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
