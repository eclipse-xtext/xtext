/*
 * generated by Xtext
 */
grammar PsiInternalLazyLinkingTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.linking.lazy.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.linking.lazy.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.linking.lazy.idea.lang.LazyLinkingTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.linking.lazy.services.LazyLinkingTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected LazyLinkingTestLanguageGrammarAccess grammarAccess;

	protected LazyLinkingTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalLazyLinkingTestLanguageParser(PsiBuilder builder, TokenStream input, LazyLinkingTestLanguageElementTypeProvider elementTypeProvider, LazyLinkingTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			{
				markComposite(elementTypeProvider.getModel_TypesTypeParserRuleCall_0ElementType());
			}
			lv_types_0_0=ruleType
			{
				doneComposite();
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
		)
	)*
;

//Entry rule entryRuleType
entryRuleType returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getTypeElementType()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getType_TypeKeyword_0ElementType());
		}
		otherlv_0='type'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getType_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		(
			{
				markLeaf(elementTypeProvider.getType_ExtendsKeyword_2_0ElementType());
			}
			otherlv_2='extends'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					{
						if (!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						markLeaf(elementTypeProvider.getType_ExtendsTypeCrossReference_2_1_0ElementType());
					}
					otherlv_3=RULE_ID
					{
						doneLeaf(otherlv_3);
					}
				)
			)
			{
				markLeaf(elementTypeProvider.getType_FullStopKeyword_2_2ElementType());
			}
			otherlv_4='.'
			{
				doneLeaf(otherlv_4);
			}
			(
				(
					{
						if (!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						markLeaf(elementTypeProvider.getType_ParentIdPropertyCrossReference_2_3_0ElementType());
					}
					otherlv_5=RULE_ID
					{
						doneLeaf(otherlv_5);
					}
				)
			)
		)?
		(
			{
				markLeaf(elementTypeProvider.getType_ForKeyword_3_0ElementType());
			}
			otherlv_6='for'
			{
				doneLeaf(otherlv_6);
			}
			(
				(
					{
						if (!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						markLeaf(elementTypeProvider.getType_ParentIdPropertyCrossReference_3_1_0ElementType());
					}
					otherlv_7=RULE_ID
					{
						doneLeaf(otherlv_7);
					}
				)
			)
			{
				markLeaf(elementTypeProvider.getType_InKeyword_3_2ElementType());
			}
			otherlv_8='in'
			{
				doneLeaf(otherlv_8);
			}
			(
				(
					{
						if (!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						markLeaf(elementTypeProvider.getType_ExtendsTypeCrossReference_3_3_0ElementType());
					}
					otherlv_9=RULE_ID
					{
						doneLeaf(otherlv_9);
					}
				)
			)
		)?
		{
			markLeaf(elementTypeProvider.getType_LeftCurlyBracketKeyword_4ElementType());
		}
		otherlv_10='{'
		{
			doneLeaf(otherlv_10);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getType_PropertiesPropertyParserRuleCall_5_0ElementType());
				}
				lv_properties_11_0=ruleProperty
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		(
			(
				{
					markComposite(elementTypeProvider.getType_UnresolvedProxyPropertyUnresolvedProxyPropertyParserRuleCall_6_0ElementType());
				}
				lv_unresolvedProxyProperty_12_0=ruleUnresolvedProxyProperty
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		{
			markLeaf(elementTypeProvider.getType_RightCurlyBracketKeyword_7ElementType());
		}
		otherlv_13='}'
		{
			doneLeaf(otherlv_13);
		}
	)
;

//Entry rule entryRuleProperty
entryRuleProperty returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getPropertyElementType()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [Boolean current=false]
:
	(
		(
			(
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					markLeaf(elementTypeProvider.getProperty_TypeTypeCrossReference_0_0ElementType());
				}
				otherlv_0=RULE_ID
				{
					doneLeaf(otherlv_0);
				}
			)
		)+
		(
			(
				{
					markLeaf(elementTypeProvider.getProperty_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getProperty_SemicolonKeyword_2ElementType());
		}
		otherlv_2=';'
		{
			doneLeaf(otherlv_2);
		}
	)
;

//Entry rule entryRuleUnresolvedProxyProperty
entryRuleUnresolvedProxyProperty returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getUnresolvedProxyPropertyElementType()); }
	iv_ruleUnresolvedProxyProperty=ruleUnresolvedProxyProperty
	{ $current=$iv_ruleUnresolvedProxyProperty.current; }
	EOF;

// Rule UnresolvedProxyProperty
ruleUnresolvedProxyProperty returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getUnresolvedProxyProperty_UnresolvedKeyword_0ElementType());
		}
		otherlv_0='unresolved'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					markLeaf(elementTypeProvider.getUnresolvedProxyProperty_TypeTypeCrossReference_1_0ElementType());
				}
				otherlv_1=RULE_ID
				{
					doneLeaf(otherlv_1);
				}
			)
		)+
		(
			(
				{
					markLeaf(elementTypeProvider.getUnresolvedProxyProperty_NameIDTerminalRuleCall_2_0ElementType());
				}
				lv_name_2_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_2_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getUnresolvedProxyProperty_SemicolonKeyword_3ElementType());
		}
		otherlv_3=';'
		{
			doneLeaf(otherlv_3);
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
