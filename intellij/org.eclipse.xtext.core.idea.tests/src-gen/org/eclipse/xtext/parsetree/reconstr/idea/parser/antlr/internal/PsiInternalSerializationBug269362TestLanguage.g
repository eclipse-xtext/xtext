/*
 * generated by Xtext
 */
grammar PsiInternalSerializationBug269362TestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parsetree.reconstr.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.reconstr.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parsetree.reconstr.idea.lang.SerializationBug269362TestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parsetree.reconstr.services.SerializationBug269362TestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected SerializationBug269362TestLanguageGrammarAccess grammarAccess;

	protected SerializationBug269362TestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalSerializationBug269362TestLanguageParser(PsiBuilder builder, TokenStream input, SerializationBug269362TestLanguageElementTypeProvider elementTypeProvider, SerializationBug269362TestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getModel_FooKeyword_0_0ElementType());
			}
			otherlv_0='foo'
			{
				doneLeaf(otherlv_0);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getModel_FooIDTerminalRuleCall_0_1_0ElementType());
					}
					lv_foo_1_0=RULE_ID
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_foo_1_0);
					}
				)
			)
			(
				{
					markLeaf(elementTypeProvider.getModel_BarKeyword_0_2_0ElementType());
				}
				otherlv_2='bar'
				{
					doneLeaf(otherlv_2);
				}
				(
					(
						{
							markLeaf(elementTypeProvider.getModel_BarIDTerminalRuleCall_0_2_1_0ElementType());
						}
						lv_bar_3_0=RULE_ID
						{
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						{
							doneLeaf(lv_bar_3_0);
						}
					)
				)
			)?
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getModel_BarKeyword_1_0ElementType());
			}
			otherlv_4='bar'
			{
				doneLeaf(otherlv_4);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getModel_BarIDTerminalRuleCall_1_1_0ElementType());
					}
					lv_bar_5_0=RULE_ID
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_bar_5_0);
					}
				)
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
