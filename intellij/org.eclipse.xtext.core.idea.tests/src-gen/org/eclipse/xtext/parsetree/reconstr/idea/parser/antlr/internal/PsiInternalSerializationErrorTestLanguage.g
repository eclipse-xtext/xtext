/*
 * generated by Xtext
 */
grammar PsiInternalSerializationErrorTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parsetree.reconstr.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.reconstr.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parsetree.reconstr.idea.lang.SerializationErrorTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parsetree.reconstr.services.SerializationErrorTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected SerializationErrorTestLanguageGrammarAccess grammarAccess;

	protected SerializationErrorTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalSerializationErrorTestLanguageParser(PsiBuilder builder, TokenStream input, SerializationErrorTestLanguageElementTypeProvider elementTypeProvider, SerializationErrorTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	EOF;

// Rule Model
ruleModel:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getModel_TestTestParserRuleCall_0_0ElementType());
				}
				lv_test_0_0=ruleTest
				{
					doneComposite();
				}
			)
		)
		    |
		(
			(
				{
					markComposite(elementTypeProvider.getModel_TestParenthesisParserRuleCall_1_0ElementType());
				}
				lv_test_1_0=ruleParenthesis
				{
					doneComposite();
				}
			)
		)
	)
;

//Entry rule entryRuleParenthesis
entryRuleParenthesis:
	{ markComposite(elementTypeProvider.getParenthesisElementType()); }
	ruleParenthesis
	EOF;

// Rule Parenthesis
ruleParenthesis:
	(
		{
			markLeaf(elementTypeProvider.getParenthesis_LeftParenthesisKeyword_0ElementType());
		}
		otherlv_0='('
		{
			doneLeaf(otherlv_0);
		}
		{
			markComposite(elementTypeProvider.getParenthesis_TestParserRuleCall_1ElementType());
		}
		ruleTest
		{
			doneComposite();
		}
		{
			markLeaf(elementTypeProvider.getParenthesis_RightParenthesisKeyword_2ElementType());
		}
		otherlv_2=')'
		{
			doneLeaf(otherlv_2);
		}
	)
;

//Entry rule entryRuleTest
entryRuleTest:
	{ markComposite(elementTypeProvider.getTestElementType()); }
	ruleTest
	EOF;

// Rule Test
ruleTest:
	(
		{
			markComposite(elementTypeProvider.getTest_TwoRequiredParserRuleCall_0ElementType());
		}
		ruleTwoRequired
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getTest_TwoOptionsParserRuleCall_1ElementType());
		}
		ruleTwoOptions
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getTest_IndentParserRuleCall_2ElementType());
		}
		ruleIndent
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleTwoRequired
entryRuleTwoRequired:
	{ markComposite(elementTypeProvider.getTwoRequiredElementType()); }
	ruleTwoRequired
	EOF;

// Rule TwoRequired
ruleTwoRequired:
	(
		{
			markLeaf(elementTypeProvider.getTwoRequired_TworequiredKeyword_0ElementType());
		}
		otherlv_0='tworequired'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getTwoRequired_OneIDTerminalRuleCall_1_0ElementType());
				}
				lv_one_1_0=RULE_ID
				{
					doneLeaf(lv_one_1_0);
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getTwoRequired_TwoIDTerminalRuleCall_2_0ElementType());
				}
				lv_two_2_0=RULE_ID
				{
					doneLeaf(lv_two_2_0);
				}
			)
		)
	)
;

//Entry rule entryRuleTwoOptions
entryRuleTwoOptions:
	{ markComposite(elementTypeProvider.getTwoOptionsElementType()); }
	ruleTwoOptions
	EOF;

// Rule TwoOptions
ruleTwoOptions:
	(
		{
			markLeaf(elementTypeProvider.getTwoOptions_TwooptionsKeyword_0ElementType());
		}
		otherlv_0='twooptions'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getTwoOptions_OneKeyword_1_0_0ElementType());
				}
				otherlv_1='one'
				{
					doneLeaf(otherlv_1);
				}
				(
					(
						{
							markLeaf(elementTypeProvider.getTwoOptions_OneIDTerminalRuleCall_1_0_1_0ElementType());
						}
						lv_one_2_0=RULE_ID
						{
							doneLeaf(lv_one_2_0);
						}
					)
				)
			)
			    |
			(
				{
					markLeaf(elementTypeProvider.getTwoOptions_TwoKeyword_1_1_0ElementType());
				}
				otherlv_3='two'
				{
					doneLeaf(otherlv_3);
				}
				(
					(
						{
							markLeaf(elementTypeProvider.getTwoOptions_TwoIDTerminalRuleCall_1_1_1_0ElementType());
						}
						lv_two_4_0=RULE_ID
						{
							doneLeaf(lv_two_4_0);
						}
					)
				)
			)
		)
	)
;

//Entry rule entryRuleIndent
entryRuleIndent:
	{ markComposite(elementTypeProvider.getIndentElementType()); }
	ruleIndent
	EOF;

// Rule Indent
ruleIndent:
	(
		{
			markLeaf(elementTypeProvider.getIndent_LeftCurlyBracketKeyword_0ElementType());
		}
		otherlv_0='{'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getIndent_ReqTwoRequiredParserRuleCall_1_0ElementType());
				}
				lv_req_1_0=ruleTwoRequired
				{
					doneComposite();
				}
			)
		)?
		(
			(
				{
					markComposite(elementTypeProvider.getIndent_OptTwoOptionsParserRuleCall_2_0ElementType());
				}
				lv_opt_2_0=ruleTwoOptions
				{
					doneComposite();
				}
			)
		)?
		(
			(
				{
					markComposite(elementTypeProvider.getIndent_IndentIndentParserRuleCall_3_0ElementType());
				}
				lv_indent_3_0=ruleIndent
				{
					doneComposite();
				}
			)
		)*
		{
			markLeaf(elementTypeProvider.getIndent_RightCurlyBracketKeyword_4ElementType());
		}
		otherlv_4='}'
		{
			doneLeaf(otherlv_4);
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
