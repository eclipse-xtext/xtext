/*
 * generated by Xtext
 */
grammar PsiInternalComplexReconstrTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parsetree.reconstr.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.reconstr.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parsetree.reconstr.idea.lang.ComplexReconstrTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parsetree.reconstr.services.ComplexReconstrTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected ComplexReconstrTestLanguageGrammarAccess grammarAccess;

	protected ComplexReconstrTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalComplexReconstrTestLanguageParser(PsiBuilder builder, TokenStream input, ComplexReconstrTestLanguageElementTypeProvider elementTypeProvider, ComplexReconstrTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Root";
	}

}

//Entry rule entryRuleRoot
entryRuleRoot returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRootElementType()); }
	iv_ruleRoot=ruleRoot
	{ $current=$iv_ruleRoot.current; }
	EOF;

// Rule Root
ruleRoot returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getRoot_OpParserRuleCall_0ElementType());
		}
		this_Op_0=ruleOp
		{
			$current = $this_Op_0.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getRoot_TrickyGParserRuleCall_1ElementType());
		}
		this_TrickyG_1=ruleTrickyG
		{
			$current = $this_TrickyG_1.current;
			doneComposite();
		}
	)
;

//Entry rule entryRuleOp
entryRuleOp returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getOpElementType()); }
	iv_ruleOp=ruleOp
	{ $current=$iv_ruleOp.current; }
	EOF;

// Rule Op
ruleOp returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getOp_TermParserRuleCall_0ElementType());
		}
		this_Term_0=ruleTerm
		{
			$current = $this_Term_0.current;
			doneComposite();
		}
		(
			(
				(
					{
						precedeComposite(elementTypeProvider.getOp_AddAddOperandsAction_1_0_0ElementType());
						doneComposite();
						associateWithSemanticElement();
					}
				)
				{
					markLeaf(elementTypeProvider.getOp_PlusSignKeyword_1_0_1ElementType());
				}
				otherlv_2='+'
				{
					doneLeaf(otherlv_2);
				}
				(
					(
						{
							markComposite(elementTypeProvider.getOp_AddOperandsTermParserRuleCall_1_0_2_0ElementType());
						}
						lv_addOperands_3_0=ruleTerm
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
			)
			    |
			(
				(
					{
						precedeComposite(elementTypeProvider.getOp_MinusMinusOperandsAction_1_1_0ElementType());
						doneComposite();
						associateWithSemanticElement();
					}
				)
				{
					markLeaf(elementTypeProvider.getOp_HyphenMinusKeyword_1_1_1ElementType());
				}
				otherlv_5='-'
				{
					doneLeaf(otherlv_5);
				}
				(
					(
						{
							markComposite(elementTypeProvider.getOp_MinusOperandsTermParserRuleCall_1_1_2_0ElementType());
						}
						lv_minusOperands_6_0=ruleTerm
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
			)
		)*
	)
;

//Entry rule entryRuleTerm
entryRuleTerm returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getTermElementType()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getTerm_AtomParserRuleCall_0ElementType());
		}
		this_Atom_0=ruleAtom
		{
			$current = $this_Atom_0.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getTerm_ParensParserRuleCall_1ElementType());
		}
		this_Parens_1=ruleParens
		{
			$current = $this_Parens_1.current;
			doneComposite();
		}
	)
;

//Entry rule entryRuleAtom
entryRuleAtom returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAtomElementType()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getAtom_NameIDTerminalRuleCall_0ElementType());
			}
			lv_name_0_0=RULE_ID
			{
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
			{
				doneLeaf(lv_name_0_0);
			}
		)
	)
;

//Entry rule entryRuleParens
entryRuleParens returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getParensElementType()); }
	iv_ruleParens=ruleParens
	{ $current=$iv_ruleParens.current; }
	EOF;

// Rule Parens
ruleParens returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getParens_LeftParenthesisKeyword_0ElementType());
		}
		otherlv_0='('
		{
			doneLeaf(otherlv_0);
		}
		{
			markComposite(elementTypeProvider.getParens_OpParserRuleCall_1ElementType());
		}
		this_Op_1=ruleOp
		{
			$current = $this_Op_1.current;
			doneComposite();
		}
		{
			markLeaf(elementTypeProvider.getParens_RightParenthesisKeyword_2ElementType());
		}
		otherlv_2=')'
		{
			doneLeaf(otherlv_2);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getParens_EmExclamationMarkKeyword_3_0ElementType());
				}
				lv_em_3_0='!'
				{
					doneLeaf(lv_em_3_0);
				}
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)?
	)
;

//Entry rule entryRuleTrickyG
entryRuleTrickyG returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getTrickyGElementType()); }
	iv_ruleTrickyG=ruleTrickyG
	{ $current=$iv_ruleTrickyG.current; }
	EOF;

// Rule TrickyG
ruleTrickyG returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getTrickyG_TGKeyword_0ElementType());
		}
		otherlv_0='TG'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getTrickyG_TreeTrickyG1ParserRuleCall_1_0ElementType());
				}
				lv_tree_1_0=ruleTrickyG1
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

//Entry rule entryRuleTrickyG1
entryRuleTrickyG1 returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getTrickyG1ElementType()); }
	iv_ruleTrickyG1=ruleTrickyG1
	{ $current=$iv_ruleTrickyG1.current; }
	EOF;

// Rule TrickyG1
ruleTrickyG1 returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getTrickyG1_LeftSquareBracketKeyword_0ElementType());
		}
		otherlv_0='['
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				(
					{
						markComposite(elementTypeProvider.getTrickyG1_ValsTrickyG2ParserRuleCall_1_0_0ElementType());
					}
					lv_vals_1_0=ruleTrickyG2
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
			(
				{
					markLeaf(elementTypeProvider.getTrickyG1_CommaKeyword_1_1_0ElementType());
				}
				otherlv_2=','
				{
					doneLeaf(otherlv_2);
				}
				(
					(
						{
							markComposite(elementTypeProvider.getTrickyG1_ValsTrickyG2ParserRuleCall_1_1_1_0ElementType());
						}
						lv_vals_3_0=ruleTrickyG2
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
			)*
		)?
		{
			markLeaf(elementTypeProvider.getTrickyG1_RightSquareBracketKeyword_2ElementType());
		}
		otherlv_4=']'
		{
			doneLeaf(otherlv_4);
		}
	)
;

//Entry rule entryRuleTrickyG2
entryRuleTrickyG2 returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getTrickyG2ElementType()); }
	iv_ruleTrickyG2=ruleTrickyG2
	{ $current=$iv_ruleTrickyG2.current; }
	EOF;

// Rule TrickyG2
ruleTrickyG2 returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getTrickyG2_TrickyG1ParserRuleCall_0ElementType());
		}
		this_TrickyG1_0=ruleTrickyG1
		{
			$current = $this_TrickyG1_0.current;
			doneComposite();
		}
		    |
		(
			(
				{
					markLeaf(elementTypeProvider.getTrickyG2_ValINTTerminalRuleCall_1_0ElementType());
				}
				lv_val_1_0=RULE_INT
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_val_1_0);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
