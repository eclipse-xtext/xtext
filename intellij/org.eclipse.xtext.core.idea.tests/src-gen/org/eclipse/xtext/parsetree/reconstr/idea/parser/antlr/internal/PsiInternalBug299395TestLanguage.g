/*
 * generated by Xtext
 */
grammar PsiInternalBug299395TestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parsetree.reconstr.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.reconstr.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parsetree.reconstr.idea.lang.Bug299395TestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parsetree.reconstr.services.Bug299395TestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected Bug299395TestLanguageGrammarAccess grammarAccess;

	protected Bug299395TestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalBug299395TestLanguageParser(PsiBuilder builder, TokenStream input, Bug299395TestLanguageElementTypeProvider elementTypeProvider, Bug299395TestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	EOF;

// Rule Model
ruleModel:
	(
		(
			{
				precedeComposite(elementTypeProvider.getModel_ModelAction_0ElementType());
				doneComposite();
			}
		)
		(
			{
				markLeaf(elementTypeProvider.getModel_LeftCurlyBracketKeyword_1_0ElementType());
			}
			otherlv_1='{'
			{
				doneLeaf(otherlv_1);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getModel_StringsSTRINGTerminalRuleCall_1_1_0ElementType());
					}
					lv_strings_2_0=RULE_STRING
					{
						doneLeaf(lv_strings_2_0);
					}
				)
			)?
			{
				markLeaf(elementTypeProvider.getModel_RightCurlyBracketKeyword_1_2ElementType());
			}
			otherlv_3='}'
			{
				doneLeaf(otherlv_3);
			}
		)*
		(
			{
				markLeaf(elementTypeProvider.getModel_LeftSquareBracketKeyword_2_0ElementType());
			}
			otherlv_4='['
			{
				doneLeaf(otherlv_4);
			}
			(
				(
					(
						{
							markLeaf(elementTypeProvider.getModel_KeysSTRINGTerminalRuleCall_2_1_0_0ElementType());
						}
						lv_keys_5_0=RULE_STRING
						{
							doneLeaf(lv_keys_5_0);
						}
					)
				)
				(
					(
						{
							markLeaf(elementTypeProvider.getModel_ValuesSTRINGTerminalRuleCall_2_1_1_0ElementType());
						}
						lv_values_6_0=RULE_STRING
						{
							doneLeaf(lv_values_6_0);
						}
					)
				)
			)*
			{
				markLeaf(elementTypeProvider.getModel_RightSquareBracketKeyword_2_2ElementType());
			}
			otherlv_7=']'
			{
				doneLeaf(otherlv_7);
			}
		)*
		(
			{
				markLeaf(elementTypeProvider.getModel_SubModelKeyword_3_0ElementType());
			}
			otherlv_8='subModel'
			{
				doneLeaf(otherlv_8);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getModel_SubModelSubModelParserRuleCall_3_1_0ElementType());
					}
					lv_subModel_9_0=ruleSubModel
					{
						doneComposite();
					}
				)
			)
		)?
	)
;

//Entry rule entryRuleSubModel
entryRuleSubModel:
	{ markComposite(elementTypeProvider.getSubModelElementType()); }
	ruleSubModel
	EOF;

// Rule SubModel
ruleSubModel:
	(
		(
			{
				precedeComposite(elementTypeProvider.getSubModel_SubModelAction_0ElementType());
				doneComposite();
			}
		)
		(
			{
				markLeaf(elementTypeProvider.getSubModel_DigitOneKeyword_1_0ElementType());
			}
			otherlv_1='1'
			{
				doneLeaf(otherlv_1);
			}
			{
				markLeaf(elementTypeProvider.getSubModel_DigitTwoKeyword_1_1ElementType());
			}
			otherlv_2='2'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getSubModel_StringsSTRINGTerminalRuleCall_1_2_0ElementType());
					}
					lv_strings_3_0=RULE_STRING
					{
						doneLeaf(lv_strings_3_0);
					}
				)
			)?
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
