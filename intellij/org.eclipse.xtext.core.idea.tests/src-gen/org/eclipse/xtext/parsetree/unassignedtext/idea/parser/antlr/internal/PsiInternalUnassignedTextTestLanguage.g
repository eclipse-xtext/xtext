/*
 * generated by Xtext
 */
grammar PsiInternalUnassignedTextTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parsetree.unassignedtext.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.unassignedtext.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parsetree.unassignedtext.idea.lang.UnassignedTextTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parsetree.unassignedtext.services.UnassignedTextTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected UnassignedTextTestLanguageGrammarAccess grammarAccess;

	protected UnassignedTextTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalUnassignedTextTestLanguageParser(PsiBuilder builder, TokenStream input, UnassignedTextTestLanguageElementTypeProvider elementTypeProvider, UnassignedTextTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	EOF;

// Rule Model
ruleModel:
	(
		{
			markComposite(elementTypeProvider.getModel_CaseInsensitiveKeywordRuleParserRuleCall_0ElementType());
		}
		ruleCaseInsensitiveKeywordRule
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getModel_PluralRuleParserRuleCall_1ElementType());
		}
		rulePluralRule
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getModel_MultiRuleParserRuleCall_2ElementType());
		}
		ruleMultiRule
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getModel_DatatypeRuleParserRuleCall_3ElementType());
		}
		ruleDatatypeRule
		{
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getModel_CommonTerminalsRuleParserRuleCall_4ElementType());
		}
		ruleCommonTerminalsRule
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleCaseInsensitiveKeywordRule
entryRuleCaseInsensitiveKeywordRule:
	{ markComposite(elementTypeProvider.getCaseInsensitiveKeywordRuleElementType()); }
	ruleCaseInsensitiveKeywordRule
	EOF;

// Rule CaseInsensitiveKeywordRule
ruleCaseInsensitiveKeywordRule:
	(
		{
			markLeaf(elementTypeProvider.getCaseInsensitiveKeywordRule_CaseInsensitiveKeywordTerminalRuleCall_0ElementType());
		}
		this_CaseInsensitiveKeyword_0=RULE_CASEINSENSITIVEKEYWORD
		{
			doneLeaf(this_CaseInsensitiveKeyword_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getCaseInsensitiveKeywordRule_ValINTTerminalRuleCall_1_0ElementType());
				}
				lv_val_1_0=RULE_INT
				{
					doneLeaf(lv_val_1_0);
				}
			)
		)
	)
;

//Entry rule entryRulePluralRule
entryRulePluralRule:
	{ markComposite(elementTypeProvider.getPluralRuleElementType()); }
	rulePluralRule
	EOF;

// Rule PluralRule
rulePluralRule:
	(
		{
			markLeaf(elementTypeProvider.getPluralRule_ContentsKeyword_0ElementType());
		}
		otherlv_0='contents:'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getPluralRule_CountINTTerminalRuleCall_1_0ElementType());
				}
				lv_count_1_0=RULE_INT
				{
					doneLeaf(lv_count_1_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getPluralRule_PluralTerminalRuleCall_2ElementType());
		}
		this_Plural_2=RULE_PLURAL
		{
			doneLeaf(this_Plural_2);
		}
	)
;

//Entry rule entryRuleMultiRule
entryRuleMultiRule:
	{ markComposite(elementTypeProvider.getMultiRuleElementType()); }
	ruleMultiRule
	EOF;

// Rule MultiRule
ruleMultiRule:
	(
		{
			markLeaf(elementTypeProvider.getMultiRule_MultiKeyword_0ElementType());
		}
		otherlv_0='multi'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getMultiRule_ValINTTerminalRuleCall_1_0ElementType());
				}
				lv_val_1_0=RULE_INT
				{
					doneLeaf(lv_val_1_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getMultiRule_MultiTerminalRuleCall_2ElementType());
		}
		this_Multi_2=RULE_MULTI
		{
			doneLeaf(this_Multi_2);
		}
		{
			markLeaf(elementTypeProvider.getMultiRule_MultiTerminalRuleCall_3ElementType());
		}
		this_Multi_3=RULE_MULTI
		{
			doneLeaf(this_Multi_3);
		}
		{
			markLeaf(elementTypeProvider.getMultiRule_MultiTerminalRuleCall_4ElementType());
		}
		this_Multi_4=RULE_MULTI
		{
			doneLeaf(this_Multi_4);
		}
	)
;

//Entry rule entryRuleDatatypeRule
entryRuleDatatypeRule:
	{ markComposite(elementTypeProvider.getDatatypeRuleElementType()); }
	ruleDatatypeRule
	EOF;

// Rule DatatypeRule
ruleDatatypeRule:
	(
		{
			markLeaf(elementTypeProvider.getDatatypeRule_DatatypeKeyword_0ElementType());
		}
		otherlv_0='datatype'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getDatatypeRule_ValINTTerminalRuleCall_1_0ElementType());
				}
				lv_val_1_0=RULE_INT
				{
					doneLeaf(lv_val_1_0);
				}
			)
		)
		{
			markComposite(elementTypeProvider.getDatatypeRule_DatatypeParserRuleCall_2ElementType());
		}
		ruleDatatype
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleDatatype
entryRuleDatatype:
	{ markComposite(elementTypeProvider.getDatatypeElementType()); }
	ruleDatatype
	EOF;

// Rule Datatype
ruleDatatype:
	(
		{
			markLeaf(elementTypeProvider.getDatatype_StrKeyword_0ElementType());
		}
		kw='str'
		{
			doneLeaf(kw);
		}
		    |
		{
			markLeaf(elementTypeProvider.getDatatype_INTTerminalRuleCall_1ElementType());
		}
		this_INT_1=RULE_INT
		{
			doneLeaf(this_INT_1);
		}
		    |
		{
			markComposite(elementTypeProvider.getDatatype_Datatype2ParserRuleCall_2ElementType());
		}
		ruleDatatype2
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleDatatype2
entryRuleDatatype2:
	{ markComposite(elementTypeProvider.getDatatype2ElementType()); }
	ruleDatatype2
	EOF;

// Rule Datatype2
ruleDatatype2:
	{
		markLeaf(elementTypeProvider.getDatatype2_STRINGTerminalRuleCallElementType());
	}
	this_STRING_0=RULE_STRING
	{
		doneLeaf(this_STRING_0);
	}
;

//Entry rule entryRuleCommonTerminalsRule
entryRuleCommonTerminalsRule:
	{ markComposite(elementTypeProvider.getCommonTerminalsRuleElementType()); }
	ruleCommonTerminalsRule
	EOF;

// Rule CommonTerminalsRule
ruleCommonTerminalsRule:
	(
		{
			markLeaf(elementTypeProvider.getCommonTerminalsRule_TerminalsKeyword_0ElementType());
		}
		otherlv_0='terminals'
		{
			doneLeaf(otherlv_0);
		}
		{
			markLeaf(elementTypeProvider.getCommonTerminalsRule_IDTerminalRuleCall_1ElementType());
		}
		this_ID_1=RULE_ID
		{
			doneLeaf(this_ID_1);
		}
		{
			markLeaf(elementTypeProvider.getCommonTerminalsRule_INTTerminalRuleCall_2ElementType());
		}
		this_INT_2=RULE_INT
		{
			doneLeaf(this_INT_2);
		}
		{
			markLeaf(elementTypeProvider.getCommonTerminalsRule_STRINGTerminalRuleCall_3ElementType());
		}
		this_STRING_3=RULE_STRING
		{
			doneLeaf(this_STRING_3);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getCommonTerminalsRule_ValIDTerminalRuleCall_4_0ElementType());
				}
				lv_val_4_0=RULE_ID
				{
					doneLeaf(lv_val_4_0);
				}
			)
		)
	)
;

RULE_CASEINSENSITIVEKEYWORD : ('k'|'K') ('e'|'E') ('y'|'Y') ('w'|'W') ('o'|'O') ('r'|'R') ('d'|'D');

RULE_PLURAL : ('item'|'items');

RULE_MULTI : 'a' 'b'? 'c'+ 'd'* ('e'|'f') (('g'|'h')|'i'+) RULE_MULTI2 '0'..'9' ('0'..'9')+;

RULE_MULTI2 : 'j';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
