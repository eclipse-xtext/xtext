/*
 * generated by Xtext
 */
grammar PsiInternalTransientValuesTest;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parsetree.transientvalues.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.transientvalues.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parsetree.transientvalues.idea.lang.TransientValuesTestElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parsetree.transientvalues.services.TransientValuesTestGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected TransientValuesTestGrammarAccess grammarAccess;

	protected TransientValuesTestElementTypeProvider elementTypeProvider;

	public PsiInternalTransientValuesTestParser(PsiBuilder builder, TokenStream input, TransientValuesTestElementTypeProvider elementTypeProvider, TransientValuesTestGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Root";
	}

}

//Entry rule entryRuleRoot
entryRuleRoot:
	{ markComposite(elementTypeProvider.getRootElementType()); }
	ruleRoot
	EOF;

// Rule Root
ruleRoot:
	(
		{
			markLeaf(elementTypeProvider.getRoot_TestKeyword_0ElementType());
		}
		otherlv_0='test'
		{
			doneLeaf(otherlv_0);
		}
		(
			{
				markComposite(elementTypeProvider.getRoot_TestRequiredParserRuleCall_1_0ElementType());
			}
			ruleTestRequired
			{
				doneComposite();
			}
			    |
			{
				markComposite(elementTypeProvider.getRoot_TestOptionalParserRuleCall_1_1ElementType());
			}
			ruleTestOptional
			{
				doneComposite();
			}
			    |
			{
				markComposite(elementTypeProvider.getRoot_TestListParserRuleCall_1_2ElementType());
			}
			ruleTestList
			{
				doneComposite();
			}
		)
	)
;

//Entry rule entryRuleTestRequired
entryRuleTestRequired:
	{ markComposite(elementTypeProvider.getTestRequiredElementType()); }
	ruleTestRequired
	EOF;

// Rule TestRequired
ruleTestRequired:
	(
		(
			{
				precedeComposite(elementTypeProvider.getTestRequired_TestRequiredAction_0ElementType());
				doneComposite();
			}
		)
		{
			markLeaf(elementTypeProvider.getTestRequired_RequiredKeyword_1ElementType());
		}
		otherlv_1='required'
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getTestRequired_Required1INTTerminalRuleCall_2_0ElementType());
				}
				lv_required1_2_0=RULE_INT
				{
					doneLeaf(lv_required1_2_0);
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getTestRequired_Required2INTTerminalRuleCall_3_0ElementType());
				}
				lv_required2_3_0=RULE_INT
				{
					doneLeaf(lv_required2_3_0);
				}
			)
		)
	)
;

//Entry rule entryRuleTestOptional
entryRuleTestOptional:
	{ markComposite(elementTypeProvider.getTestOptionalElementType()); }
	ruleTestOptional
	EOF;

// Rule TestOptional
ruleTestOptional:
	(
		(
			{
				precedeComposite(elementTypeProvider.getTestOptional_TestOptionalAction_0ElementType());
				doneComposite();
			}
		)
		{
			markLeaf(elementTypeProvider.getTestOptional_OptionalKeyword_1ElementType());
		}
		otherlv_1='optional'
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getTestOptional_Opt1INTTerminalRuleCall_2_0ElementType());
				}
				lv_opt1_2_0=RULE_INT
				{
					doneLeaf(lv_opt1_2_0);
				}
			)
		)?
		(
			{
				markLeaf(elementTypeProvider.getTestOptional_ColonKeyword_3_0ElementType());
			}
			otherlv_3=':'
			{
				doneLeaf(otherlv_3);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getTestOptional_Opt2INTTerminalRuleCall_3_1_0ElementType());
					}
					lv_opt2_4_0=RULE_INT
					{
						doneLeaf(lv_opt2_4_0);
					}
				)
			)
		)?
	)
;

//Entry rule entryRuleTestList
entryRuleTestList:
	{ markComposite(elementTypeProvider.getTestListElementType()); }
	ruleTestList
	EOF;

// Rule TestList
ruleTestList:
	(
		(
			{
				precedeComposite(elementTypeProvider.getTestList_TestListAction_0ElementType());
				doneComposite();
			}
		)
		{
			markLeaf(elementTypeProvider.getTestList_ListKeyword_1ElementType());
		}
		otherlv_1='list'
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getTestList_ItemINTTerminalRuleCall_2_0ElementType());
				}
				lv_item_2_0=RULE_INT
				{
					doneLeaf(lv_item_2_0);
				}
			)
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
