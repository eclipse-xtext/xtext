/*
 * generated by Xtext
 */
grammar PsiInternalBug288432TestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parser.assignments.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.assignments.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.assignments.idea.lang.Bug288432TestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.assignments.services.Bug288432TestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected Bug288432TestLanguageGrammarAccess grammarAccess;

	protected Bug288432TestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalBug288432TestLanguageParser(PsiBuilder builder, TokenStream input, Bug288432TestLanguageElementTypeProvider elementTypeProvider, Bug288432TestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Body";
	}

}

//Entry rule entryRuleBody
entryRuleBody:
	{ markComposite(elementTypeProvider.getBodyElementType()); }
	ruleBody
	EOF;

// Rule Body
ruleBody:
	(
		(
			{
				markLeaf(elementTypeProvider.getBody_LeftParenthesisKeyword_0_0ElementType());
			}
			otherlv_0='('
			{
				doneLeaf(otherlv_0);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getBody_ParameterParameterParserRuleCall_0_1_0ElementType());
					}
					lv_parameter_1_0=ruleParameter
					{
						doneComposite();
					}
				)
			)
			(
				{
					markLeaf(elementTypeProvider.getBody_CommaKeyword_0_2_0ElementType());
				}
				otherlv_2=','
				{
					doneLeaf(otherlv_2);
				}
				(
					(
						{
							markComposite(elementTypeProvider.getBody_ParameterParameterParserRuleCall_0_2_1_0ElementType());
						}
						lv_parameter_3_0=ruleParameter
						{
							doneComposite();
						}
					)
				)
			)*
			{
				markLeaf(elementTypeProvider.getBody_RightParenthesisKeyword_0_3ElementType());
			}
			otherlv_4=')'
			{
				doneLeaf(otherlv_4);
			}
		)?
		{
			markLeaf(elementTypeProvider.getBody_BodyKeyword_1ElementType());
		}
		otherlv_5='body'
		{
			doneLeaf(otherlv_5);
		}
		(
			(
				(
					{
						markComposite(elementTypeProvider.getBody_ContentContentParserRuleCall_2_0_0ElementType());
					}
					lv_content_6_1=ruleContent
					{
						doneComposite();
					}
					    |
					{
						markComposite(elementTypeProvider.getBody_ContentParameterRefParserRuleCall_2_0_1ElementType());
					}
					lv_content_6_2=ruleParameterRef
					{
						doneComposite();
					}
				)
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getBody_FooFooParserRuleCall_3_0ElementType());
				}
				lv_foo_7_0=ruleFoo
				{
					doneComposite();
				}
			)
		)+
		{
			markLeaf(elementTypeProvider.getBody_EndBodyKeyword_4ElementType());
		}
		otherlv_8='end body'
		{
			doneLeaf(otherlv_8);
		}
	)
;

//Entry rule entryRuleFoo
entryRuleFoo:
	{ markComposite(elementTypeProvider.getFooElementType()); }
	ruleFoo
	EOF;

// Rule Foo
ruleFoo:
	(
		(
			{
				markLeaf(elementTypeProvider.getFoo_FooValueSTRINGTerminalRuleCall_0ElementType());
			}
			lv_fooValue_0_0=RULE_STRING
			{
				doneLeaf(lv_fooValue_0_0);
			}
		)
	)
;

//Entry rule entryRuleContent
entryRuleContent:
	{ markComposite(elementTypeProvider.getContentElementType()); }
	ruleContent
	EOF;

// Rule Content
ruleContent:
	(
		{
			markLeaf(elementTypeProvider.getContent_ContentKeyword_0ElementType());
		}
		otherlv_0='content'
		{
			doneLeaf(otherlv_0);
		}
		{
			markComposite(elementTypeProvider.getContent_MyElementParserRuleCall_1ElementType());
		}
		ruleMyElement
		{
			doneComposite();
		}
		{
			markLeaf(elementTypeProvider.getContent_EndContentKeyword_2ElementType());
		}
		otherlv_2='end content'
		{
			doneLeaf(otherlv_2);
		}
	)
;

//Entry rule entryRuleMyElement
entryRuleMyElement:
	{ markComposite(elementTypeProvider.getMyElementElementType()); }
	ruleMyElement
	EOF;

// Rule MyElement
ruleMyElement:
	(
		{
			markLeaf(elementTypeProvider.getMyElement_ElementKeyword_0ElementType());
		}
		otherlv_0='element'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				(
					{
						markComposite(elementTypeProvider.getMyElement_BarMyIntParserRuleCall_1_0_0ElementType());
					}
					lv_bar_1_1=ruleMyInt
					{
						doneComposite();
					}
					    |
					{
						markComposite(elementTypeProvider.getMyElement_BarParameterRefParserRuleCall_1_0_1ElementType());
					}
					lv_bar_1_2=ruleParameterRef
					{
						doneComposite();
					}
				)
			)
		)
	)
;

//Entry rule entryRuleParameter
entryRuleParameter:
	{ markComposite(elementTypeProvider.getParameterElementType()); }
	ruleParameter
	EOF;

// Rule Parameter
ruleParameter:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getParameter_NameIDTerminalRuleCall_0_0ElementType());
				}
				lv_name_0_0=RULE_ID
				{
					doneLeaf(lv_name_0_0);
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getParameter_ValueParameterObjectCrossReference_1_0ElementType());
				}
				otherlv_1=RULE_ID
				{
					doneLeaf(otherlv_1);
				}
			)
		)?
	)
;

//Entry rule entryRuleParameterRef
entryRuleParameterRef:
	{ markComposite(elementTypeProvider.getParameterRefElementType()); }
	ruleParameterRef
	EOF;

// Rule ParameterRef
ruleParameterRef:
	(
		(
			{
				markLeaf(elementTypeProvider.getParameterRef_ParameterParameterCrossReference_0ElementType());
			}
			otherlv_0=RULE_ID
			{
				doneLeaf(otherlv_0);
			}
		)
	)
;

//Entry rule entryRuleMyInt
entryRuleMyInt:
	{ markComposite(elementTypeProvider.getMyIntElementType()); }
	ruleMyInt
	EOF;

// Rule MyInt
ruleMyInt:
	(
		(
			{
				markLeaf(elementTypeProvider.getMyInt_IntINTTerminalRuleCall_0ElementType());
			}
			lv_int_0_0=RULE_INT
			{
				doneLeaf(lv_int_0_0);
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
