/*
 * generated by Xtext
 */
grammar PsiInternalAssignmentsTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parser.assignments.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.assignments.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.assignments.idea.lang.AssignmentsTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.assignments.services.AssignmentsTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected AssignmentsTestLanguageGrammarAccess grammarAccess;

	protected AssignmentsTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalAssignmentsTestLanguageParser(PsiBuilder builder, TokenStream input, AssignmentsTestLanguageElementTypeProvider elementTypeProvider, AssignmentsTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getModel_SimpleKeyword_0_0ElementType());
			}
			otherlv_0='simple'
			{
				doneLeaf(otherlv_0);
			}
			(
				(
					(
						{
							markComposite(elementTypeProvider.getModel_SingleSingleValueParserRuleCall_0_1_0_0ElementType());
						}
						lv_single_1_0=ruleSingleValue
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
				    |
				(
					(
						{
							markComposite(elementTypeProvider.getModel_MultiMultiValueParserRuleCall_0_1_1_0ElementType());
						}
						lv_multi_2_0=ruleMultiValue
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
				    |
				(
					(
						{
							markComposite(elementTypeProvider.getModel_SingleSingleDatatypeParserRuleCall_0_1_2_0ElementType());
						}
						lv_single_3_0=ruleSingleDatatype
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
				    |
				(
					(
						{
							markComposite(elementTypeProvider.getModel_MultiMultiDatatypeParserRuleCall_0_1_3_0ElementType());
						}
						lv_multi_4_0=ruleMultiDatatype
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getModel_ComplexKeyword_1_0ElementType());
			}
			otherlv_5='complex'
			{
				doneLeaf(otherlv_5);
			}
			(
				(
					(
						{
							markComposite(elementTypeProvider.getModel_ObjectSingleValueParserRuleCall_1_1_0_0ElementType());
						}
						lv_object_6_1=ruleSingleValue
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						    |
						{
							markComposite(elementTypeProvider.getModel_ObjectMultiValueParserRuleCall_1_1_0_1ElementType());
						}
						lv_object_6_2=ruleMultiValue
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						    |
						{
							markComposite(elementTypeProvider.getModel_ObjectSingleDatatypeParserRuleCall_1_1_0_2ElementType());
						}
						lv_object_6_3=ruleSingleDatatype
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						    |
						{
							markComposite(elementTypeProvider.getModel_ObjectMultiDatatypeParserRuleCall_1_1_0_3ElementType());
						}
						lv_object_6_4=ruleMultiDatatype
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
			)
		)
	)
;

//Entry rule entryRuleSingleValue
entryRuleSingleValue returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSingleValueElementType()); }
	iv_ruleSingleValue=ruleSingleValue
	{ $current=$iv_ruleSingleValue.current; }
	EOF;

// Rule SingleValue
ruleSingleValue returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getSingleValue_IdKeyword_0_0ElementType());
			}
			otherlv_0='id'
			{
				doneLeaf(otherlv_0);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getSingleValue_ValueIDTerminalRuleCall_0_1_0ElementType());
					}
					lv_value_1_0=RULE_ID
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_value_1_0);
					}
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getSingleValue_AlternativeKeyword_1_0ElementType());
			}
			otherlv_2='alternative'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					(
						{
							markLeaf(elementTypeProvider.getSingleValue_ValueIDTerminalRuleCall_1_1_0_0ElementType());
						}
						lv_value_3_1=RULE_ID
						{
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						{
							doneLeaf(lv_value_3_1);
						}
						    |
						{
							markLeaf(elementTypeProvider.getSingleValue_ValueSTRINGTerminalRuleCall_1_1_0_1ElementType());
						}
						lv_value_3_2=RULE_STRING
						{
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						{
							doneLeaf(lv_value_3_2);
						}
					)
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getSingleValue_StringKeyword_2_0ElementType());
			}
			otherlv_4='string'
			{
				doneLeaf(otherlv_4);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getSingleValue_ValueSTRINGTerminalRuleCall_2_1_0ElementType());
					}
					lv_value_5_0=RULE_STRING
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_value_5_0);
					}
				)
			)
		)
	)
;

//Entry rule entryRuleMultiValue
entryRuleMultiValue returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getMultiValueElementType()); }
	iv_ruleMultiValue=ruleMultiValue
	{ $current=$iv_ruleMultiValue.current; }
	EOF;

// Rule MultiValue
ruleMultiValue returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getMultiValue_IdsKeyword_0_0ElementType());
			}
			otherlv_0='ids'
			{
				doneLeaf(otherlv_0);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getMultiValue_ValueIDTerminalRuleCall_0_1_0ElementType());
					}
					lv_value_1_0=RULE_ID
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_value_1_0);
					}
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getMultiValue_AlternativesKeyword_1_0ElementType());
			}
			otherlv_2='alternatives'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					(
						{
							markLeaf(elementTypeProvider.getMultiValue_ValueIDTerminalRuleCall_1_1_0_0ElementType());
						}
						lv_value_3_1=RULE_ID
						{
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						{
							doneLeaf(lv_value_3_1);
						}
						    |
						{
							markLeaf(elementTypeProvider.getMultiValue_ValueSTRINGTerminalRuleCall_1_1_0_1ElementType());
						}
						lv_value_3_2=RULE_STRING
						{
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						{
							doneLeaf(lv_value_3_2);
						}
					)
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getMultiValue_StringsKeyword_2_0ElementType());
			}
			otherlv_4='strings'
			{
				doneLeaf(otherlv_4);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getMultiValue_ValueSTRINGTerminalRuleCall_2_1_0ElementType());
					}
					lv_value_5_0=RULE_STRING
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_value_5_0);
					}
				)
			)
		)
	)
;

//Entry rule entryRuleSingleDatatype
entryRuleSingleDatatype returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSingleDatatypeElementType()); }
	iv_ruleSingleDatatype=ruleSingleDatatype
	{ $current=$iv_ruleSingleDatatype.current; }
	EOF;

// Rule SingleDatatype
ruleSingleDatatype returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getSingleDatatype_DatatypeidKeyword_0_0ElementType());
			}
			otherlv_0='datatypeid'
			{
				doneLeaf(otherlv_0);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getSingleDatatype_ValueIdDatatypeParserRuleCall_0_1_0ElementType());
					}
					lv_value_1_0=ruleIdDatatype
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getSingleDatatype_DatatypealternativeKeyword_1_0ElementType());
			}
			otherlv_2='datatypealternative'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					(
						{
							markComposite(elementTypeProvider.getSingleDatatype_ValueIdDatatypeParserRuleCall_1_1_0_0ElementType());
						}
						lv_value_3_1=ruleIdDatatype
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						    |
						{
							markComposite(elementTypeProvider.getSingleDatatype_ValueStringDatatypeParserRuleCall_1_1_0_1ElementType());
						}
						lv_value_3_2=ruleStringDatatype
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getSingleDatatype_DatatypestringKeyword_2_0ElementType());
			}
			otherlv_4='datatypestring'
			{
				doneLeaf(otherlv_4);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getSingleDatatype_ValueStringDatatypeParserRuleCall_2_1_0ElementType());
					}
					lv_value_5_0=ruleStringDatatype
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)
	)
;

//Entry rule entryRuleMultiDatatype
entryRuleMultiDatatype returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getMultiDatatypeElementType()); }
	iv_ruleMultiDatatype=ruleMultiDatatype
	{ $current=$iv_ruleMultiDatatype.current; }
	EOF;

// Rule MultiDatatype
ruleMultiDatatype returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getMultiDatatype_DatatypeidsKeyword_0_0ElementType());
			}
			otherlv_0='datatypeids'
			{
				doneLeaf(otherlv_0);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getMultiDatatype_ValueIdDatatypeParserRuleCall_0_1_0ElementType());
					}
					lv_value_1_0=ruleIdDatatype
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getMultiDatatype_DatatypealternativesKeyword_1_0ElementType());
			}
			otherlv_2='datatypealternatives'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					(
						{
							markComposite(elementTypeProvider.getMultiDatatype_ValueIdDatatypeParserRuleCall_1_1_0_0ElementType());
						}
						lv_value_3_1=ruleIdDatatype
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						    |
						{
							markComposite(elementTypeProvider.getMultiDatatype_ValueStringDatatypeParserRuleCall_1_1_0_1ElementType());
						}
						lv_value_3_2=ruleStringDatatype
						{
							doneComposite();
							if(!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
					)
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getMultiDatatype_DatatypestringsKeyword_2_0ElementType());
			}
			otherlv_4='datatypestrings'
			{
				doneLeaf(otherlv_4);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getMultiDatatype_ValueStringDatatypeParserRuleCall_2_1_0ElementType());
					}
					lv_value_5_0=ruleStringDatatype
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)
	)
;

//Entry rule entryRuleIdDatatype
entryRuleIdDatatype returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getIdDatatypeElementType()); }
	iv_ruleIdDatatype=ruleIdDatatype
	{ $current=$iv_ruleIdDatatype.current; }
	EOF;

// Rule IdDatatype
ruleIdDatatype returns [Boolean current=false]
:
	{
		markLeaf(elementTypeProvider.getIdDatatype_IDTerminalRuleCallElementType());
	}
	this_ID_0=RULE_ID
	{
		doneLeaf(this_ID_0);
	}
;

//Entry rule entryRuleStringDatatype
entryRuleStringDatatype returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getStringDatatypeElementType()); }
	iv_ruleStringDatatype=ruleStringDatatype
	{ $current=$iv_ruleStringDatatype.current; }
	EOF;

// Rule StringDatatype
ruleStringDatatype returns [Boolean current=false]
:
	{
		markLeaf(elementTypeProvider.getStringDatatype_STRINGTerminalRuleCallElementType());
	}
	this_STRING_0=RULE_STRING
	{
		doneLeaf(this_STRING_0);
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
