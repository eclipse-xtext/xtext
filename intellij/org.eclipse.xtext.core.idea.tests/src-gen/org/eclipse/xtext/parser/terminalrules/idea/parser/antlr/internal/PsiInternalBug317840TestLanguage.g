/*
 * generated by Xtext
 */
grammar PsiInternalBug317840TestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parser.terminalrules.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.terminalrules.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.terminalrules.idea.lang.Bug317840TestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.terminalrules.services.Bug317840TestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected Bug317840TestLanguageGrammarAccess grammarAccess;

	protected Bug317840TestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalBug317840TestLanguageParser(PsiBuilder builder, TokenStream input, Bug317840TestLanguageElementTypeProvider elementTypeProvider, Bug317840TestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	EOF;

// Rule Model
ruleModel:
	(
		(
			{
				markComposite(elementTypeProvider.getModel_ElementsElementParserRuleCall_0ElementType());
			}
			lv_elements_0_0=ruleElement
			{
				doneComposite();
			}
		)
	)*
;

//Entry rule entryRuleElement
entryRuleElement:
	{ markComposite(elementTypeProvider.getElementElementType()); }
	ruleElement
	EOF;

// Rule Element
ruleElement:
	(
		{
			markLeaf(elementTypeProvider.getElement_ElementKeyword_0ElementType());
		}
		otherlv_0='element'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getElement_FirstNamedParserRuleCall_1_0ElementType());
				}
				lv_first_1_0=ruleNamed
				{
					doneComposite();
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getElement_SecondNamedParserRuleCall_2_0ElementType());
				}
				lv_second_2_0=ruleNamed
				{
					doneComposite();
				}
			)
		)?
		(
			(
				(
					{
						markComposite(elementTypeProvider.getElement_ThirdNamedParserRuleCall_3_0_0ElementType());
					}
					lv_third_3_0=ruleNamed
					{
						doneComposite();
					}
				)
			)
			(
				(
					{
						markComposite(elementTypeProvider.getElement_ForthNamedParserRuleCall_3_1_0ElementType());
					}
					lv_forth_4_0=ruleNamed
					{
						doneComposite();
					}
				)
			)
		)*
	)
;

//Entry rule entryRuleNamed
entryRuleNamed:
	{ markComposite(elementTypeProvider.getNamedElementType()); }
	ruleNamed
	EOF;

// Rule Named
ruleNamed:
	(
		(
			{
				markComposite(elementTypeProvider.getNamed_NameNAMEParserRuleCall_0ElementType());
			}
			lv_name_0_0=ruleNAME
			{
				doneComposite();
			}
		)
	)
;

//Entry rule entryRuleNAME
entryRuleNAME@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ markComposite(elementTypeProvider.getNAMEElementType()); }
	ruleNAME
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule NAME
ruleNAME@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	(
		{
			markLeaf(elementTypeProvider.getNAME_IDTerminalRuleCall_0ElementType());
		}
		this_ID_0=RULE_ID
		{
			doneLeaf(this_ID_0);
		}
		(
			{
				markLeaf(elementTypeProvider.getNAME_FullStopKeyword_1_0ElementType());
			}
			kw='.'
			{
				doneLeaf(kw);
			}
			{
				markLeaf(elementTypeProvider.getNAME_IDTerminalRuleCall_1_1ElementType());
			}
			this_ID_2=RULE_ID
			{
				doneLeaf(this_ID_2);
			}
		)*
	)
;
finally {
	myHiddenTokenState.restore();
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
