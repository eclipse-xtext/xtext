/*
 * generated by Xtext
 */
grammar PsiInternalHiddenTerminalsTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parser.terminalrules.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.terminalrules.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.terminalrules.idea.lang.HiddenTerminalsTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.terminalrules.services.HiddenTerminalsTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected HiddenTerminalsTestLanguageGrammarAccess grammarAccess;

	protected HiddenTerminalsTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalHiddenTerminalsTestLanguageParser(PsiBuilder builder, TokenStream input, HiddenTerminalsTestLanguageElementTypeProvider elementTypeProvider, HiddenTerminalsTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getModel_WithoutHiddensParserRuleCall_0ElementType());
		}
		this_WithoutHiddens_0=ruleWithoutHiddens
		{
			$current = $this_WithoutHiddens_0.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getModel_WithHiddensParserRuleCall_1ElementType());
		}
		this_WithHiddens_1=ruleWithHiddens
		{
			$current = $this_WithHiddens_1.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getModel_OverridingHiddensParserRuleCall_2ElementType());
		}
		this_OverridingHiddens_2=ruleOverridingHiddens
		{
			$current = $this_OverridingHiddens_2.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getModel_InheritingHiddensParserRuleCall_3ElementType());
		}
		this_InheritingHiddens_3=ruleInheritingHiddens
		{
			$current = $this_InheritingHiddens_3.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getModel_DatatypeHiddensParserRuleCall_4ElementType());
		}
		this_DatatypeHiddens_4=ruleDatatypeHiddens
		{
			$current = $this_DatatypeHiddens_4.current;
			doneComposite();
		}
	)
;

//Entry rule entryRuleWithoutHiddens
entryRuleWithoutHiddens returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getWithoutHiddensElementType()); }
	iv_ruleWithoutHiddens=ruleWithoutHiddens
	{ $current=$iv_ruleWithoutHiddens.current; }
	EOF;

// Rule WithoutHiddens
ruleWithoutHiddens returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getWithoutHiddens_WithoutKeyword_0ElementType());
		}
		otherlv_0='without'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getWithoutHiddens_SpacesWSTerminalRuleCall_1_0ElementType());
				}
				lv_spaces_1_0=RULE_WS
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_spaces_1_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getWithoutHiddens_HiddensKeyword_2ElementType());
		}
		otherlv_2='hiddens'
		{
			doneLeaf(otherlv_2);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getWithoutHiddens_SpacesWSTerminalRuleCall_3_0ElementType());
				}
				lv_spaces_3_0=RULE_WS
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_spaces_3_0);
				}
			)
		)?
		(
			(
				{
					markLeaf(elementTypeProvider.getWithoutHiddens_ValidSemicolonKeyword_4_0ElementType());
				}
				lv_valid_4_0=';'
				{
					doneLeaf(lv_valid_4_0);
				}
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

//Entry rule entryRuleWithHiddens
entryRuleWithHiddens returns [Boolean current=false]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}:
	{ markComposite(elementTypeProvider.getWithHiddensElementType()); }
	iv_ruleWithHiddens=ruleWithHiddens
	{ $current=$iv_ruleWithHiddens.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule WithHiddens
ruleWithHiddens returns [Boolean current=false]
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}:
	(
		{
			markLeaf(elementTypeProvider.getWithHiddens_WithKeyword_0ElementType());
		}
		otherlv_0='with'
		{
			doneLeaf(otherlv_0);
		}
		{
			markLeaf(elementTypeProvider.getWithHiddens_HiddensKeyword_1ElementType());
		}
		otherlv_1='hiddens'
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getWithHiddens_ValidSemicolonKeyword_2_0ElementType());
				}
				lv_valid_2_0=';'
				{
					doneLeaf(lv_valid_2_0);
				}
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

//Entry rule entryRuleOverridingHiddens
entryRuleOverridingHiddens returns [Boolean current=false]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}:
	{ markComposite(elementTypeProvider.getOverridingHiddensElementType()); }
	iv_ruleOverridingHiddens=ruleOverridingHiddens
	{ $current=$iv_ruleOverridingHiddens.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule OverridingHiddens
ruleOverridingHiddens returns [Boolean current=false]
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}:
	(
		{
			markLeaf(elementTypeProvider.getOverridingHiddens_OverridingKeyword_0ElementType());
		}
		otherlv_0='overriding'
		{
			doneLeaf(otherlv_0);
		}
		{
			markLeaf(elementTypeProvider.getOverridingHiddens_HiddensKeyword_1ElementType());
		}
		otherlv_1='hiddens'
		{
			doneLeaf(otherlv_1);
		}
		{
			markLeaf(elementTypeProvider.getOverridingHiddens_LeftParenthesisKeyword_2ElementType());
		}
		otherlv_2='('
		{
			doneLeaf(otherlv_2);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getOverridingHiddens_CalledOverridingHiddensCallParserRuleCall_3_0ElementType());
				}
				lv_called_3_0=ruleOverridingHiddensCall
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getOverridingHiddens_RightParenthesisKeyword_4ElementType());
		}
		otherlv_4=')'
		{
			doneLeaf(otherlv_4);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getOverridingHiddens_ValidSemicolonKeyword_5_0ElementType());
				}
				lv_valid_5_0=';'
				{
					doneLeaf(lv_valid_5_0);
				}
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

//Entry rule entryRuleOverridingHiddensCall
entryRuleOverridingHiddensCall returns [Boolean current=false]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ markComposite(elementTypeProvider.getOverridingHiddensCallElementType()); }
	iv_ruleOverridingHiddensCall=ruleOverridingHiddensCall
	{ $current=$iv_ruleOverridingHiddensCall.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule OverridingHiddensCall
ruleOverridingHiddensCall returns [Boolean current=false]
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	(
		{
			markLeaf(elementTypeProvider.getOverridingHiddensCall_CallKeyword_0ElementType());
		}
		otherlv_0='call'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getOverridingHiddensCall_SpacesWSTerminalRuleCall_1_0ElementType());
				}
				lv_spaces_1_0=RULE_WS
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_spaces_1_0);
				}
			)
		)?
		(
			(
				{
					markLeaf(elementTypeProvider.getOverridingHiddensCall_ValidSemicolonKeyword_2_0ElementType());
				}
				lv_valid_2_0=';'
				{
					doneLeaf(lv_valid_2_0);
				}
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

//Entry rule entryRuleInheritingHiddens
entryRuleInheritingHiddens returns [Boolean current=false]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}:
	{ markComposite(elementTypeProvider.getInheritingHiddensElementType()); }
	iv_ruleInheritingHiddens=ruleInheritingHiddens
	{ $current=$iv_ruleInheritingHiddens.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InheritingHiddens
ruleInheritingHiddens returns [Boolean current=false]
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}:
	(
		{
			markLeaf(elementTypeProvider.getInheritingHiddens_InheritingKeyword_0ElementType());
		}
		otherlv_0='inheriting'
		{
			doneLeaf(otherlv_0);
		}
		{
			markLeaf(elementTypeProvider.getInheritingHiddens_HiddensKeyword_1ElementType());
		}
		otherlv_1='hiddens'
		{
			doneLeaf(otherlv_1);
		}
		{
			markLeaf(elementTypeProvider.getInheritingHiddens_LeftParenthesisKeyword_2ElementType());
		}
		otherlv_2='('
		{
			doneLeaf(otherlv_2);
		}
		(
			(
				(
					{
						markComposite(elementTypeProvider.getInheritingHiddens_CalledInheritingHiddensCallParserRuleCall_3_0_0ElementType());
					}
					lv_called_3_0=ruleInheritingHiddensCall
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
			    |
			(
				(
					{
						markComposite(elementTypeProvider.getInheritingHiddens_HidingCalledHidingHiddensParserRuleCall_3_1_0ElementType());
					}
					lv_hidingCalled_4_0=ruleHidingHiddens
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)
		{
			markLeaf(elementTypeProvider.getInheritingHiddens_RightParenthesisKeyword_4ElementType());
		}
		otherlv_5=')'
		{
			doneLeaf(otherlv_5);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getInheritingHiddens_ValidSemicolonKeyword_5_0ElementType());
				}
				lv_valid_6_0=';'
				{
					doneLeaf(lv_valid_6_0);
				}
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

//Entry rule entryRuleDatatypeHiddens
entryRuleDatatypeHiddens returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getDatatypeHiddensElementType()); }
	iv_ruleDatatypeHiddens=ruleDatatypeHiddens
	{ $current=$iv_ruleDatatypeHiddens.current; }
	EOF;

// Rule DatatypeHiddens
ruleDatatypeHiddens returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getDatatypeHiddens_DatatypeKeyword_0ElementType());
		}
		otherlv_0='datatype'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getDatatypeHiddens_ValidDatatypeRuleParserRuleCall_1_0ElementType());
				}
				lv_valid_1_0=ruleDatatypeRule
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

//Entry rule entryRuleDatatypeRule
entryRuleDatatypeRule returns [Boolean current=false]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ markComposite(elementTypeProvider.getDatatypeRuleElementType()); }
	iv_ruleDatatypeRule=ruleDatatypeRule
	{ $current=$iv_ruleDatatypeRule.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule DatatypeRule
ruleDatatypeRule returns [Boolean current=false]
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	(
		{
			markLeaf(elementTypeProvider.getDatatypeRule_RuleKeyword_0ElementType());
		}
		kw='rule'
		{
			doneLeaf(kw);
		}
		{
			markLeaf(elementTypeProvider.getDatatypeRule_SemicolonKeyword_1ElementType());
		}
		kw=';'
		{
			doneLeaf(kw);
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

//Entry rule entryRuleHidingHiddens
entryRuleHidingHiddens returns [Boolean current=false]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ markComposite(elementTypeProvider.getHidingHiddensElementType()); }
	iv_ruleHidingHiddens=ruleHidingHiddens
	{ $current=$iv_ruleHidingHiddens.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule HidingHiddens
ruleHidingHiddens returns [Boolean current=false]
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	(
		{
			markLeaf(elementTypeProvider.getHidingHiddens_HidingKeyword_0ElementType());
		}
		otherlv_0='hiding'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getHidingHiddens_SpaceWSTerminalRuleCall_1_0ElementType());
				}
				lv_space_1_0=RULE_WS
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_space_1_0);
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getHidingHiddens_CalledInheritingHiddensCallParserRuleCall_2_0ElementType());
				}
				lv_called_2_0=ruleInheritingHiddensCall
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

//Entry rule entryRuleInheritingHiddensCall
entryRuleInheritingHiddensCall returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getInheritingHiddensCallElementType()); }
	iv_ruleInheritingHiddensCall=ruleInheritingHiddensCall
	{ $current=$iv_ruleInheritingHiddensCall.current; }
	EOF;

// Rule InheritingHiddensCall
ruleInheritingHiddensCall returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getInheritingHiddensCall_CallKeyword_0ElementType());
		}
		otherlv_0='call'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getInheritingHiddensCall_ValidSemicolonKeyword_1_0ElementType());
				}
				lv_valid_1_0=';'
				{
					doneLeaf(lv_valid_1_0);
				}
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
