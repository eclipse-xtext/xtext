/*
 * generated by Xtext
 */
grammar PsiInternalUnicodeTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parser.terminalrules.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.terminalrules.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.terminalrules.idea.lang.UnicodeTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.terminalrules.services.UnicodeTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected UnicodeTestLanguageGrammarAccess grammarAccess;

	protected UnicodeTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalUnicodeTestLanguageParser(PsiBuilder builder, TokenStream input, UnicodeTestLanguageElementTypeProvider elementTypeProvider, UnicodeTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			{
				markComposite(elementTypeProvider.getModel_StringsAbstractStringParserRuleCall_0ElementType());
			}
			lv_strings_0_0=ruleAbstractString
			{
				doneComposite();
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
		)
	)*
;

//Entry rule entryRuleAbstractString
entryRuleAbstractString returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAbstractStringElementType()); }
	iv_ruleAbstractString=ruleAbstractString
	{ $current=$iv_ruleAbstractString.current; }
	EOF;

// Rule AbstractString
ruleAbstractString returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getAbstractString_GStringParserRuleCall_0ElementType());
		}
		this_GString_0=ruleGString
		{
			$current = $this_GString_0.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getAbstractString_QuotedStringParserRuleCall_1ElementType());
		}
		this_QuotedString_1=ruleQuotedString
		{
			$current = $this_QuotedString_1.current;
			doneComposite();
		}
	)
;

//Entry rule entryRuleGString
entryRuleGString returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getGStringElementType()); }
	iv_ruleGString=ruleGString
	{ $current=$iv_ruleGString.current; }
	EOF;

// Rule GString
ruleGString returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getGString_NameGERMAN_STRINGTerminalRuleCall_0ElementType());
			}
			lv_name_0_0=RULE_GERMAN_STRING
			{
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
			{
				doneLeaf(lv_name_0_0);
			}
		)
	)
;

//Entry rule entryRuleQuotedString
entryRuleQuotedString returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getQuotedStringElementType()); }
	iv_ruleQuotedString=ruleQuotedString
	{ $current=$iv_ruleQuotedString.current; }
	EOF;

// Rule QuotedString
ruleQuotedString returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getQuotedString_NameSTRINGTerminalRuleCall_0ElementType());
			}
			lv_name_0_0=RULE_STRING
			{
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
			{
				doneLeaf(lv_name_0_0);
			}
		)
	)
;

RULE_GERMAN_STRING : ('A'..'Z'|'a'..'z'|'\u00C4'|'\u00D6'|'\u00DC'|'\u00E4'|'\u00F6'|'\u00FC'|'\u1E9E')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
