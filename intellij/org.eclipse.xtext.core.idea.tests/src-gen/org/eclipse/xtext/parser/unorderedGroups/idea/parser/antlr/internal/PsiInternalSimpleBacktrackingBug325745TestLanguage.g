/*
 * generated by Xtext
 */
grammar PsiInternalSimpleBacktrackingBug325745TestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.eclipse.xtext.parser.unorderedGroups.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.unorderedGroups.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.unorderedGroups.idea.lang.SimpleBacktrackingBug325745TestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
import org.eclipse.xtext.parser.unorderedGroups.services.SimpleBacktrackingBug325745TestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

	protected SimpleBacktrackingBug325745TestLanguageGrammarAccess grammarAccess;

	protected SimpleBacktrackingBug325745TestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalSimpleBacktrackingBug325745TestLanguageParser(PsiBuilder builder, TokenStream input, SimpleBacktrackingBug325745TestLanguageElementTypeProvider elementTypeProvider, SimpleBacktrackingBug325745TestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "DelegateModel";
	}

}

//Entry rule entryRuleDelegateModel
entryRuleDelegateModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getDelegateModelElementType()); }
	iv_ruleDelegateModel=ruleDelegateModel
	{ $current=$iv_ruleDelegateModel.current; }
	EOF;

// Rule DelegateModel
ruleDelegateModel returns [Boolean current=false]
:
	{
		/* */
	}
	{
		markComposite(elementTypeProvider.getDelegateModel_ModelParserRuleCallElementType());
	}
	this_Model_0=ruleModel
	{
		$current = $this_Model_0.current;
		doneComposite();
	}
;

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			{
				/* */
			}
			{
				precedeComposite(elementTypeProvider.getModel_ModelAction_0ElementType());
				doneComposite();
				associateWithSemanticElement();
			}
		)
		(
			(
				{
					markComposite(elementTypeProvider.getModel_FieldsElementParserRuleCall_1_0ElementType());
				}
				lv_fields_1_0=ruleElement
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)+
	)
;

//Entry rule entryRuleElement
entryRuleElement returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getElementElementType()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getElement_NameIDTerminalRuleCall_0_0ElementType());
				}
				lv_name_0_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_0_0);
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getElement_DataTypeDataTypeParserRuleCall_1_0ElementType());
				}
				lv_dataType_1_0=ruleDataType
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)?
		(
			(
				{
					markComposite(elementTypeProvider.getElement_ExpressionExpressionParserRuleCall_2_0ElementType());
				}
				lv_expression_2_0=ruleExpression
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getElement_FullStopKeyword_3ElementType());
		}
		otherlv_3='.'
		{
			doneLeaf(otherlv_3);
		}
	)
;

//Entry rule entryRuleDataType
entryRuleDataType returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getDataTypeElementType()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getDataType_BaseTypeIDTerminalRuleCall_0_0ElementType());
				}
				lv_baseType_0_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_baseType_0_0);
				}
			)
		)
		(
			{
				markLeaf(elementTypeProvider.getDataType_ColonEqualsSignKeyword_1_0ElementType());
			}
			otherlv_1=':='
			{
				doneLeaf(otherlv_1);
			}
			(
				(
					{
						markLeaf(elementTypeProvider.getDataType_DefaultValueSTRINGTerminalRuleCall_1_1_0ElementType());
					}
					lv_defaultValue_2_0=RULE_STRING
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_defaultValue_2_0);
					}
				)
			)
		)?
	)
;

//Entry rule entryRuleExpression
entryRuleExpression returns [Boolean current=false]@init {
	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
	grammarAccess.getExpressionAccess().getUnorderedGroup_1(), 
	grammarAccess.getExpressionAccess().getUnorderedGroup_3()
	);
}:
	{ markComposite(elementTypeProvider.getExpressionElementType()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;
finally {
	myUnorderedGroupState.restore();
}

// Rule Expression
ruleExpression returns [Boolean current=false]
@init {
	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
	grammarAccess.getExpressionAccess().getUnorderedGroup_1(), 
	grammarAccess.getExpressionAccess().getUnorderedGroup_3()
	);
}:
	(
		(
			{
				/* */
			}
			{
				precedeComposite(elementTypeProvider.getExpression_ExpressionAction_0ElementType());
				doneComposite();
				associateWithSemanticElement();
			}
		)
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getExpressionAccess().getUnorderedGroup_1());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getExpressionAccess().getUnorderedGroup_1(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getExpressionAccess().getUnorderedGroup_1(), 0);
					}
								({true}?=>({
									markLeaf(elementTypeProvider.getExpression_LeftSquareBracketKeyword_1_0ElementType());
								}
								otherlv_2='['
								{
									doneLeaf(otherlv_2);
								}
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getExpressionAccess().getUnorderedGroup_1());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getExpressionAccess().getUnorderedGroup_1(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getExpressionAccess().getUnorderedGroup_1(), 1);
					}
								({true}?=>((
									{
										markLeaf(elementTypeProvider.getExpression_PrefixSTRINGTerminalRuleCall_1_1_0ElementType());
									}
									lv_prefix_3_0=RULE_STRING
									{
										if(!$current) {
											associateWithSemanticElement();
											$current = true;
										}
									}
									{
										doneLeaf(lv_prefix_3_0);
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getExpressionAccess().getUnorderedGroup_1());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getExpressionAccess().getUnorderedGroup_1());
				}
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getExpression_LeftSquareBracketKeyword_2_0ElementType());
				}
				otherlv_4='['
				{
					doneLeaf(otherlv_4);
				}
			)?
			(
				(
					{
						markComposite(elementTypeProvider.getExpression_TermsSimpleTermParserRuleCall_2_1_0ElementType());
					}
					lv_terms_5_0=ruleSimpleTerm
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
			(
				{
					markLeaf(elementTypeProvider.getExpression_RightSquareBracketKeyword_2_2ElementType());
				}
				otherlv_6=']'
				{
					doneLeaf(otherlv_6);
				}
			)?
		)*
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getExpressionAccess().getUnorderedGroup_3());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getExpressionAccess().getUnorderedGroup_3(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getExpressionAccess().getUnorderedGroup_3(), 0);
					}
								({true}?=>({
									markLeaf(elementTypeProvider.getExpression_RightSquareBracketKeyword_3_0ElementType());
								}
								otherlv_8=']'
								{
									doneLeaf(otherlv_8);
								}
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getExpressionAccess().getUnorderedGroup_3());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getExpressionAccess().getUnorderedGroup_3(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getExpressionAccess().getUnorderedGroup_3(), 1);
					}
								({true}?=>((
									{
										markLeaf(elementTypeProvider.getExpression_PostfixSTRINGTerminalRuleCall_3_1_0ElementType());
									}
									lv_postfix_9_0=RULE_STRING
									{
										if(!$current) {
											associateWithSemanticElement();
											$current = true;
										}
									}
									{
										doneLeaf(lv_postfix_9_0);
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getExpressionAccess().getUnorderedGroup_3());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getExpressionAccess().getUnorderedGroup_3());
				}
		)
	)
;
finally {
	myUnorderedGroupState.restore();
}

//Entry rule entryRuleSimpleTerm
entryRuleSimpleTerm returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSimpleTermElementType()); }
	iv_ruleSimpleTerm=ruleSimpleTerm
	{ $current=$iv_ruleSimpleTerm.current; }
	EOF;

// Rule SimpleTerm
ruleSimpleTerm returns [Boolean current=false]
:
	(
		(
			(
				(
					{
						markLeaf(elementTypeProvider.getSimpleTerm_LineCountINTTerminalRuleCall_0_0_0ElementType());
					}
					lv_lineCount_0_0=RULE_INT
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_lineCount_0_0);
					}
				)
			)
			(
				{
					markLeaf(elementTypeProvider.getSimpleTerm_AsteriskKeyword_0_1ElementType());
				}
				otherlv_1='*'
				{
					doneLeaf(otherlv_1);
				}
			)?
			(
				(
					{
						markLeaf(elementTypeProvider.getSimpleTerm_CharCountINTTerminalRuleCall_0_2_0ElementType());
					}
					lv_charCount_2_0=RULE_INT
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_charCount_2_0);
					}
				)
			)?
			(
				{
					markLeaf(elementTypeProvider.getSimpleTerm_ExclamationMarkKeyword_0_3ElementType());
				}
				otherlv_3='!'
				{
					doneLeaf(otherlv_3);
				}
			)?
			(
				(
					{
						markLeaf(elementTypeProvider.getSimpleTerm_CharSetIDTerminalRuleCall_0_4_0ElementType());
					}
					lv_charSet_4_0=RULE_ID
					{
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						doneLeaf(lv_charSet_4_0);
					}
				)
			)?
		)
		    |
		(
			(
				{
					markLeaf(elementTypeProvider.getSimpleTerm_RefCharIDTerminalRuleCall_1_0ElementType());
				}
				lv_refChar_5_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_refChar_5_0);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
