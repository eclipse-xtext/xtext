/*
 * generated by Xtext
 */
grammar PsiInternalBug443221TestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parser.antlr.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.antlr.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.antlr.idea.lang.Bug443221TestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.services.Bug443221TestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected Bug443221TestLanguageGrammarAccess grammarAccess;

	protected Bug443221TestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalBug443221TestLanguageParser(PsiBuilder builder, TokenStream input, Bug443221TestLanguageElementTypeProvider elementTypeProvider, Bug443221TestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	EOF;

// Rule Model
ruleModel:
	(
		(
			{
				precedeComposite(elementTypeProvider.getModel_ModelAction_0ElementType());
				doneComposite();
			}
		)
		{
			markLeaf(elementTypeProvider.getModel_DummyKeyword_1ElementType());
		}
		otherlv_1='dummy'
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getModel_NameIDTerminalRuleCall_2_0ElementType());
				}
				lv_name_2_0=RULE_ID
				{
					doneLeaf(lv_name_2_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getModel__Keyword_3ElementType());
		}
		otherlv_3='_'
		{
			doneLeaf(otherlv_3);
		}
		{
			markLeaf(elementTypeProvider.getModel__dummy_Keyword_4ElementType());
		}
		otherlv_4='_dummy_'
		{
			doneLeaf(otherlv_4);
		}
		{
			markLeaf(elementTypeProvider.getModel___dummy__Keyword_5ElementType());
		}
		otherlv_5='__dummy__'
		{
			doneLeaf(otherlv_5);
		}
		{
			markLeaf(elementTypeProvider.getModel___dummy__Keyword_6ElementType());
		}
		otherlv_6='$__dummy__'
		{
			doneLeaf(otherlv_6);
		}
		{
			markLeaf(elementTypeProvider.getModel_DollarSignKeyword_7ElementType());
		}
		otherlv_7='$'
		{
			doneLeaf(otherlv_7);
		}
		{
			markLeaf(elementTypeProvider.getModel_DollarSignKeyword_8ElementType());
		}
		otherlv_8='DollarSign'
		{
			doneLeaf(otherlv_8);
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
