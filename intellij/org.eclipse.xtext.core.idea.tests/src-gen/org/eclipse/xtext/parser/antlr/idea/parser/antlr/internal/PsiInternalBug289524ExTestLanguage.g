/*
 * generated by Xtext
 */
grammar PsiInternalBug289524ExTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.eclipse.xtext.parser.antlr.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.antlr.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.antlr.idea.lang.Bug289524ExTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.services.Bug289524ExTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

	protected Bug289524ExTestLanguageGrammarAccess grammarAccess;

	protected Bug289524ExTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalBug289524ExTestLanguageParser(PsiBuilder builder, TokenStream input, Bug289524ExTestLanguageElementTypeProvider elementTypeProvider, Bug289524ExTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			{
				/* */
			}
			{
				precedeComposite(elementTypeProvider.getModel_ModelAction_0ElementType());
				doneComposite();
				associateWithSemanticElement();
			}
		)
		{
			markLeaf(elementTypeProvider.getModel_ModelKeyword_1ElementType());
		}
		otherlv_1='Model'
		{
			doneLeaf(otherlv_1);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getModel_RefsModelElementParserRuleCall_2_0ElementType());
				}
				lv_refs_2_0=ruleModelElement
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
	)
;

//Entry rule entryRuleModelElement
entryRuleModelElement returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementElementType()); }
	iv_ruleModelElement=ruleModelElement
	{ $current=$iv_ruleModelElement.current; }
	EOF;

// Rule ModelElement
ruleModelElement returns [Boolean current=false]
:
	(
		(
			{
				/* */
			}
			{
				precedeComposite(elementTypeProvider.getModelElement_ModelElementAction_0ElementType());
				doneComposite();
				associateWithSemanticElement();
			}
		)
		(
			(
				(
					{
						markComposite(elementTypeProvider.getModelElement_ContainmentsContainedParserRuleCall_1_0_0ElementType());
					}
					lv_containments_1_0=ruleContained
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
			    |
			(
				{
					markLeaf(elementTypeProvider.getModelElement_ReferenceKeyword_1_1_0ElementType());
				}
				otherlv_2='reference'
				{
					doneLeaf(otherlv_2);
				}
				(
					(
						{
							/* */
						}
						{
							if (!$current) {
								associateWithSemanticElement();
								$current = true;
							}
						}
						{
							markLeaf(elementTypeProvider.getModelElement_RefsContainedCrossReference_1_1_1_0ElementType());
						}
						otherlv_3=RULE_ID
						{
							doneLeaf(otherlv_3);
						}
					)
				)
				(
					{
						markLeaf(elementTypeProvider.getModelElement_DollarSignKeyword_1_1_2_0ElementType());
					}
					otherlv_4='$'
					{
						doneLeaf(otherlv_4);
					}
					(
						(
							{
								/* */
							}
							{
								if (!$current) {
									associateWithSemanticElement();
									$current = true;
								}
							}
							{
								markLeaf(elementTypeProvider.getModelElement_RefsContainedCrossReference_1_1_2_1_0ElementType());
							}
							otherlv_5=RULE_ID
							{
								doneLeaf(otherlv_5);
							}
						)
					)
				)*
			)
		)+
	)
;

//Entry rule entryRuleContained
entryRuleContained returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getContainedElementType()); }
	iv_ruleContained=ruleContained
	{ $current=$iv_ruleContained.current; }
	EOF;

// Rule Contained
ruleContained returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getContained_ContainmentKeyword_0ElementType());
		}
		otherlv_0='containment'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getContained_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
