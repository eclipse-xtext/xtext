/*
 * generated by Xtext
 */
grammar PsiInternalBug378967TestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.parser.antlr.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parser.antlr.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.parser.antlr.idea.lang.Bug378967TestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.services.Bug378967TestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected Bug378967TestLanguageGrammarAccess grammarAccess;

	protected Bug378967TestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalBug378967TestLanguageParser(PsiBuilder builder, TokenStream input, Bug378967TestLanguageElementTypeProvider elementTypeProvider, Bug378967TestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Root";
	}

}

//Entry rule entryRuleRoot
entryRuleRoot returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRootElementType()); }
	iv_ruleRoot=ruleRoot
	{ $current=$iv_ruleRoot.current; }
	EOF;

// Rule Root
ruleRoot returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getRoot_DigitOneKeyword_0_0ElementType());
			}
			otherlv_0='1'
			{
				doneLeaf(otherlv_0);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getRoot_ElementRule1ParserRuleCall_0_1_0ElementType());
					}
					lv_element_1_0=ruleRule1
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getRoot_DigitTwoKeyword_1_0ElementType());
			}
			otherlv_2='2'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getRoot_ElementRule2ParserRuleCall_1_1_0ElementType());
					}
					lv_element_3_0=ruleRule2
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getRoot_DigitThreeKeyword_2_0ElementType());
			}
			otherlv_4='3'
			{
				doneLeaf(otherlv_4);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getRoot_ElementRule3ParserRuleCall_2_1_0ElementType());
					}
					lv_element_5_0=ruleRule3
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getRoot_DigitFourKeyword_3_0ElementType());
			}
			otherlv_6='4'
			{
				doneLeaf(otherlv_6);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getRoot_ElementRule4ParserRuleCall_3_1_0ElementType());
					}
					lv_element_7_0=ruleRule4
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)
	)
;

//Entry rule entryRuleRule1
entryRuleRule1 returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRule1ElementType()); }
	iv_ruleRule1=ruleRule1
	{ $current=$iv_ruleRule1.current; }
	EOF;

// Rule Rule1
ruleRule1 returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getRule1_TypeFirstEnumEnumRuleCall_0_0ElementType());
				}
				lv_type_0_0=ruleFirstEnum
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getRule1_ValueINTTerminalRuleCall_1_0ElementType());
				}
				lv_value_1_0=RULE_INT
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_value_1_0);
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getRule1_UnitSecondEnumEnumRuleCall_2_0ElementType());
				}
				lv_unit_2_0=ruleSecondEnum
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

//Entry rule entryRuleRule2
entryRuleRule2 returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRule2ElementType()); }
	iv_ruleRule2=ruleRule2
	{ $current=$iv_ruleRule2.current; }
	EOF;

// Rule Rule2
ruleRule2 returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getRule2_AfterKeyword_0ElementType());
		}
		otherlv_0='after'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getRule2_ValueINTTerminalRuleCall_1_0ElementType());
				}
				lv_value_1_0=RULE_INT
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_value_1_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getRule2_SKeyword_2ElementType());
		}
		otherlv_2='s'
		{
			doneLeaf(otherlv_2);
		}
	)
;

//Entry rule entryRuleRule3
entryRuleRule3 returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRule3ElementType()); }
	iv_ruleRule3=ruleRule3
	{ $current=$iv_ruleRule3.current; }
	EOF;

// Rule Rule3
ruleRule3 returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getRule3_AfterParserRuleCall_0ElementType());
		}
		ruleAfter
		{
			doneComposite();
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getRule3_ValueINTTerminalRuleCall_1_0ElementType());
				}
				lv_value_1_0=RULE_INT
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_value_1_0);
				}
			)
		)
		{
			markComposite(elementTypeProvider.getRule3_SParserRuleCall_2ElementType());
		}
		ruleS
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleRule4
entryRuleRule4 returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getRule4ElementType()); }
	iv_ruleRule4=ruleRule4
	{ $current=$iv_ruleRule4.current; }
	EOF;

// Rule Rule4
ruleRule4 returns [Boolean current=false]
:
	(
		(
			(
				{
					markComposite(elementTypeProvider.getRule4_AfterAfterObjParserRuleCall_0_0ElementType());
				}
				lv_after_0_0=ruleAfterObj
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getRule4_ValueINTTerminalRuleCall_1_0ElementType());
				}
				lv_value_1_0=RULE_INT
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_value_1_0);
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getRule4_SSObjParserRuleCall_2_0ElementType());
				}
				lv_s_2_0=ruleSObj
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

//Entry rule entryRuleAfterObj
entryRuleAfterObj returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAfterObjElementType()); }
	iv_ruleAfterObj=ruleAfterObj
	{ $current=$iv_ruleAfterObj.current; }
	EOF;

// Rule AfterObj
ruleAfterObj returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getAfterObj_ValueAfterKeyword_0ElementType());
			}
			lv_value_0_0='after'
			{
				doneLeaf(lv_value_0_0);
			}
			{
				if (!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
		)
	)
;

//Entry rule entryRuleSObj
entryRuleSObj returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSObjElementType()); }
	iv_ruleSObj=ruleSObj
	{ $current=$iv_ruleSObj.current; }
	EOF;

// Rule SObj
ruleSObj returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getSObj_ValueSKeyword_0ElementType());
			}
			lv_value_0_0='s'
			{
				doneLeaf(lv_value_0_0);
			}
			{
				if (!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
		)
	)
;

//Entry rule entryRuleAfter
entryRuleAfter returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAfterElementType()); }
	iv_ruleAfter=ruleAfter
	{ $current=$iv_ruleAfter.current; }
	EOF;

// Rule After
ruleAfter returns [Boolean current=false]
:
	{
		markLeaf(elementTypeProvider.getAfter_AfterKeywordElementType());
	}
	kw='after'
	{
		doneLeaf(kw);
	}
;

//Entry rule entryRuleS
entryRuleS returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getSElementType()); }
	iv_ruleS=ruleS
	{ $current=$iv_ruleS.current; }
	EOF;

// Rule S
ruleS returns [Boolean current=false]
:
	{
		markLeaf(elementTypeProvider.getS_SKeywordElementType());
	}
	kw='s'
	{
		doneLeaf(kw);
	}
;

// Rule FirstEnum
ruleFirstEnum returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getFirstEnum_ValueEnumLiteralDeclarationElementType());
		}
		enumLiteral_0='after'
		{
			doneLeaf(enumLiteral_0);
		}
	)
;

// Rule SecondEnum
ruleSecondEnum returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getSecondEnum_ValueEnumLiteralDeclarationElementType());
		}
		enumLiteral_0='s'
		{
			doneLeaf(enumLiteral_0);
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
