/*
 * generated by Xtext
 */
grammar PsiInternalMultiRuleEnumTestLanguage;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.enumrules.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.enumrules.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.eclipse.xtext.enumrules.idea.lang.MultiRuleEnumTestLanguageElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.enumrules.services.MultiRuleEnumTestLanguageGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected MultiRuleEnumTestLanguageGrammarAccess grammarAccess;

	protected MultiRuleEnumTestLanguageElementTypeProvider elementTypeProvider;

	public PsiInternalMultiRuleEnumTestLanguageParser(PsiBuilder builder, TokenStream input, MultiRuleEnumTestLanguageElementTypeProvider elementTypeProvider, MultiRuleEnumTestLanguageGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getModel_SomeEnumKeyword_0ElementType());
		}
		otherlv_0='someEnum'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getModel_AEnumRuleAEnumRuleCall_1_0ElementType());
				}
				lv_a_1_0=ruleEnumRuleA
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getModel_BEnumRuleBEnumRuleCall_2_0ElementType());
				}
				lv_b_2_0=ruleEnumRuleB
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getModel_CEnumRuleCEnumRuleCall_3_0ElementType());
				}
				lv_c_3_0=ruleEnumRuleC
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

// Rule EnumRuleA
ruleEnumRuleA returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getEnumRuleA_AEnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='A'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getEnumRuleA_BEnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='B'
			{
				doneLeaf(enumLiteral_1);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getEnumRuleA_CEnumLiteralDeclaration_2ElementType());
			}
			enumLiteral_2='C'
			{
				doneLeaf(enumLiteral_2);
			}
		)
	)
;

// Rule EnumRuleB
ruleEnumRuleB returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getEnumRuleB_CEnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='C'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getEnumRuleB_DEnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='D'
			{
				doneLeaf(enumLiteral_1);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getEnumRuleB_EEnumLiteralDeclaration_2ElementType());
			}
			enumLiteral_2='E'
			{
				doneLeaf(enumLiteral_2);
			}
		)
	)
;

// Rule EnumRuleC
ruleEnumRuleC returns [Boolean current=false]
:
	(
		(
			{
				markLeaf(elementTypeProvider.getEnumRuleC_AEnumLiteralDeclaration_0ElementType());
			}
			enumLiteral_0='A'
			{
				doneLeaf(enumLiteral_0);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getEnumRuleC_DEnumLiteralDeclaration_1ElementType());
			}
			enumLiteral_1='D'
			{
				doneLeaf(enumLiteral_1);
			}
		)
		    |
		(
			{
				markLeaf(elementTypeProvider.getEnumRuleC_BEnumLiteralDeclaration_2ElementType());
			}
			enumLiteral_2='B'
			{
				doneLeaf(enumLiteral_2);
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
