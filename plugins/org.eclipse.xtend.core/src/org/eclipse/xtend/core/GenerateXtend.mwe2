module org.eclipse.xtend.core.GenerateXtend

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.parser.antlr.*
import org.eclipse.xtext.resource.XtextResourceSet 

var grammarURI = "classpath:/org/eclipse/xtend/core/Xtend.xtext"
var file.extensions = "xtend"
var projectName = "org.eclipse.xtend.core"
var projectPath = "../${projectName}"

var uiProjectName = "org.eclipse.xtend.ide"
var uiProjectPath = "../${uiProjectName}"
var backtrack = false
var memoize = false

Workflow {
	bean = StandaloneSetup {
		ignoreBrokenProjectFiles = true
		platformUri = "${projectPath}/../.."
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
	}
	
	bean = StandaloneSetup {
		resourceSet = XtextResourceSet : resourceSet {}
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore"
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xtype.ecore"
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.ecore"
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.xbase/model/XAnnotations.ecore"
		registerEcoreFile = "platform:/resource/${projectName}/model/Xtend.ecore"
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}/emf-gen"
	}

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/Xtend.genmodel"
		srcPath ="platform:/resource/${projectName}/src"
		srcPath ="platform:/resource/org.eclipse.xtext.common.types/src"
		srcPath ="platform:/resource/org.eclipse.xtext.xbase/src"
	}
	
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/RichStrings.genmodel"
		srcPath ="platform:/resource/${projectName}/src"
		srcPath ="platform:/resource/org.eclipse.xtext.common.types/src"
		srcPath ="platform:/resource/org.eclipse.xtext.xbase/src"
	}

	component = DirectoryCleaner {
		directory = "${projectPath}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${uiProjectPath}/src-gen"
	}

	component = Generator {
		pathRtProject = projectPath
		pathUiProject = uiProjectPath
		projectNameRt = projectName
		projectNameUi = uiProjectName
		naming = {
			uiBasePackage = "org.eclipse.xtend.ide"
			grammarId = "org.eclipse.xtend.core.Xtend"
		}
		language = {
			forcedResourceSet = resourceSet
			uri = grammarURI
			fileExtensions = file.extensions
			fragment = grammarAccess.GrammarAccessFragment {}
			fragment = serializer.SerializerFragment {
				// generateDebugData = true
			}
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}
			fragment = XtextAntlrGeneratorFragment {
				options = auto-inject {}
			}
			fragment = DebugAntlrGeneratorFragment {
				options = auto-inject {}
			}
			fragment = validation.JavaValidatorFragment {}
			fragment = generator.GeneratorFragment {}
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = builder.BuilderIntegrationFragment {}
			fragment = quickfix.QuickfixProviderFragment {}
			fragment = labeling.LabelProviderFragment {}
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}
			fragment = compare.CompareFragment {
				fileExtensions = file.extensions
			}
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = XtextAntlrUiGeneratorFragment {
				options = auto-inject {}
			}
			fragment = refactoring.RefactorElementNameFragment {
				useJdtRefactoring = true
			}
			fragment = types.TypesGeneratorFragment {}
			fragment = xbase.XbaseGeneratorFragment {
				generateXtendInferrer = false
			}
			fragment = templates.CodetemplatesGeneratorFragment {}
		}
	}
}
