/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar org.eclipse.xtend.core.Xtend with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.eclipse.org/xtend"
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations" as annotations
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

File returns XtendFile : 
    ('package' package=QualifiedName ';'?)?
	importSection=XImportSection?
	(xtendTypes+=Type)*
;

Type returns XtendTypeDeclaration :
	{XtendTypeDeclaration} annotations+=XAnnotation*   
	(
		{XtendClass.annotationInfo = current}
		modifiers+=CommonModifier*
	  	'class' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
	   	("extends" extends=JvmParameterizedTypeReference)? 
	   	('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?'{'
		   (members+=Member)*
	   	'}'
	 |
		{XtendInterface.annotationInfo = current}
		modifiers+=CommonModifier*
	  	'interface' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
	   	('extends' extends+=JvmParameterizedTypeReference (',' extends+=JvmParameterizedTypeReference)*)?'{'
		   (members+=Member)*
	   	'}'
	 |
		{XtendEnum.annotationInfo = current}
		modifiers+=CommonModifier*
	  	'enum' name=ValidID '{'   
		   (members+=XtendEnumLiteral (',' members+=XtendEnumLiteral)*)? ';'?
	   	'}'
	 |
	 	{XtendAnnotationType.annotationInfo = current}
	 	modifiers+=CommonModifier*
		'annotation' name=ValidID '{'
		   (members+=AnnotationField)*
	   	'}'
	)
;

AnnotationField returns XtendField :
	annotations+=XAnnotation* modifiers+=CommonModifier* 
	( 
			modifiers+=FieldModifier modifiers+=CommonModifier*
			type=JvmTypeReference? name=ValidID
		|
			type=JvmTypeReference name=ValidID
	)
	('=' initialValue=XExpression)? ';'?
;
	
Member returns XtendMember:
	{XtendMember} annotations+=XAnnotation*
	(
		(	
			{XtendField.annotationInfo = current} modifiers+=CommonModifier*
			(
				modifiers+=FieldModifier modifiers+=CommonModifier* 
				type=JvmTypeReference? name=ValidID 
			|
				modifiers+='extension' (modifiers+=FieldModifier | modifiers+=CommonModifier)* 
				type=JvmTypeReference name=ValidID?
			| 
				modifiers+=FieldModifier (modifiers+=CommonModifier)* modifiers+='extension' (modifiers+=CommonModifier)*  
				type=JvmTypeReference name=ValidID?
			|  
				type=JvmTypeReference name=ValidID
			) ('=' initialValue=XExpression)? ';'?

		) | (
			{XtendFunction.annotationInfo = current} modifiers+=CommonModifier*
			modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* 
			('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
			( 
				=>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID '(')
			  | =>(returnType=JvmTypeReference name=ValidID '(')
			  | =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
			  | name=ValidID '('
			)
			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
			('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
			(expression=XBlockExpression | expression=RichString | ';')?
			
		) | (
			{XtendConstructor.annotationInfo = current} modifiers+=CommonModifier*
			'new' 
			('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
			'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
			('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
			expression=XBlockExpression
		)
	)
;

XtendEnumLiteral: 
	name=ValidID
;


CommonModifier:
		'public' | 'private' | 'protected' | 'package' | 'abstract' | 'static' | 'dispatch' | 'final'
;

FieldModifier:
		'val' | 'var'
;

MethodModifier:
		'def' | 'override' 
; 

CreateExtensionInfo:
	'create' (name=ValidID ':')? createExpression=XExpression
;

ValidID:
	ID | 'create' | 'annotation'
;

FeatureCallID:
	ID | 'abstract' | 'annotation' | 'class' | 'create' | 'def' | 'dispatch' | 'enum' | 'extends' | 'extension' 
	   | 'final' | 'implements' | 'import' | 'interface' | 'override' | 'package' | 'public' | 'private' 
	   | 'protected' | 'static' | 'throws'
;

Parameter returns XtendParameter:
	annotations+=XAnnotation* (extension?='extension' annotations+=XAnnotation*)?  
	parameterType=JvmTypeReference varArg?='...'? name=ValidID;
	
XVariableDeclaration returns xbase::XExpression:
	=>({XtendVariableDeclaration}
	(((writeable?='var'|'val') extension?='extension'?) | (extension?='extension' (writeable?='var'|'val'))))
	(=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;

JvmFormalParameter returns XtendFormalParameter:
	extension?='extension'? (parameterType=JvmTypeReference)? name=ValidID;
	
FullJvmFormalParameter returns XtendFormalParameter:
	extension?='extension'? parameterType=JvmTypeReference name=ValidID;

XStringLiteral returns xbase::XExpression:
	SimpleStringLiteral | RichString
;

SimpleStringLiteral returns xbase::XExpression:
	{xbase::XStringLiteral} value=STRING
;
		
RichString returns xbase::XExpression:
	{RichString} ( 
	  expressions+=RichStringLiteral |
	  expressions+=RichStringLiteralStart expressions+=RichStringPart? 
	  	(expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)* 
	  expressions+=RichStringLiteralEnd
	)
;

RichStringLiteral returns xbase::XExpression :
	{RichStringLiteral} value=RICH_TEXT
;

RichStringLiteralStart returns xbase::XExpression :
	{RichStringLiteral} value=RICH_TEXT_START
; 

RichStringLiteralInbetween returns xbase::XExpression :
	{RichStringLiteral} 
	( value=RICH_TEXT_INBETWEEN | value=COMMENT_RICH_TEXT_INBETWEEN )
; 

RichStringLiteralEnd returns xbase::XExpression :
	{RichStringLiteral} 
	( value=RICH_TEXT_END | value=COMMENT_RICH_TEXT_END )
; 

InternalRichString returns xbase::XExpression:
	{RichString} (
		expressions+=RichStringLiteralInbetween (expressions+=RichStringPart? expressions+=RichStringLiteralInbetween)*
	)
;

RichStringPart returns xbase::XExpression:
	XExpressionInsideBlock |
	RichStringForLoop |
	RichStringIf
;

RichStringForLoop returns xbase::XExpression:
	{RichStringForLoop}
	"FOR" declaredParam=JvmFormalParameter ':' forExpression=XExpression
		("BEFORE" before=XExpression)?
		("SEPARATOR" separator=XExpression)?
		("AFTER" after=XExpression)?
		eachExpression=InternalRichString
	"ENDFOR"
;

RichStringIf returns xbase::XExpression :
	{RichStringIf}
	"IF" if=XExpression
		then=InternalRichString
		elseIfs+=RichStringElseIf*
	("ELSE" 
		else=InternalRichString)?
	"ENDIF"
;

RichStringElseIf returns RichStringElseIf:
	"ELSEIF" if=XExpression then=InternalRichString
;

terminal RICH_TEXT : "'''" IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF);
terminal RICH_TEXT_START : "'''" IN_RICH_STRING* ("'" "'"?)? 'л';
terminal RICH_TEXT_END : '╗' IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF) ;
terminal RICH_TEXT_INBETWEEN : '╗' IN_RICH_STRING* ("'" "'"?)? 'л';
terminal COMMENT_RICH_TEXT_INBETWEEN: "лл" !('\n'|'\r')* ('\r'? '\n' IN_RICH_STRING* ("'" "'"?)? 'л')?; 
terminal COMMENT_RICH_TEXT_END: "лл" !('\n'|'\r')* (('\r'? '\n' IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF)) | EOF); 

terminal fragment IN_RICH_STRING : 
	  "''" !('л'|"'") 
	| "'" !('л'|"'")
	| !('л'|"'");
