/*
* generated by Xtext
*/
package org.eclipse.xtext.generator.parser.antlr.debug.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimpleAntlrGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AntlrGrammarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AntlrGrammar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGrammarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionsOptionsParserRuleCall_3_0 = (RuleCall)cOptionsAssignment_3.eContents().get(0);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesRuleParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		
		//AntlrGrammar:
		//	"grammar" name=ID ";" options=Options? rules+=Rule*;
		@Override
		public ParserRule getRule() { return rule; }

		//"grammar" name=ID ";" options=Options? rules+=Rule*
		public Group getGroup() { return cGroup; }

		//"grammar"
		public Keyword getGrammarKeyword_0() { return cGrammarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//options=Options?
		public Assignment getOptionsAssignment_3() { return cOptionsAssignment_3; }

		//Options
		public RuleCall getOptionsOptionsParserRuleCall_3_0() { return cOptionsOptionsParserRuleCall_3_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_4_0() { return cRulesRuleParserRuleCall_4_0; }
	}

	public class OptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOptionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionValuesOptionValueParserRuleCall_3_0 = (RuleCall)cOptionValuesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Options:
		//	{Options} "options" "{" optionValues+=OptionValue+ "}";
		@Override
		public ParserRule getRule() { return rule; }

		//{Options} "options" "{" optionValues+=OptionValue+ "}"
		public Group getGroup() { return cGroup; }

		//{Options}
		public Action getOptionsAction_0() { return cOptionsAction_0; }

		//"options"
		public Keyword getOptionsKeyword_1() { return cOptionsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//optionValues+=OptionValue+
		public Assignment getOptionValuesAssignment_3() { return cOptionValuesAssignment_3; }

		//OptionValue
		public RuleCall getOptionValuesOptionValueParserRuleCall_3_0() { return cOptionValuesOptionValueParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class OptionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIdOrIntParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OptionValue:
		//	key=ID "=" value=IdOrInt ";";
		@Override
		public ParserRule getRule() { return rule; }

		//key=ID "=" value=IdOrInt ";"
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=IdOrInt
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//IdOrInt
		public RuleCall getValueIdOrIntParserRuleCall_2_0() { return cValueIdOrIntParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IdOrIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdOrInt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IdOrInt:
		//	ID | INT;
		@Override
		public ParserRule getRule() { return rule; }

		//ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFragmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFragmentFragmentKeyword_0_0 = (Keyword)cFragmentAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyAlternativesParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rule:
		//	^fragment?="fragment"? name=ID ":" body=Alternatives ";";
		@Override
		public ParserRule getRule() { return rule; }

		//^fragment?="fragment"? name=ID ":" body=Alternatives ";"
		public Group getGroup() { return cGroup; }

		//^fragment?="fragment"?
		public Assignment getFragmentAssignment_0() { return cFragmentAssignment_0; }

		//"fragment"
		public Keyword getFragmentFragmentKeyword_0_0() { return cFragmentFragmentKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//body=Alternatives
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//Alternatives
		public RuleCall getBodyAlternativesParserRuleCall_3_0() { return cBodyAlternativesParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AlternativesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGroupParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAlternativesGroupsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cGroupsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_1_1_1_0 = (RuleCall)cGroupsAssignment_1_1_1.eContents().get(0);
		
		//Alternatives returns RuleElement:
		//	Group ({Alternatives.groups+=current} ("|" groups+=Group)+)?;
		@Override
		public ParserRule getRule() { return rule; }

		//Group ({Alternatives.groups+=current} ("|" groups+=Group)+)?
		public Group getGroup() { return cGroup; }

		//Group
		public RuleCall getGroupParserRuleCall_0() { return cGroupParserRuleCall_0; }

		//({Alternatives.groups+=current} ("|" groups+=Group)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{Alternatives.groups+=current}
		public Action getAlternativesGroupsAction_1_0() { return cAlternativesGroupsAction_1_0; }

		//("|" groups+=Group)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1_0() { return cVerticalLineKeyword_1_1_0; }

		//groups+=Group
		public Assignment getGroupsAssignment_1_1_1() { return cGroupsAssignment_1_1_1; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_1_1_1_0() { return cGroupsGroupParserRuleCall_1_1_1_0; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGroupElementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsAtomParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//Group returns RuleElement:
		//	Atom ({Group.elements+=current} elements+=Atom+)?;
		@Override
		public ParserRule getRule() { return rule; }

		//Atom ({Group.elements+=current} elements+=Atom+)?
		public Group getGroup() { return cGroup; }

		//Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }

		//({Group.elements+=current} elements+=Atom+)?
		public Group getGroup_1() { return cGroup_1; }

		//{Group.elements+=current}
		public Action getGroupElementsAction_1_0() { return cGroupElementsAction_1_0; }

		//elements+=Atom+
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//Atom
		public RuleCall getElementsAtomParserRuleCall_1_1_0() { return cElementsAtomParserRuleCall_1_1_0; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cOtherElementParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cElementWithCardinalityElementAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cCardinalityAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cCardinalityAlternatives_0_1_1_0 = (Alternatives)cCardinalityAssignment_0_1_1.eContents().get(0);
		private final Keyword cCardinalityPlusSignKeyword_0_1_1_0_0 = (Keyword)cCardinalityAlternatives_0_1_1_0.eContents().get(0);
		private final Keyword cCardinalityAsteriskKeyword_0_1_1_0_1 = (Keyword)cCardinalityAlternatives_0_1_1_0.eContents().get(1);
		private final Keyword cCardinalityQuestionMarkKeyword_0_1_1_0_2 = (Keyword)cCardinalityAlternatives_0_1_1_0.eContents().get(2);
		private final RuleCall cRuleOptionsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Atom returns RuleElement:
		//	OtherElement ({ElementWithCardinality.element=current} cardinality=("+" | "*" | "?"))? | RuleOptions;
		@Override
		public ParserRule getRule() { return rule; }

		//OtherElement ({ElementWithCardinality.element=current} cardinality=("+" | "*" | "?"))? | RuleOptions
		public Alternatives getAlternatives() { return cAlternatives; }

		//OtherElement ({ElementWithCardinality.element=current} cardinality=("+" | "*" | "?"))?
		public Group getGroup_0() { return cGroup_0; }

		//OtherElement
		public RuleCall getOtherElementParserRuleCall_0_0() { return cOtherElementParserRuleCall_0_0; }

		//({ElementWithCardinality.element=current} cardinality=("+" | "*" | "?"))?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{ElementWithCardinality.element=current}
		public Action getElementWithCardinalityElementAction_0_1_0() { return cElementWithCardinalityElementAction_0_1_0; }

		//cardinality=("+" | "*" | "?")
		public Assignment getCardinalityAssignment_0_1_1() { return cCardinalityAssignment_0_1_1; }

		//"+" | "*" | "?"
		public Alternatives getCardinalityAlternatives_0_1_1_0() { return cCardinalityAlternatives_0_1_1_0; }

		//"+"
		public Keyword getCardinalityPlusSignKeyword_0_1_1_0_0() { return cCardinalityPlusSignKeyword_0_1_1_0_0; }

		//"*"
		public Keyword getCardinalityAsteriskKeyword_0_1_1_0_1() { return cCardinalityAsteriskKeyword_0_1_1_0_1; }

		//"?"
		public Keyword getCardinalityQuestionMarkKeyword_0_1_1_0_2() { return cCardinalityQuestionMarkKeyword_0_1_1_0_2; }

		//RuleOptions
		public RuleCall getRuleOptionsParserRuleCall_1() { return cRuleOptionsParserRuleCall_1; }
	}

	public class OtherElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNegatedElementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTildeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Alternatives cElementAlternatives_0_2_0 = (Alternatives)cElementAssignment_0_2.eContents().get(0);
		private final RuleCall cElementParenthesizedParserRuleCall_0_2_0_0 = (RuleCall)cElementAlternatives_0_2_0.eContents().get(0);
		private final RuleCall cElementLiteralParserRuleCall_0_2_0_1 = (RuleCall)cElementAlternatives_0_2_0.eContents().get(1);
		private final RuleCall cPredicatedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesizedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Action cUntilElementLeftAction_3_1_0 = (Action)cGroup_3_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cRightAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cRightLiteralParserRuleCall_3_1_2_0 = (RuleCall)cRightAssignment_3_1_2.eContents().get(0);
		
		//OtherElement returns RuleElement:
		//	{NegatedElement} "~" element=(Parenthesized | Literal) | Predicated | Parenthesized | Literal
		//	({UntilElement.left=current} ".." right=Literal)?;
		@Override
		public ParserRule getRule() { return rule; }

		//{NegatedElement} "~" element=(Parenthesized | Literal) | Predicated | Parenthesized | Literal
		//({UntilElement.left=current} ".." right=Literal)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NegatedElement} "~" element=(Parenthesized | Literal)
		public Group getGroup_0() { return cGroup_0; }

		//{NegatedElement}
		public Action getNegatedElementAction_0_0() { return cNegatedElementAction_0_0; }

		//"~"
		public Keyword getTildeKeyword_0_1() { return cTildeKeyword_0_1; }

		//element=(Parenthesized | Literal)
		public Assignment getElementAssignment_0_2() { return cElementAssignment_0_2; }

		//Parenthesized | Literal
		public Alternatives getElementAlternatives_0_2_0() { return cElementAlternatives_0_2_0; }

		//Parenthesized
		public RuleCall getElementParenthesizedParserRuleCall_0_2_0_0() { return cElementParenthesizedParserRuleCall_0_2_0_0; }

		//Literal
		public RuleCall getElementLiteralParserRuleCall_0_2_0_1() { return cElementLiteralParserRuleCall_0_2_0_1; }

		//Predicated
		public RuleCall getPredicatedParserRuleCall_1() { return cPredicatedParserRuleCall_1; }

		//Parenthesized
		public RuleCall getParenthesizedParserRuleCall_2() { return cParenthesizedParserRuleCall_2; }

		//Literal ({UntilElement.left=current} ".." right=Literal)?
		public Group getGroup_3() { return cGroup_3; }

		//Literal
		public RuleCall getLiteralParserRuleCall_3_0() { return cLiteralParserRuleCall_3_0; }

		//({UntilElement.left=current} ".." right=Literal)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//{UntilElement.left=current}
		public Action getUntilElementLeftAction_3_1_0() { return cUntilElementLeftAction_3_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_1_1() { return cFullStopFullStopKeyword_3_1_1; }

		//right=Literal
		public Assignment getRightAssignment_3_1_2() { return cRightAssignment_3_1_2; }

		//Literal
		public RuleCall getRightLiteralParserRuleCall_3_1_2_0() { return cRightLiteralParserRuleCall_3_1_2_0; }
	}

	public class EmptyParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmptyParenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EmptyParenthesis:
		//	"(" ")";
		@Override
		public ParserRule getRule() { return rule; }

		//"(" ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }
	}

	public class ParenthesizedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parenthesized");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEmptyParenthesisParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cAlternativesParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cEmptyParenthesisParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Parenthesized returns RuleElement:
		//	"(" EmptyParenthesis* Alternatives ")" EmptyParenthesis*;
		@Override
		public ParserRule getRule() { return rule; }

		//"(" EmptyParenthesis* Alternatives ")" EmptyParenthesis*
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//EmptyParenthesis*
		public RuleCall getEmptyParenthesisParserRuleCall_1() { return cEmptyParenthesisParserRuleCall_1; }

		//Alternatives
		public RuleCall getAlternativesParserRuleCall_2() { return cAlternativesParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//EmptyParenthesis*
		public RuleCall getEmptyParenthesisParserRuleCall_4() { return cEmptyParenthesisParserRuleCall_4; }
	}

	public class PredicatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cEmptyParenthesisParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateAlternativesParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cEmptyParenthesisParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementOtherElementParserRuleCall_7_0 = (RuleCall)cElementAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Predicated:
		//	"(" "(" EmptyParenthesis* predicate=Alternatives ")" EmptyParenthesis* "=>" element=OtherElement ")";
		@Override
		public ParserRule getRule() { return rule; }

		//"(" "(" EmptyParenthesis* predicate=Alternatives ")" EmptyParenthesis* "=>" element=OtherElement ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//EmptyParenthesis*
		public RuleCall getEmptyParenthesisParserRuleCall_2() { return cEmptyParenthesisParserRuleCall_2; }

		//predicate=Alternatives
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//Alternatives
		public RuleCall getPredicateAlternativesParserRuleCall_3_0() { return cPredicateAlternativesParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//EmptyParenthesis*
		public RuleCall getEmptyParenthesisParserRuleCall_5() { return cEmptyParenthesisParserRuleCall_5; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_6() { return cEqualsSignGreaterThanSignKeyword_6; }

		//element=OtherElement
		public Assignment getElementAssignment_7() { return cElementAssignment_7; }

		//OtherElement
		public RuleCall getElementOtherElementParserRuleCall_7_0() { return cElementOtherElementParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class RuleOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOptionsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOptionsOptionsParserRuleCall_0_0_0 = (RuleCall)cOptionsAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cElementAtomParserRuleCall_0_2_0 = (RuleCall)cElementAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSkipAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSkipKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//RuleOptions:
		//	options=Options ":" element=Atom | {Skip} "{skip();}";
		@Override
		public ParserRule getRule() { return rule; }

		//options=Options ":" element=Atom | {Skip} "{skip();}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//options=Options ":" element=Atom
		public Group getGroup_0() { return cGroup_0; }

		//options=Options
		public Assignment getOptionsAssignment_0_0() { return cOptionsAssignment_0_0; }

		//Options
		public RuleCall getOptionsOptionsParserRuleCall_0_0_0() { return cOptionsOptionsParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//element=Atom
		public Assignment getElementAssignment_0_2() { return cElementAssignment_0_2; }

		//Atom
		public RuleCall getElementAtomParserRuleCall_0_2_0() { return cElementAtomParserRuleCall_0_2_0; }

		//{Skip} "{skip();}"
		public Group getGroup_1() { return cGroup_1; }

		//{Skip}
		public Action getSkipAction_1_0() { return cSkipAction_1_0; }

		//"{skip();}"
		public Keyword getSkipKeyword_1_1() { return cSkipKeyword_1_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWildcardParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal returns RuleElement:
		//	RuleCall | Keyword | Wildcard;
		@Override
		public ParserRule getRule() { return rule; }

		//RuleCall | Keyword | Wildcard
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleCall
		public RuleCall getRuleCallParserRuleCall_0() { return cRuleCallParserRuleCall_0; }

		//Keyword
		public RuleCall getKeywordParserRuleCall_1() { return cKeywordParserRuleCall_1; }

		//Wildcard
		public RuleCall getWildcardParserRuleCall_2() { return cWildcardParserRuleCall_2; }
	}

	public class RuleCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRuleIDTerminalRuleCall_0_0 = (RuleCall)cRuleAssignment_0.eContents().get(0);
		private final RuleCall cEmptyParenthesisParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RuleCall:
		//	rule=ID EmptyParenthesis*;
		@Override
		public ParserRule getRule() { return rule; }

		//rule=ID EmptyParenthesis*
		public Group getGroup() { return cGroup; }

		//rule=ID
		public Assignment getRuleAssignment_0() { return cRuleAssignment_0; }

		//ID
		public RuleCall getRuleIDTerminalRuleCall_0_0() { return cRuleIDTerminalRuleCall_0_0; }

		//EmptyParenthesis*
		public RuleCall getEmptyParenthesisParserRuleCall_1() { return cEmptyParenthesisParserRuleCall_1; }
	}

	public class KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final RuleCall cEmptyParenthesisParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Keyword:
		//	value=STRING EmptyParenthesis*;
		@Override
		public ParserRule getRule() { return rule; }

		//value=STRING EmptyParenthesis*
		public Group getGroup() { return cGroup; }

		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//EmptyParenthesis*
		public RuleCall getEmptyParenthesisParserRuleCall_1() { return cEmptyParenthesisParserRuleCall_1; }
	}

	public class WildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Wildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cEmptyParenthesisParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Wildcard:
		//	{Wildcard} "." EmptyParenthesis*;
		@Override
		public ParserRule getRule() { return rule; }

		//{Wildcard} "." EmptyParenthesis*
		public Group getGroup() { return cGroup; }

		//{Wildcard}
		public Action getWildcardAction_0() { return cWildcardAction_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//EmptyParenthesis*
		public RuleCall getEmptyParenthesisParserRuleCall_2() { return cEmptyParenthesisParserRuleCall_2; }
	}
	
	
	private AntlrGrammarElements pAntlrGrammar;
	private OptionsElements pOptions;
	private OptionValueElements pOptionValue;
	private IdOrIntElements pIdOrInt;
	private RuleElements pRule;
	private AlternativesElements pAlternatives;
	private GroupElements pGroup;
	private AtomElements pAtom;
	private OtherElementElements pOtherElement;
	private EmptyParenthesisElements pEmptyParenthesis;
	private ParenthesizedElements pParenthesized;
	private PredicatedElements pPredicated;
	private RuleOptionsElements pRuleOptions;
	private LiteralElements pLiteral;
	private RuleCallElements pRuleCall;
	private KeywordElements pKeyword;
	private WildcardElements pWildcard;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleAntlrGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AntlrGrammar:
	//	"grammar" name=ID ";" options=Options? rules+=Rule*;
	public AntlrGrammarElements getAntlrGrammarAccess() {
		return (pAntlrGrammar != null) ? pAntlrGrammar : (pAntlrGrammar = new AntlrGrammarElements());
	}
	
	public ParserRule getAntlrGrammarRule() {
		return getAntlrGrammarAccess().getRule();
	}

	//Options:
	//	{Options} "options" "{" optionValues+=OptionValue+ "}";
	public OptionsElements getOptionsAccess() {
		return (pOptions != null) ? pOptions : (pOptions = new OptionsElements());
	}
	
	public ParserRule getOptionsRule() {
		return getOptionsAccess().getRule();
	}

	//OptionValue:
	//	key=ID "=" value=IdOrInt ";";
	public OptionValueElements getOptionValueAccess() {
		return (pOptionValue != null) ? pOptionValue : (pOptionValue = new OptionValueElements());
	}
	
	public ParserRule getOptionValueRule() {
		return getOptionValueAccess().getRule();
	}

	//IdOrInt:
	//	ID | INT;
	public IdOrIntElements getIdOrIntAccess() {
		return (pIdOrInt != null) ? pIdOrInt : (pIdOrInt = new IdOrIntElements());
	}
	
	public ParserRule getIdOrIntRule() {
		return getIdOrIntAccess().getRule();
	}

	//Rule:
	//	^fragment?="fragment"? name=ID ":" body=Alternatives ";";
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Alternatives returns RuleElement:
	//	Group ({Alternatives.groups+=current} ("|" groups+=Group)+)?;
	public AlternativesElements getAlternativesAccess() {
		return (pAlternatives != null) ? pAlternatives : (pAlternatives = new AlternativesElements());
	}
	
	public ParserRule getAlternativesRule() {
		return getAlternativesAccess().getRule();
	}

	//Group returns RuleElement:
	//	Atom ({Group.elements+=current} elements+=Atom+)?;
	public GroupElements getGroupAccess() {
		return (pGroup != null) ? pGroup : (pGroup = new GroupElements());
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//Atom returns RuleElement:
	//	OtherElement ({ElementWithCardinality.element=current} cardinality=("+" | "*" | "?"))? | RuleOptions;
	public AtomElements getAtomAccess() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//OtherElement returns RuleElement:
	//	{NegatedElement} "~" element=(Parenthesized | Literal) | Predicated | Parenthesized | Literal
	//	({UntilElement.left=current} ".." right=Literal)?;
	public OtherElementElements getOtherElementAccess() {
		return (pOtherElement != null) ? pOtherElement : (pOtherElement = new OtherElementElements());
	}
	
	public ParserRule getOtherElementRule() {
		return getOtherElementAccess().getRule();
	}

	//EmptyParenthesis:
	//	"(" ")";
	public EmptyParenthesisElements getEmptyParenthesisAccess() {
		return (pEmptyParenthesis != null) ? pEmptyParenthesis : (pEmptyParenthesis = new EmptyParenthesisElements());
	}
	
	public ParserRule getEmptyParenthesisRule() {
		return getEmptyParenthesisAccess().getRule();
	}

	//Parenthesized returns RuleElement:
	//	"(" EmptyParenthesis* Alternatives ")" EmptyParenthesis*;
	public ParenthesizedElements getParenthesizedAccess() {
		return (pParenthesized != null) ? pParenthesized : (pParenthesized = new ParenthesizedElements());
	}
	
	public ParserRule getParenthesizedRule() {
		return getParenthesizedAccess().getRule();
	}

	//Predicated:
	//	"(" "(" EmptyParenthesis* predicate=Alternatives ")" EmptyParenthesis* "=>" element=OtherElement ")";
	public PredicatedElements getPredicatedAccess() {
		return (pPredicated != null) ? pPredicated : (pPredicated = new PredicatedElements());
	}
	
	public ParserRule getPredicatedRule() {
		return getPredicatedAccess().getRule();
	}

	//RuleOptions:
	//	options=Options ":" element=Atom | {Skip} "{skip();}";
	public RuleOptionsElements getRuleOptionsAccess() {
		return (pRuleOptions != null) ? pRuleOptions : (pRuleOptions = new RuleOptionsElements());
	}
	
	public ParserRule getRuleOptionsRule() {
		return getRuleOptionsAccess().getRule();
	}

	//Literal returns RuleElement:
	//	RuleCall | Keyword | Wildcard;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//RuleCall:
	//	rule=ID EmptyParenthesis*;
	public RuleCallElements getRuleCallAccess() {
		return (pRuleCall != null) ? pRuleCall : (pRuleCall = new RuleCallElements());
	}
	
	public ParserRule getRuleCallRule() {
		return getRuleCallAccess().getRule();
	}

	//Keyword:
	//	value=STRING EmptyParenthesis*;
	public KeywordElements getKeywordAccess() {
		return (pKeyword != null) ? pKeyword : (pKeyword = new KeywordElements());
	}
	
	public ParserRule getKeywordRule() {
		return getKeywordAccess().getRule();
	}

	//Wildcard:
	//	{Wildcard} "." EmptyParenthesis*;
	public WildcardElements getWildcardAccess() {
		return (pWildcard != null) ? pWildcard : (pWildcard = new WildcardElements());
	}
	
	public ParserRule getWildcardRule() {
		return getWildcardAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
