grammar org.eclipse.xtext.generator.parser.antlr.splitting.SimpleExpressions with org.eclipse.xtext.common.Terminals 

generate simpleExpressions "http://www.eclipse.org/xtext/generator/parser/antlr/simpleExpressions"

IfCondition:
  (elseif ?= 'else')? 'if' '(' condition = Expression ')' '{';
  

Expression returns Expression:
	AndExpression ( {OrExpression.left = current} '||' right = AndExpression )*
;

AndExpression returns Expression:
	Comparison ( {AndExpression.left = current} '&&' right = Comparison )*
;

Comparison returns Expression:
	PrefixExpression ( {Comparison.left = current} operator = ('=='|'<='|'>=') right = PrefixExpression)?
;

PrefixExpression returns Expression:
	{NotExpression} '!' expression = Atom
  | Atom
;

Atom returns Expression:
	ParenthesizedExpression
  | NumberLiteral
  | MethodCall
  | BooleanLiteral
;

NumberLiteral:
	value = INT
;

BooleanLiteral:
	{BooleanLiteral} (value?='true' | 'false')
;

ParenthesizedExpression returns Expression:
	'(' Expression ')'
;

MethodCall:
	value = MethodCallLiteral
;

MethodCallLiteral:
	FQN ('(' (Argument (',' Argument )*)? ')' ('.' MethodCallLiteral)? )?
;

Argument:
	MethodCallLiteral | INT
;

FQN:
	ID ('.' ID)*
;
