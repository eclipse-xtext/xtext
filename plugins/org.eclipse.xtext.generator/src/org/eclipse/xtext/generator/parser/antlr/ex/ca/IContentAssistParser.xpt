«REM»
/*******************************************************************************
 * Copyright (c) 2009 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»
«IMPORT org::eclipse::xtext::generator::parser::antlr»
«IMPORT org::eclipse::xtext::generator::parser::antlr::ex::common»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::parser::antlr::AntlrGrammar»
«EXTENSION org::eclipse::xtext::generator::parser::antlr::ContentAssistParser»
«EXTENSION org::eclipse::xtext::generator::grammarAccess::GrammarAccess»

«DEFINE parser(boolean partialParsing, AntlrFragmentHelper helper) FOR Grammar»
«FILE helper.getContentAssistParserClassName(this).asPath()+".java" SRC_GEN_UI-»
/*
«fileHeader()»
*/
package «helper.getContentAssistParserClassName(this).toJavaPackage()»;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import «getParserSuperClassName(partialParsing)»;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import «gaFQName()»;

public class «helper.getContentAssistParserClassName(this).toSimpleName()» extends «getParserSuperClassName(partialParsing).toSimpleName()» {
	
	@Inject
	private «gaSimpleName()» grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected «helper.getInternalContentAssistParserClassName(this)» createParser() {
		«helper.getInternalContentAssistParserClassName(this)» result = new «helper.getInternalContentAssistParserClassName(this)»(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
«EXPAND ruleName FOREACH helper.getAllAlternatives(this).union(helper.getAllGroups(this)).union(helper.getAllAssignments(this)).union(helper.getAllUnorderedGroups(this)).typeSelect(AbstractElement)-»
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			«helper.getInternalContentAssistParserClassName(this)» typedParser = («helper.getInternalContentAssistParserClassName(this)») parser;
			typedParser.«allParserRules().first().entryRuleName()»();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { «FOREACH initialHiddenTokens() AS hidden SEPARATOR ", "»"«hidden»"«ENDFOREACH-» };
	}
	
	public «gaSimpleName()» getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(«gaSimpleName()» grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE ruleName FOR AbstractElement-»
«ERROR "unsupported type: " + metaType.name-»
«ENDDEFINE»

«DEFINE ruleName FOR Alternatives-»
					put(grammarAccess.«grammarElementAccess()», "rule__«containingRule().gaRuleIdentifyer()»__«gaElementIdentifyer()»");
«ENDDEFINE»

«DEFINE ruleName FOR Assignment-»
					put(grammarAccess.«grammarElementAccess()», "rule__«containingRule().gaRuleIdentifyer()»__«gaElementIdentifyer()»");
«ENDDEFINE»

«DEFINE ruleName FOR Group-»
					put(grammarAccess.«grammarElementAccess()», "rule__«containingRule().gaRuleIdentifyer()»__«gaElementIdentifyer()»__0");
«ENDDEFINE»

«DEFINE ruleName FOR UnorderedGroup-»
					put(grammarAccess.«grammarElementAccess()», "rule__«containingRule().gaRuleIdentifyer()»__«gaElementIdentifyer()»");
«ENDDEFINE»
