/* The following code was generated by JFlex 1.4.3 on 08.01.14 15:24 */

/*
* generated by Xtext
*/
package org.eclipse.xtend.ide.contentassist.antlr.internal;

import static org.eclipse.xtend.ide.contentassist.antlr.internal.InternalXtendParser.*;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

@SuppressWarnings({"all"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08.01.14 15:24 from the specification file
 * <tt>../org.eclipse.xtend.ide/src-gen/org/eclipse/xtend/ide/contentassist/antlr/internal/InternalXtendFlexer.flex</tt>
 */
public class InternalXtendFlexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\1\1\2\2\0\1\14\16\5\4\0\1\1\1\37\1\31"+
    "\1\27\1\4\1\41\1\42\1\30\1\43\1\44\1\13\1\45\1\46"+
    "\1\22\1\50\1\12\1\25\11\11\1\52\1\53\1\51\1\40\1\47"+
    "\1\54\1\55\1\56\1\17\1\10\1\67\1\60\1\24\2\4\1\65"+
    "\2\4\1\63\1\4\1\66\1\62\1\70\1\4\1\61\1\64\1\57"+
    "\3\4\1\26\2\4\1\71\1\6\1\72\1\3\1\15\1\0\1\73"+
    "\1\33\1\77\1\21\1\16\1\34\1\111\1\101\1\20\1\4\1\110"+
    "\1\23\1\103\1\32\1\100\1\102\1\4\1\76\1\74\1\75\1\7"+
    "\1\107\1\106\1\104\1\105\1\4\1\112\1\113\1\114\1\0\41\5"+
    "\2\0\4\4\4\0\1\4\1\36\1\0\1\5\7\0\1\4\4\0"+
    "\1\4\1\35\4\0\27\4\1\0\37\4\1\0\u01ca\4\4\0\14\4"+
    "\16\0\5\4\7\0\1\4\1\0\1\4\21\0\160\5\5\4\1\0"+
    "\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0\1\4\1\0"+
    "\24\4\1\0\123\4\1\0\213\4\1\0\5\5\2\0\236\4\11\0"+
    "\46\4\2\0\1\4\7\0\47\4\11\0\55\5\1\0\1\5\1\0"+
    "\2\5\1\0\2\5\1\0\1\5\10\0\33\4\5\0\3\4\15\0"+
    "\4\5\7\0\1\4\4\0\13\5\5\0\53\4\37\5\4\0\2\4"+
    "\1\5\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5\1\0"+
    "\4\5\2\4\12\5\3\4\2\0\1\4\17\0\1\5\1\4\1\5"+
    "\36\4\33\5\2\0\131\4\13\5\1\4\16\0\12\5\41\4\11\5"+
    "\2\4\4\0\1\4\5\0\26\4\4\5\1\4\11\5\1\4\3\5"+
    "\1\4\5\5\22\0\31\4\3\5\244\0\4\5\66\4\3\5\1\4"+
    "\22\5\1\4\7\5\12\4\2\5\2\0\12\5\1\0\7\4\1\0"+
    "\7\4\1\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5\2\0"+
    "\2\5\2\0\3\5\1\4\10\0\1\5\4\0\2\4\1\0\3\4"+
    "\2\5\2\0\12\5\4\4\7\0\1\4\5\0\3\5\1\0\6\4"+
    "\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4"+
    "\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5"+
    "\3\0\1\5\7\0\4\4\1\0\1\4\7\0\14\5\3\4\1\5"+
    "\13\0\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0\3\5"+
    "\1\0\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5\1\0"+
    "\1\4\17\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\7\5\2\0"+
    "\2\5\2\0\3\5\10\0\2\5\4\0\2\4\1\0\3\4\2\5"+
    "\2\0\12\5\1\0\1\4\20\0\1\5\1\4\1\0\6\4\3\0"+
    "\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0"+
    "\2\4\3\0\3\4\3\0\14\4\4\0\5\5\3\0\3\5\1\0"+
    "\4\5\2\0\1\4\6\0\1\5\16\0\12\5\11\0\1\4\7\0"+
    "\3\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\3\0\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5"+
    "\1\0\2\4\6\0\2\4\2\5\2\0\12\5\22\0\2\5\1\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0"+
    "\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0"+
    "\1\4\1\0\2\4\2\5\2\0\12\5\1\0\2\4\17\0\2\5"+
    "\1\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4\7\5\1\0"+
    "\3\5\1\0\4\5\1\4\10\0\1\5\10\0\2\4\2\5\2\0"+
    "\12\5\12\0\6\4\2\0\2\5\1\0\22\4\3\0\30\4\1\0"+
    "\11\4\1\0\1\4\2\0\7\4\3\0\1\5\4\0\6\5\1\0"+
    "\1\5\1\0\10\5\22\0\2\5\15\0\60\4\1\5\2\4\7\5"+
    "\4\0\10\4\10\5\1\0\12\5\47\0\2\4\1\0\1\4\2\0"+
    "\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0"+
    "\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5"+
    "\2\4\6\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0"+
    "\6\5\2\0\12\5\2\0\2\4\42\0\1\4\27\0\2\5\6\0"+
    "\12\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4"+
    "\1\0\44\4\4\0\24\5\1\0\2\5\5\4\13\5\1\0\44\5"+
    "\11\0\1\5\71\0\53\4\24\5\1\4\12\5\6\0\6\4\4\5"+
    "\4\4\3\5\1\4\3\5\2\4\7\5\3\4\4\5\15\4\14\5"+
    "\1\4\17\5\2\0\46\4\12\0\53\4\1\0\1\4\3\0\u0149\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\51\4"+
    "\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4\1\0\1\4"+
    "\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4\2\0\103\4"+
    "\2\0\3\5\40\0\20\4\20\0\125\4\14\0\u026c\4\2\0\21\4"+
    "\1\0\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0\4\4"+
    "\3\5\13\0\22\4\3\5\13\0\22\4\2\5\14\0\15\4\1\0"+
    "\3\4\1\0\2\5\14\0\64\4\40\5\3\0\1\4\3\0\2\4"+
    "\1\5\2\0\12\5\41\0\3\5\2\0\12\5\6\0\130\4\10\0"+
    "\51\4\1\5\1\4\5\0\106\4\12\0\35\4\3\0\14\5\4\0"+
    "\14\5\12\0\12\5\36\4\2\0\5\4\13\0\54\4\4\0\21\5"+
    "\7\4\2\5\6\0\12\5\46\0\27\4\5\5\4\0\65\4\12\5"+
    "\1\0\35\5\2\0\13\5\6\0\12\5\15\0\1\4\130\0\5\5"+
    "\57\4\21\5\7\4\4\0\12\5\21\0\11\5\14\0\3\5\36\4"+
    "\12\5\3\0\2\4\12\5\6\0\46\4\16\5\14\0\44\4\24\5"+
    "\10\0\12\5\3\0\3\4\12\5\44\4\122\0\3\5\1\0\25\5"+
    "\4\4\1\5\4\4\1\5\15\0\300\4\47\5\25\0\4\5\u0116\4"+
    "\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4"+
    "\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4"+
    "\4\0\15\4\5\0\3\4\1\0\7\4\16\0\5\5\32\0\5\5"+
    "\20\0\2\4\23\0\1\4\13\0\5\5\5\0\6\5\1\0\1\4"+
    "\15\0\1\4\20\0\15\4\3\0\32\4\26\0\15\5\4\0\1\5"+
    "\3\0\14\5\21\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4"+
    "\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4"+
    "\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\21\0\51\4"+
    "\u0a77\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4\3\5\16\0"+
    "\46\4\12\0\66\4\11\0\1\4\17\0\1\5\27\4\11\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\40\5\57\0\1\4\u01d5\0\3\4"+
    "\31\0\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4\2\0"+
    "\2\5\2\0\3\4\1\0\132\4\1\0\4\4\5\0\51\4\3\0"+
    "\136\4\21\0\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cc\4\64\0"+
    "\u048d\4\103\0\56\4\2\0\u010d\4\3\0\20\4\12\5\2\4\24\0"+
    "\57\4\1\5\14\0\2\5\1\0\31\4\10\0\120\4\2\5\45\0"+
    "\11\4\2\0\147\4\2\0\4\4\1\0\2\4\16\0\12\4\120\0"+
    "\10\4\1\5\3\4\1\5\4\4\1\5\27\4\5\5\20\0\1\4"+
    "\7\0\64\4\14\0\2\5\62\4\21\5\13\0\12\5\6\0\22\5"+
    "\6\4\3\0\1\4\4\0\12\5\34\4\10\5\2\0\27\4\15\5"+
    "\14\0\35\4\3\0\4\5\57\4\16\5\16\0\1\4\12\5\46\0"+
    "\51\4\16\5\11\0\3\4\1\5\10\4\2\5\2\0\12\5\6\0"+
    "\27\4\3\0\1\4\1\5\4\0\60\4\1\5\1\4\3\5\2\4"+
    "\2\5\5\4\2\5\1\4\1\5\1\4\30\0\3\4\43\0\6\4"+
    "\2\0\6\4\2\0\6\4\11\0\7\4\1\0\7\4\221\0\43\4"+
    "\10\5\1\0\2\5\2\0\12\5\6\0\u2ba4\4\14\0\27\4\4\0"+
    "\61\4\u2104\0\u012e\4\2\0\76\4\2\0\152\4\46\0\7\4\14\0"+
    "\5\4\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4\1\0"+
    "\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0"+
    "\100\4\2\0\66\4\50\0\15\4\3\0\20\5\20\0\7\5\14\0"+
    "\2\4\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0"+
    "\1\5\4\0\1\4\13\0\12\5\7\0\32\4\4\0\1\4\1\0"+
    "\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0"+
    "\3\4\3\0\2\4\3\0\2\4\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\4\3\1\7\1\3\1\4\1\10\2\1\2\3"+
    "\1\11\1\1\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\4\3\1\31\1\32\11\3\1\33\1\34\1\35"+
    "\3\0\1\36\1\37\1\40\1\41\5\3\1\42\3\3"+
    "\1\43\1\44\1\45\1\3\1\46\1\40\1\0\1\47"+
    "\1\40\1\0\1\47\5\3\1\11\1\50\1\0\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\4\3\1\65\2\3\1\66\20\3"+
    "\1\67\1\40\1\36\2\40\1\37\1\0\1\40\7\3"+
    "\1\70\1\3\1\71\1\46\1\72\1\3\1\73\2\3"+
    "\1\74\1\11\1\75\1\0\1\76\1\77\1\100\1\101"+
    "\1\102\12\3\1\103\15\3\1\104\1\105\2\0\1\106"+
    "\1\0\1\107\1\110\10\3\1\0\1\72\1\111\1\112"+
    "\2\3\1\11\1\75\1\113\1\3\1\114\10\3\1\115"+
    "\4\3\1\116\20\3\1\0\1\46\1\72\1\117\1\120"+
    "\1\75\1\121\2\3\1\122\3\3\1\123\2\3\1\124"+
    "\2\3\1\125\1\126\6\3\1\127\2\3\1\130\3\3"+
    "\1\131\2\3\1\72\1\3\1\75\1\132\1\133\3\3"+
    "\1\134\1\135\1\136\1\137\1\140\1\141\1\3\1\142"+
    "\3\3\1\143\4\3\1\144\1\3\1\145\4\3\1\146"+
    "\1\147\5\3\1\150\2\3\1\151\1\152\1\3\1\153"+
    "\1\3\1\154\1\3\1\155\1\3\1\156\1\157\1\160"+
    "\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483"+
    "\0\115\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e"+
    "\0\u06eb\0\115\0\u0738\0\115\0\115\0\u0785\0\115\0\u07d2"+
    "\0\u081f\0\u086c\0\u08b9\0\115\0\u0906\0\115\0\u0953\0\u09a0"+
    "\0\u09ed\0\u0a3a\0\115\0\115\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e"+
    "\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\115\0\u0d3c\0\115"+
    "\0\u0181\0\u0d89\0\u0dd6\0\115\0\u0e23\0\u0e70\0\115\0\u0ebd"+
    "\0\u0f0a\0\u0f57\0\u0fa4\0\u0ff1\0\u0134\0\u103e\0\u108b\0\u10d8"+
    "\0\u0134\0\115\0\115\0\u1125\0\u1172\0\u11bf\0\u120c\0\u1259"+
    "\0\u051d\0\u12a6\0\115\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427"+
    "\0\u1474\0\115\0\u14c1\0\u150e\0\u155b\0\115\0\115\0\115"+
    "\0\115\0\u15a8\0\u15f5\0\115\0\115\0\115\0\115\0\u1642"+
    "\0\u168f\0\u16dc\0\u1729\0\u0134\0\u1776\0\u17c3\0\u0134\0\u1810"+
    "\0\u185d\0\u18aa\0\u18f7\0\u1944\0\u1991\0\u19de\0\u1a2b\0\u1a78"+
    "\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93\0\115"+
    "\0\u1ce0\0\u1d2d\0\u1d7a\0\115\0\115\0\u1dc7\0\u1e14\0\u1e61"+
    "\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9"+
    "\0\u0134\0\u2116\0\u2163\0\u21b0\0\u0134\0\u21fd\0\u224a\0\u0134"+
    "\0\u2297\0\u22e4\0\u2331\0\115\0\115\0\115\0\115\0\115"+
    "\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599"+
    "\0\u25e6\0\u2633\0\u0134\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4"+
    "\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf\0\u2a1c"+
    "\0\u0134\0\u0134\0\u2a69\0\u2ab6\0\115\0\u1e14\0\u0134\0\u0134"+
    "\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e"+
    "\0\u2d6b\0\u2db8\0\115\0\u0134\0\u2e05\0\u2e52\0\115\0\u2e9f"+
    "\0\115\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba"+
    "\0\u3107\0\u3154\0\u31a1\0\u0134\0\u31ee\0\u323b\0\u3288\0\u32d5"+
    "\0\u0134\0\u3322\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0"+
    "\0\u353d\0\u358a\0\u35d7\0\u3624\0\u3671\0\u36be\0\u370b\0\u3758"+
    "\0\u37a5\0\u37f2\0\115\0\u383f\0\u388c\0\u0134\0\u38d9\0\u0134"+
    "\0\u3926\0\u3973\0\u0134\0\u39c0\0\u3a0d\0\u3a5a\0\u0134\0\u3aa7"+
    "\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb\0\u0134\0\u0134\0\u3c28\0\u3c75"+
    "\0\u3cc2\0\u3d0f\0\u3d5c\0\u3da9\0\u0134\0\u3df6\0\u3e43\0\u0134"+
    "\0\u3e90\0\u3edd\0\u3f2a\0\u0134\0\u3f77\0\u3fc4\0\115\0\u4011"+
    "\0\115\0\u0134\0\u0134\0\u405e\0\u40ab\0\u40f8\0\u0134\0\u0134"+
    "\0\u0134\0\u0134\0\u0134\0\u0134\0\u4145\0\u0134\0\u4192\0\u41df"+
    "\0\u422c\0\u0134\0\u4279\0\u42c6\0\u4313\0\u4360\0\u0134\0\u43ad"+
    "\0\u0134\0\u43fa\0\u4447\0\u4494\0\u44e1\0\u0134\0\u0134\0\u452e"+
    "\0\u457b\0\u45c8\0\u4615\0\u4662\0\u0134\0\u46af\0\u46fc\0\u0134"+
    "\0\u0134\0\u4749\0\u0134\0\u4796\0\u0134\0\u47e3\0\u0134\0\u4830"+
    "\0\u0134\0\u0134\0\u0134\0\u0134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\2\5\1\7"+
    "\1\10\1\11\1\3\1\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\5\1\17\1\20\1\5\1\21\1\22\1\23"+
    "\1\24\1\5\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\5\1\50\3\5"+
    "\1\51\1\52\3\5\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\5\1\63\3\5\1\64\1\65"+
    "\2\5\1\66\1\67\1\70\116\0\2\3\11\0\1\3"+
    "\104\0\1\5\1\0\1\71\2\5\4\0\5\5\1\0"+
    "\2\5\1\0\1\5\3\0\3\5\21\0\13\5\2\0"+
    "\17\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\17\5\12\0"+
    "\1\5\116\0\1\7\3\0\1\7\1\72\1\73\1\0"+
    "\1\74\1\0\2\74\1\7\5\0\1\73\1\74\23\0"+
    "\1\72\2\0\1\74\3\0\1\74\37\0\1\75\1\76"+
    "\114\0\1\77\105\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\1\100\3\5\3\0\1\101\2\5\21\0\13\5"+
    "\2\0\11\5\1\102\5\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\2\5"+
    "\1\103\10\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\1\104\1\5\1\105"+
    "\21\0\13\5\2\0\10\5\1\106\6\5\7\0\2\5"+
    "\1\71\3\5\3\0\1\5\1\107\1\5\1\110\1\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\5\5"+
    "\1\111\11\5\43\0\1\112\6\0\1\113\51\0\2\5"+
    "\1\71\3\5\3\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\4\5\1\114\6\5\2\0\17\5\14\0\1\7"+
    "\3\0\1\7\1\72\1\73\1\0\1\74\1\0\2\74"+
    "\1\7\1\115\4\0\1\73\1\74\23\0\1\72\2\0"+
    "\1\74\3\0\1\74\14\0\1\115\10\0\6\116\1\117"+
    "\21\116\1\120\64\116\6\121\1\122\22\121\1\123\63\121"+
    "\4\0\2\5\1\71\1\124\2\5\3\0\1\5\1\125"+
    "\3\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\17\5\7\0\2\5\1\71\3\5\3\0\3\5\1\126"+
    "\1\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\127\4\5\1\130\11\5\3\0\30\26\1\131\5\26"+
    "\1\132\56\26\36\0\1\133\116\0\1\134\114\0\1\135"+
    "\6\0\1\136\107\0\1\137\112\0\1\140\114\0\1\141"+
    "\124\0\1\142\104\0\1\143\6\0\1\144\117\0\1\145"+
    "\112\0\1\146\1\0\1\147\46\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\1\5\1\150\2\5\3\0\3\5"+
    "\21\0\13\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\5\5"+
    "\1\151\2\5\1\152\2\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\2\5\1\153\10\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\5\5\1\0\1\5\1\154\2\5"+
    "\3\0\3\5\21\0\13\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\5\5\1\0\4\5\3\0\1\155"+
    "\1\156\1\5\21\0\13\5\2\0\1\5\1\157\15\5"+
    "\7\0\2\5\1\71\1\160\2\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\2\5\1\161"+
    "\10\5\1\162\3\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\3\5\1\163\2\5\1\164\3\5\1\165\4\5\7\0"+
    "\2\5\1\71\3\5\3\0\1\5\1\166\3\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\17\5\7\0"+
    "\2\5\1\71\3\5\3\0\5\5\1\0\1\167\3\5"+
    "\3\0\3\5\21\0\13\5\2\0\1\170\2\5\1\171"+
    "\13\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\14\5\1\172"+
    "\2\5\7\0\2\5\1\71\1\173\2\5\3\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\1\174"+
    "\2\5\1\175\13\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\6\5\1\176\10\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\177\16\5\116\0\1\200\1\0\11\201\1\202\10\201"+
    "\1\203\2\201\1\202\17\201\1\203\47\201\20\204\2\74"+
    "\43\204\1\74\1\204\1\74\25\204\2\75\1\205\11\75"+
    "\1\206\100\75\13\76\1\207\101\76\4\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\1\5\1\210\15\5\7\0\2\5\1\71"+
    "\1\211\2\5\3\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\2\5\1\212\14\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\1\5\1\213\2\5\3\0\3\5"+
    "\21\0\13\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\5\1\214\1\215\14\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\7\5\1\216\7\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\2\5\1\217"+
    "\21\0\13\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\5\1\220\15\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\3\5"+
    "\1\221\7\5\2\0\17\5\13\0\2\222\3\0\3\222"+
    "\1\0\1\222\2\0\2\222\5\0\2\222\21\0\1\222"+
    "\1\0\1\222\6\0\1\222\3\0\1\222\3\0\1\222"+
    "\15\0\6\116\1\117\21\116\1\123\64\116\6\0\2\116"+
    "\20\0\5\116\40\0\2\116\46\0\1\223\72\0\2\121"+
    "\20\0\5\121\40\0\2\121\22\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\1\224\3\5\3\0\3\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\13\5\1\225\3\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\1\226\2\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\1\227\3\5\3\0\3\5\21\0\13\5\2\0"+
    "\17\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\3\5\1\230"+
    "\13\5\3\0\30\26\1\231\5\26\1\132\56\26\2\133"+
    "\1\232\11\133\1\233\100\133\40\0\1\234\114\0\1\235"+
    "\124\0\1\236\1\237\112\0\1\240\51\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\1\5\1\241\11\5\2\0\17\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\6\5\1\242\4\5\2\0\17\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\11\5\1\243\1\5\2\0\17\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\12\5\1\244\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\1\245\2\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\5\1\246\15\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\7\5\1\247\7\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\250\16\5\7\0\2\5\1\71\3\5\3\0\3\5"+
    "\1\251\1\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\1\252\2\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\12\5\1\253\4\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\3\5\1\254\13\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\7\5\1\255\7\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\2\5\1\256\14\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\257\16\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\1\5"+
    "\1\260\1\261\14\5\7\0\2\5\1\71\3\5\3\0"+
    "\1\5\1\262\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\1\5\1\263\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\1\5\1\264\1\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\4\5\1\265\12\5\7\0\2\5\1\71\3\5\3\0"+
    "\3\5\1\266\1\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\5\5\1\267\11\5\7\0\2\5\1\71"+
    "\3\5\3\0\3\5\1\270\1\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\17\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\1\271\3\5\3\0\3\5"+
    "\21\0\13\5\2\0\3\5\1\272\13\5\22\0\1\273"+
    "\13\0\1\273\72\0\1\202\3\0\1\202\1\0\1\274"+
    "\1\0\1\74\1\0\2\74\1\202\5\0\1\274\1\74"+
    "\26\0\1\74\3\0\1\74\36\0\1\202\5\0\1\273"+
    "\5\0\1\202\5\0\1\273\63\0\1\205\112\0\12\76"+
    "\1\275\1\276\101\76\4\0\2\5\1\71\3\5\3\0"+
    "\1\5\1\277\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\10\5\1\300\6\5\7\0\2\5\1\71\3\5\3\0"+
    "\1\5\1\301\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\4\5\1\302"+
    "\6\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\2\5\1\303\14\5\7\0\2\5\1\71\3\5\3\0"+
    "\1\5\1\304\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\1\305\3\5\3\0\3\5\21\0\13\5"+
    "\2\0\5\5\1\306\11\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\307\16\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\7\5\1\310\7\5\13\0\2\222\3\0\3\222\1\0"+
    "\1\222\2\0\2\222\1\0\1\311\3\0\2\222\21\0"+
    "\1\222\1\0\1\222\6\0\1\222\3\0\1\222\3\0"+
    "\1\222\15\0\30\223\1\312\5\223\1\313\56\223\4\0"+
    "\2\5\1\71\3\5\3\0\5\5\1\0\1\314\3\5"+
    "\3\0\3\5\21\0\13\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\1\315\16\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\1\5\1\316\15\5\3\0\30\26\1\317"+
    "\5\26\1\132\56\26\30\232\1\320\5\232\1\321\56\232"+
    "\2\0\1\232\116\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\2\5\1\322\10\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\2\5\1\323\10\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\1\5\1\324\2\5\3\0\3\5\21\0\7\5"+
    "\1\325\3\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\1\326"+
    "\12\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\5\5\1\327\11\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\2\5\1\330\14\5\7\0\2\5\1\71\3\5\3\0"+
    "\1\5\1\331\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\2\5\1\332\14\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\2\5\1\333\14\5\7\0\2\5\1\71\3\5\3\0"+
    "\1\5\1\334\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\5\5\1\335\11\5\7\0\2\5\1\71\3\5\3\0"+
    "\1\5\1\336\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\1\337\2\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\1\5"+
    "\1\340\15\5\7\0\2\5\1\71\3\5\3\0\1\5"+
    "\1\341\3\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\4\5"+
    "\1\342\12\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\1\343"+
    "\16\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\3\5\1\344"+
    "\13\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\1\345\3\5\3\0\3\5\21\0\13\5\2\0\17\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\15\5\1\346\1\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\14\5\1\347\2\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\2\5\1\350\14\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\1\351"+
    "\3\5\3\0\3\5\21\0\13\5\2\0\17\5\3\0"+
    "\20\204\2\0\43\204\1\0\1\204\1\0\25\204\20\0"+
    "\2\74\43\0\1\74\1\0\1\74\31\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\1\352\2\5"+
    "\21\0\13\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\3\5"+
    "\1\353\7\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\354\16\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\3\5\1\355\13\5\7\0\2\5\1\71\3\5\3\0"+
    "\1\5\1\356\3\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\3\5\1\357\13\5\7\0\2\5\1\71\1\360\2\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\1\361"+
    "\16\5\22\0\1\362\3\0\1\363\7\0\1\362\27\0"+
    "\1\363\31\0\30\223\1\364\5\223\1\313\56\223\4\0"+
    "\2\5\1\71\3\5\3\0\5\5\1\0\1\365\3\5"+
    "\3\0\3\5\21\0\13\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\1\5\1\366\3\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\17\5\3\0\30\232"+
    "\1\367\5\232\1\321\56\232\4\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\3\5"+
    "\1\370\7\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\7\5"+
    "\1\371\3\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\4\5"+
    "\1\372\6\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\1\5\1\373\2\5\3\0\3\5"+
    "\21\0\13\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\3\5"+
    "\1\374\7\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\2\5\1\375\14\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\3\5\1\376\13\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\3\5\1\377\13\5\7\0\2\5\1\71\3\5"+
    "\3\0\3\5\1\u0100\1\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\4\5\1\u0101\12\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\13\5\1\u0102\3\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\5\5\1\u0103\11\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\3\5\1\u0104\13\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\5\1\u0105\15\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\6\5\1\u0106\10\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\2\5\1\u0107\14\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\3\5\1\u0108\13\5\7\0\2\5\1\71\3\5"+
    "\3\0\3\5\1\u0109\1\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\u010a\16\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\u010b\16\5\7\0\2\5\1\71\3\5\3\0\1\5"+
    "\1\u010c\3\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\1\5"+
    "\1\u010d\3\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\4\5"+
    "\1\u010e\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\5\1\u010f\15\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\2\5\1\u0110"+
    "\10\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\1\u0111\2\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\4\5\3\0\2\5\1\u0112\21\0\13\5\2\0"+
    "\17\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\10\5\1\u0113"+
    "\6\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\2\5\1\u0114"+
    "\14\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\1\u0115\3\5\3\0\3\5\21\0\13\5\2\0\17\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\2\5\1\u0116\14\5"+
    "\23\0\1\363\44\0\1\363\27\0\30\223\1\u0117\5\223"+
    "\1\313\56\223\4\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\1\u0118\3\5\3\0\3\5\21\0\13\5\2\0"+
    "\17\5\3\0\30\232\1\u0119\5\232\1\321\56\232\4\0"+
    "\2\5\1\71\3\5\3\0\5\5\1\0\1\5\1\u011a"+
    "\2\5\3\0\3\5\21\0\13\5\2\0\17\5\7\0"+
    "\2\5\1\71\3\5\3\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\3\5\1\u011b\7\5\2\0\17\5\7\0"+
    "\2\5\1\71\3\5\3\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\1\u011c\12\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\1\u011d\16\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\1\u011e\16\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\4\5\1\u011f\12\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\6\5\1\u0120\10\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\1\5\1\u0121\15\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\2\5\1\u0122\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\1\u0123\2\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\1\5"+
    "\1\u0124\3\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\3\5"+
    "\1\u0125\1\5\1\0\4\5\3\0\3\5\21\0\13\5"+
    "\2\0\17\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\4\5"+
    "\1\u0126\12\5\7\0\2\5\1\71\3\5\3\0\5\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\16\5"+
    "\1\u0127\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\2\5\1\u0128"+
    "\14\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\4\5\1\u0129"+
    "\12\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\1\5\1\u012a"+
    "\15\5\7\0\2\5\1\71\3\5\3\0\3\5\1\u012b"+
    "\1\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\17\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\4\5\1\u012c"+
    "\12\5\7\0\2\5\1\71\3\5\3\0\5\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\1\u012d\16\5"+
    "\7\0\2\5\1\71\3\5\3\0\1\5\1\u012e\3\5"+
    "\1\0\4\5\3\0\3\5\21\0\13\5\2\0\17\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\2\5\1\u012f\14\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\4\5\1\u0130\12\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\12\5\1\u0131\4\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\1\5\1\u0132\11\5\2\0\17\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\2\5\1\u0133\14\5"+
    "\7\0\2\5\1\71\3\5\3\0\5\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\4\5\1\u0134\12\5"+
    "\7\0\2\5\1\71\3\5\3\0\4\5\1\u0135\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\17\5\7\0"+
    "\2\5\1\71\3\5\3\0\1\5\1\u0136\3\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\17\5\7\0"+
    "\2\5\1\71\3\5\3\0\1\5\1\u0137\3\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\17\5\7\0"+
    "\2\5\1\71\3\5\3\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\2\5\1\u0138\14\5\7\0"+
    "\2\5\1\71\3\5\3\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\5\5\1\u0139\11\5\7\0"+
    "\2\5\1\71\3\5\3\0\1\5\1\u013a\3\5\1\0"+
    "\4\5\3\0\3\5\21\0\13\5\2\0\17\5\7\0"+
    "\2\5\1\71\3\5\3\0\5\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\4\5\1\u013b\12\5\7\0"+
    "\2\5\1\71\3\5\3\0\5\5\1\0\4\5\3\0"+
    "\1\u013c\2\5\21\0\13\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\6\5\1\u013d\10\5\7\0\2\5"+
    "\1\71\3\5\3\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\4\5\1\u013e\6\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\3\5\1\u013f\1\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\5\5\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\2\5\1\u0140\14\5\7\0\2\5"+
    "\1\71\3\5\3\0\1\5\1\u0141\3\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\1\5\1\u0142\3\5\1\0\4\5"+
    "\3\0\3\5\21\0\13\5\2\0\17\5\7\0\2\5"+
    "\1\71\3\5\3\0\5\5\1\0\4\5\3\0\1\u0143"+
    "\2\5\21\0\13\5\2\0\17\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\5\5\1\u0144\11\5\7\0\2\5\1\71"+
    "\3\5\3\0\1\5\1\u0145\3\5\1\0\4\5\3\0"+
    "\3\5\21\0\13\5\2\0\17\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\2\5\1\u0146\14\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\3\5\1\u0147\7\5\2\0\17\5\7\0\2\5\1\71"+
    "\3\5\3\0\5\5\1\0\4\5\3\0\3\5\21\0"+
    "\13\5\2\0\5\5\1\u0148\11\5\7\0\2\5\1\71"+
    "\3\5\3\0\4\5\1\u0149\1\0\4\5\3\0\3\5"+
    "\21\0\13\5\2\0\17\5\7\0\2\5\1\71\3\5"+
    "\3\0\5\5\1\0\4\5\3\0\2\5\1\u014a\21\0"+
    "\13\5\2\0\17\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\3\5\21\0\13\5\2\0"+
    "\1\5\1\u014b\15\5\7\0\2\5\1\71\3\5\3\0"+
    "\5\5\1\0\4\5\3\0\1\u014c\2\5\21\0\13\5"+
    "\2\0\17\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18557];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\10\1\1\11\1\1\2\11"+
    "\1\1\1\11\4\1\1\11\1\1\1\11\4\1\2\11"+
    "\11\1\1\11\1\1\1\11\3\0\1\11\2\1\1\11"+
    "\12\1\2\11\3\1\1\0\2\1\1\0\1\11\6\1"+
    "\1\11\1\0\2\1\4\11\2\1\4\11\30\1\1\11"+
    "\3\1\2\11\1\0\24\1\1\0\5\11\32\1\2\0"+
    "\1\11\1\0\12\1\1\0\1\1\1\11\3\1\1\11"+
    "\1\1\1\11\40\1\1\0\1\11\43\1\1\11\1\1"+
    "\1\11\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public InternalXtendFlexer() {
    this((java.io.Reader)null);
  }

  public int getTokenLength() {
    return yylength();
  }
  
  public String getTokenText() {
    return yytext();
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public InternalXtendFlexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public InternalXtendFlexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2256) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 80: 
          { return KW_False;
          }
        case 114: break;
        case 33: 
          { return KW_AsteriskAsterisk;
          }
        case 115: break;
        case 51: 
          { return KW_QuestionMarkFullStop;
          }
        case 116: break;
        case 1: 
          { return RULE_ANY_OTHER;
          }
        case 117: break;
        case 6: 
          { return KW_Asterisk;
          }
        case 118: break;
        case 8: 
          { return KW_NumberSign;
          }
        case 119: break;
        case 64: 
          { return KW_FullStopFullStopFullStop;
          }
        case 120: break;
        case 4: 
          { return RULE_INT;
          }
        case 121: break;
        case 102: 
          { return KW_Package;
          }
        case 122: break;
        case 58: 
          { return RULE_RICH_TEXT;
          }
        case 123: break;
        case 60: 
          { return KW_For;
          }
        case 124: break;
        case 100: 
          { return KW_Default;
          }
        case 125: break;
        case 5: 
          { return KW_Solidus;
          }
        case 126: break;
        case 32: 
          { return 0; /* antlr <invalid> */
          }
        case 127: break;
        case 104: 
          { return KW_Dispatch;
          }
        case 128: break;
        case 92: 
          { return KW_Static;
          }
        case 129: break;
        case 22: 
          { return KW_Semicolon;
          }
        case 130: break;
        case 81: 
          { return KW_AFTER;
          }
        case 131: break;
        case 106: 
          { return KW_Override;
          }
        case 132: break;
        case 9: 
          { return RULE_RICH_TEXT_END;
          }
        case 133: break;
        case 84: 
          { return KW_Throw;
          }
        case 134: break;
        case 71: 
          { return KW_Else;
          }
        case 135: break;
        case 67: 
          { return KW_Try;
          }
        case 136: break;
        case 42: 
          { return KW_EqualsSignEqualsSign;
          }
        case 137: break;
        case 55: 
          { return KW_VerticalLineVerticalLine;
          }
        case 138: break;
        case 19: 
          { return KW_FullStop;
          }
        case 139: break;
        case 63: 
          { return KW_EqualsSignEqualsSignEqualsSign;
          }
        case 140: break;
        case 96: 
          { return KW_Return;
          }
        case 141: break;
        case 3: 
          { return RULE_ID;
          }
        case 142: break;
        case 73: 
          { return RULE_RICH_TEXT_START;
          }
        case 143: break;
        case 57: 
          { return KW_FOR;
          }
        case 144: break;
        case 14: 
          { return KW_LeftParenthesis;
          }
        case 145: break;
        case 78: 
          { return KW_Case;
          }
        case 146: break;
        case 56: 
          { return KW_Def;
          }
        case 147: break;
        case 27: 
          { return KW_LeftCurlyBracket;
          }
        case 148: break;
        case 35: 
          { return KW_Do;
          }
        case 149: break;
        case 31: 
          { return RULE_SL_COMMENT;
          }
        case 150: break;
        case 66: 
          { return KW_LessThanSignEqualsSignGreaterThanSign;
          }
        case 151: break;
        case 37: 
          { return KW_HyphenMinusGreaterThanSign;
          }
        case 152: break;
        case 48: 
          { return KW_LessThanSignEqualsSign;
          }
        case 153: break;
        case 26: 
          { return KW_RightSquareBracket;
          }
        case 154: break;
        case 110: 
          { return KW_Protected;
          }
        case 155: break;
        case 98: 
          { return KW_Public;
          }
        case 156: break;
        case 65: 
          { return KW_FullStopFullStopLessThanSign;
          }
        case 157: break;
        case 105: 
          { return KW_Abstract;
          }
        case 158: break;
        case 2: 
          { return RULE_WS;
          }
        case 159: break;
        case 13: 
          { return KW_Ampersand;
          }
        case 160: break;
        case 62: 
          { return KW_ExclamationMarkEqualsSignEqualsSign;
          }
        case 161: break;
        case 101: 
          { return KW_Finally;
          }
        case 162: break;
        case 25: 
          { return KW_LeftSquareBracket;
          }
        case 163: break;
        case 103: 
          { return KW_Private;
          }
        case 164: break;
        case 87: 
          { return KW_While;
          }
        case 165: break;
        case 93: 
          { return KW_Switch;
          }
        case 166: break;
        case 77: 
          { return KW_True;
          }
        case 167: break;
        case 90: 
          { return KW_ELSEIF;
          }
        case 168: break;
        case 88: 
          { return KW_BEFORE;
          }
        case 169: break;
        case 29: 
          { return KW_RightCurlyBracket;
          }
        case 170: break;
        case 111: 
          { return KW_Instanceof;
          }
        case 171: break;
        case 91: 
          { return KW_ENDFOR;
          }
        case 172: break;
        case 21: 
          { return KW_Colon;
          }
        case 173: break;
        case 16: 
          { return KW_PlusSign;
          }
        case 174: break;
        case 28: 
          { return KW_VerticalLine;
          }
        case 175: break;
        case 30: 
          { return RULE_DECIMAL;
          }
        case 176: break;
        case 20: 
          { return KW_LessThanSign;
          }
        case 177: break;
        case 11: 
          { return KW_EqualsSign;
          }
        case 178: break;
        case 107: 
          { return KW_Extension;
          }
        case 179: break;
        case 76: 
          { return KW_ELSE;
          }
        case 180: break;
        case 47: 
          { return KW_FullStopFullStop;
          }
        case 181: break;
        case 38: 
          { return RULE_HEX;
          }
        case 182: break;
        case 34: 
          { return KW_If;
          }
        case 183: break;
        case 94: 
          { return KW_Throws;
          }
        case 184: break;
        case 112: 
          { return KW_Implements;
          }
        case 185: break;
        case 83: 
          { return KW_Super;
          }
        case 186: break;
        case 97: 
          { return KW_Create;
          }
        case 187: break;
        case 108: 
          { return KW_Interface;
          }
        case 188: break;
        case 82: 
          { return KW_ENDIF;
          }
        case 189: break;
        case 75: 
          { return RULE_COMMENT_RICH_TEXT_INBETWEEN;
          }
        case 190: break;
        case 43: 
          { return KW_EqualsSignGreaterThanSign;
          }
        case 191: break;
        case 86: 
          { return KW_Catch;
          }
        case 192: break;
        case 41: 
          { return KW_ExclamationMarkEqualsSign;
          }
        case 193: break;
        case 17: 
          { return KW_Comma;
          }
        case 194: break;
        case 10: 
          { return KW_ExclamationMark;
          }
        case 195: break;
        case 50: 
          { return KW_ColonColon;
          }
        case 196: break;
        case 46: 
          { return KW_GreaterThanSignEqualsSign;
          }
        case 197: break;
        case 54: 
          { return KW_As;
          }
        case 198: break;
        case 7: 
          { return KW_HyphenMinus;
          }
        case 199: break;
        case 109: 
          { return KW_SEPARATOR;
          }
        case 200: break;
        case 95: 
          { return KW_Typeof;
          }
        case 201: break;
        case 18: 
          { return KW_GreaterThanSign;
          }
        case 202: break;
        case 12: 
          { return KW_PercentSign;
          }
        case 203: break;
        case 89: 
          { return KW_Import;
          }
        case 204: break;
        case 59: 
          { return KW_New;
          }
        case 205: break;
        case 40: 
          { return RULE_RICH_TEXT_INBETWEEN;
          }
        case 206: break;
        case 53: 
          { return KW_IF;
          }
        case 207: break;
        case 99: 
          { return KW_Extends;
          }
        case 208: break;
        case 24: 
          { return KW_CommercialAt;
          }
        case 209: break;
        case 74: 
          { return KW_Null;
          }
        case 210: break;
        case 49: 
          { return KW_LessThanSignGreaterThanSign;
          }
        case 211: break;
        case 52: 
          { return KW_QuestionMarkColon;
          }
        case 212: break;
        case 85: 
          { return KW_Class;
          }
        case 213: break;
        case 39: 
          { return RULE_STRING;
          }
        case 214: break;
        case 36: 
          { return KW_HyphenMinusEqualsSign;
          }
        case 215: break;
        case 61: 
          { return RULE_COMMENT_RICH_TEXT_END;
          }
        case 216: break;
        case 72: 
          { return KW_Enum;
          }
        case 217: break;
        case 23: 
          { return KW_QuestionMark;
          }
        case 218: break;
        case 68: 
          { return KW_Val;
          }
        case 219: break;
        case 45: 
          { return KW_PlusSignEqualsSign;
          }
        case 220: break;
        case 44: 
          { return KW_AmpersandAmpersand;
          }
        case 221: break;
        case 113: 
          { return KW_Annotation;
          }
        case 222: break;
        case 15: 
          { return KW_RightParenthesis;
          }
        case 223: break;
        case 79: 
          { return KW_Final;
          }
        case 224: break;
        case 69: 
          { return KW_Var;
          }
        case 225: break;
        case 70: 
          { return RULE_ML_COMMENT;
          }
        case 226: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return Token.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
