/*
* generated by Xtext
*/
package org.eclipse.xtend.ide.outline;

import static com.google.common.collect.Iterables.*;
import static com.google.common.collect.Lists.*;
import static com.google.common.collect.Sets.*;
import static java.util.Collections.*;

import java.util.Comparator;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jdt.ui.JavaElementImageDescriptor;
import org.eclipse.xtend.core.jvmmodel.DispatchHelper;
import org.eclipse.xtend.core.jvmmodel.XtendJvmModelInferrer;
import org.eclipse.xtend.core.xtend.XtendClass;
import org.eclipse.xtend.core.xtend.XtendFile;
import org.eclipse.xtend.core.xtend.XtendFunction;
import org.eclipse.xtend.core.xtend.XtendMember;
import org.eclipse.xtend.core.xtend.XtendTypeDeclaration;
import org.eclipse.xtend.ide.labeling.XtendImages;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmFeature;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;
import org.eclipse.xtext.xbase.ui.labeling.XbaseImageAdornments;

import com.google.inject.Inject;

/**
 * Customization of the default outline structure.
 * 
 * @author Jan Koehnlein
 */
public class XtendOutlineSourceTreeProvider extends AbstractMultiModeOutlineTreeProvider {
	@Inject
	private XbaseImageAdornments adornments;

	@Inject
	private DispatchHelper dispatchHelper;

	@Inject
	private XtendImages images;

	@Override
	public void internalCreateChildren(DocumentRootNode parentNode, EObject modelElement) {
		if (modelElement instanceof XtendFile) {
			XtendFile xtendFile = (XtendFile) modelElement;
			getOutlineNodeFactory().createPackageAndImporNodes(parentNode, xtendFile);
			for (XtendTypeDeclaration xtendType : xtendFile.getXtendTypes()) {
				createNodeForType(parentNode, xtendType);
			}
		}
	}

	private void createNodeForType(IOutlineNode parentNode, XtendTypeDeclaration xtendType) {
		EObjectNode classNode = createNode(parentNode, xtendType);
		createFeatureNodes(classNode, xtendType);
	}

	private void createFeatureNodes(IOutlineNode parentNode, XtendTypeDeclaration xtendType) {
		final JvmDeclaredType inferredType = getAssociations().getInferredType(xtendType);
		if (inferredType != null) {
			Set<JvmFeature> processedFeatures = newHashSet();
			createFeatureNodesForType(parentNode, xtendType, inferredType, inferredType, processedFeatures, 0);
		} else {
			for (XtendMember member : xtendType.getMembers())
				createNode(parentNode, member);
		}
	}

	private void createFeatureNodesForType(IOutlineNode parentNode, XtendTypeDeclaration xtendType,
			JvmDeclaredType inferredType, final JvmDeclaredType baseType, Set<JvmFeature> processedFeatures,
			int inheritanceDepth) {
		if (xtendType != null) {
			for (XtendTypeDeclaration nestedType : filter(xtendType.getMembers(), XtendTypeDeclaration.class))
				createNodeForType(parentNode, nestedType);
		}
		if (xtendType instanceof XtendClass) {
			createDispatchOperationNodes(parentNode, inferredType, baseType, processedFeatures, inheritanceDepth);
		}
		for (JvmFeature feature : filter(inferredType.getMembers(), JvmFeature.class)) {
			if (!processedFeatures.contains(feature)) {
				EObject primarySourceElement = getAssociations().getPrimarySourceElement(feature);
				if (feature instanceof JvmConstructor && feature.getDeclaringType().isLocal()) {
					continue;
				}
				IOutlineNode featureNode = createNodeForFeature(parentNode, baseType, feature,
						primarySourceElement != null ? primarySourceElement : feature, inheritanceDepth);
				EList<JvmGenericType> localClasses = feature.getLocalClasses();
				if (!localClasses.isEmpty()) {
					for (JvmGenericType jvmGenericType : localClasses) {
						Set<EObject> sourceElements = getAssociations().getSourceElements(jvmGenericType);
						for (EObject eObject : sourceElements) {
							if (eObject instanceof XtendTypeDeclaration)
								createNodeForType(featureNode, (XtendTypeDeclaration) eObject);
						}
					}
				}
				addJvmFeature(processedFeatures, feature);
			}
		}
		if (isShowInherited()) {
			if (inferredType instanceof JvmGenericType) {
				JvmTypeReference extendedClass = ((JvmGenericType) inferredType).getExtendedClass();
				if (extendedClass != null)
					createInheritedFeatureNodes(parentNode, baseType, processedFeatures, inheritanceDepth,
							extendedClass);
				for (JvmTypeReference extendedInterface : ((JvmGenericType) inferredType).getExtendedInterfaces()) {
					createInheritedFeatureNodes(parentNode, baseType, processedFeatures, inheritanceDepth,
							extendedInterface);
				}
			}
		}
	}

	private void createDispatchOperationNodes(IOutlineNode parentNode, JvmDeclaredType inferredType,
			final JvmDeclaredType baseType, Set<JvmFeature> processedFeatures, int inheritanceDepth) {
		for (JvmOperation operation : inferredType.getDeclaredOperations()) {
			if (dispatchHelper.isDispatcherFunction(operation)) {
				JvmOperation dispatcher = operation;
				XtendFeatureNode dispatcherNode = createNodeForFeature(parentNode, baseType, dispatcher, dispatcher,
						inheritanceDepth);
				if (dispatcherNode != null) {
					dispatcherNode.setDispatch(true);
					addJvmFeature(processedFeatures, dispatcher);
					boolean inheritsDispatchCases = false;
					Iterable<JvmOperation> dispatchCases;
					if (isShowInherited())
						dispatchCases = dispatchHelper.getAllDispatchCases(dispatcher);
					else {
						dispatchCases = newArrayList(dispatchHelper.getLocalDispatchCases(dispatcher));
						sort((List<JvmOperation>) dispatchCases, new Comparator<JvmOperation>() {
							public int compare(JvmOperation o1, JvmOperation o2) {
								return baseType.getMembers().indexOf(o1) - baseType.getMembers().indexOf(o2);
							}
						});
					}
					for (JvmOperation dispatchCase : dispatchCases) {
						inheritsDispatchCases |= dispatchCase.getDeclaringType() != baseType;
						XtendFunction xtendFunction = getAssociations().getXtendFunction(dispatchCase);
						if (xtendFunction == null) {
							createNodeForFeature(dispatcherNode, baseType, dispatchCase, dispatchCase, inheritanceDepth);
						} else {
							createNodeForFeature(dispatcherNode, baseType, dispatchCase, xtendFunction,
									inheritanceDepth);
						}
						addJvmFeature(processedFeatures, dispatchCase);
					}
					if (inheritsDispatchCases)
						dispatcherNode.setImageDescriptor(images.forDispatcherFunction(dispatcher.getVisibility(),
								adornments.get(dispatcher) | JavaElementImageDescriptor.OVERRIDES));
				}
			}
		}
	}

	private void addCreateExtensionJvmFeatures(Set<JvmFeature> processedFeatures, JvmFeature feature) {
		EObject sourceElement = getAssociations().getPrimarySourceElement(feature);
		if (!(sourceElement instanceof XtendFunction)) {
			return;
		}
		XtendFunction function = (XtendFunction) sourceElement;
		if (function.getCreateExtensionInfo() == null) {
			return;
		}
		for (EObject jvmElement : getAssociations().getJvmElements(function)) {
			if (jvmElement == feature || !(jvmElement instanceof JvmFeature)) {
				continue;
			}
			JvmFeature jvmFeature = (JvmFeature) jvmElement;
			if (jvmFeature.getSimpleName().startsWith(XtendJvmModelInferrer.CREATE_CHACHE_VARIABLE_PREFIX)) {
				processedFeatures.add(jvmFeature);
			}
			if (jvmFeature.getSimpleName().startsWith(XtendJvmModelInferrer.CREATE_INITIALIZER_PREFIX)) {
				processedFeatures.add(jvmFeature);
			}
		}
	}

	private void createInheritedFeatureNodes(IOutlineNode parentNode, JvmDeclaredType baseType,
			Set<JvmFeature> processedFeatures, int inheritanceDepth, JvmTypeReference superType) {
		if (superType.getType() instanceof JvmDeclaredType) {
			JvmDeclaredType superClass = ((JvmGenericType) superType.getType());
			EObject xtendSuperClass = getAssociations().getPrimarySourceElement(superType.getType());
			createFeatureNodesForType(parentNode, (XtendTypeDeclaration) xtendSuperClass, superClass, baseType,
					processedFeatures, inheritanceDepth + 1);
		}
	}

	private void addJvmFeature(Set<JvmFeature> processedFeatures, JvmFeature feature) {
		processedFeatures.add(feature);
		addCreateExtensionJvmFeatures(processedFeatures, feature);
	}

}
