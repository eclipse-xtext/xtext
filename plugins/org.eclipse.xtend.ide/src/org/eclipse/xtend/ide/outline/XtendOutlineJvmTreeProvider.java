/*
* generated by Xtext
*/
package org.eclipse.xtend.ide.outline;

import static com.google.common.collect.Iterables.*;
import static com.google.common.collect.Sets.*;

import java.util.Set;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtend.core.xtend.XtendFile;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmFeature;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;

/**
 * Customization of the default outline structure.
 * 
 * @author Dennis Huebner
 */
public class XtendOutlineJvmTreeProvider extends AbstractMultiModeOutlineTreeProvider {

	@Override
	public void internalCreateChildren(DocumentRootNode parentNode, EObject modelElement) {
		String primaryPackage = null;
		if (modelElement instanceof XtendFile) {
			primaryPackage = getOutlineNodeFactory().createPackageAndImporNodes(parentNode, (XtendFile) modelElement);
		}
		EList<EObject> contents = modelElement.eResource().getContents();

		for (EObject eObject : contents) {
			if (eObject instanceof JvmDeclaredType) {
				JvmDeclaredType jvmDeclaredType = (JvmDeclaredType) eObject;
				String packageName = jvmDeclaredType.getPackageName();
				EObjectNode typeNode = createNodeForType(parentNode, jvmDeclaredType);
				if (packageName != null && !packageName.equals(primaryPackage)) {
					Object text = typeNode.getText();
					if (text instanceof StyledString) {
						typeNode.setText(((StyledString) text).append(new StyledString(" - " + packageName,
								StyledString.DECORATIONS_STYLER)));
					}
				}
			}
		}
	}

	private EObjectNode createNodeForType(IOutlineNode parentNode, JvmDeclaredType typeElement) {
		EObjectNode classNode = createNode(parentNode, typeElement);
		if (!getAssociations().isPrimaryJvmElement(typeElement)) {
			Object text = classNode.getText();
			if (text instanceof StyledString) {
				classNode.setText(new StyledString(text.toString(), StyledString.QUALIFIER_STYLER));
			}
		}
		Set<JvmFeature> processedFeatures = newHashSet();
		createFeatureNodesForType(classNode, typeElement, typeElement, processedFeatures, 0);
		return classNode;
	}

	private void createFeatureNodesForType(IOutlineNode parentNode, JvmDeclaredType inferredType,
			final JvmDeclaredType baseType, Set<JvmFeature> processedFeatures, int inheritanceDepth) {
		for (JvmDeclaredType nestedType : filter(inferredType.getMembers(), JvmDeclaredType.class))
			createNodeForType(parentNode, nestedType);
		for (JvmFeature feature : filter(inferredType.getMembers(), JvmFeature.class)) {
			if (feature instanceof JvmConstructor && feature.getDeclaringType().isLocal()) {
				continue;
			}
			IOutlineNode featureNode = createNodeForFeature(parentNode, baseType, feature, feature, inheritanceDepth);
			EList<JvmGenericType> localClasses = feature.getLocalClasses();
			if (!localClasses.isEmpty()) {
				for (JvmGenericType jvmGenericType : localClasses) {
					createNodeForType(featureNode, jvmGenericType);
				}
			}
		}
		if (isShowInherited()) {
			if (inferredType instanceof JvmGenericType) {
				JvmTypeReference extendedClass = ((JvmGenericType) inferredType).getExtendedClass();
				if (extendedClass != null)
					createInheritedFeatureNodes(parentNode, baseType, processedFeatures, inheritanceDepth,
							extendedClass);
				for (JvmTypeReference extendedInterface : ((JvmGenericType) inferredType).getExtendedInterfaces()) {
					createInheritedFeatureNodes(parentNode, baseType, processedFeatures, inheritanceDepth,
							extendedInterface);
				}
			}
		}
	}

	private void createInheritedFeatureNodes(IOutlineNode parentNode, JvmDeclaredType baseType,
			Set<JvmFeature> processedFeatures, int inheritanceDepth, JvmTypeReference superType) {
		if (superType.getType() instanceof JvmDeclaredType) {
			JvmDeclaredType superClass = ((JvmGenericType) superType.getType());
			createFeatureNodesForType(parentNode, superClass, baseType, processedFeatures, inheritanceDepth + 1);
		}
	}

}
