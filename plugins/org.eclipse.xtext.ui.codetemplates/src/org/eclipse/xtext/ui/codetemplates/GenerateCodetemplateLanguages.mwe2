module org.eclipse.xtext.ui.codetemplates.GenerateCodetemplateLanguages

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var templatesGrammarURI = "classpath:/org/eclipse/xtext/ui/codetemplates/Codetemplates.xtext"
var singleTemplateGrammarURI = "classpath:/org/eclipse/xtext/ui/codetemplates/SingleCodetemplate.xtext"
var templates.file.extensions = "codetemplates"
var singleTemplate.file.extensions = "___singlecodetemplate"
var projectName = "org.eclipse.xtext.ui.codetemplates"
var runtimeProject = "../${projectName}"
var uiProject = "${runtimeProject}.ui"
var lineDelimiter = '\n'

Workflow { 
    bean = StandaloneSetup {
    	ignoreBrokenProjectFiles = true
		platformUri = "${runtimeProject}/.."
		scanClassPath = true
		registerGenModelFile = "platform:/resource/org.eclipse.xtext/src/org/eclipse/xtext/Xtext.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/model/generated"
	}

	component = Generator auto-inject {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "../../tests/${projectName}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = templatesGrammarURI
			fileExtensions = templates.file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EMFGeneratorFragment auto-inject {
				emfRuntimeVersion = "2.9"
			}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = templates.file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment auto-inject {
			}
			
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment auto-inject {
				lexerGrammar = "org.eclipse.xtext.ui.codetemplates.lexer.CodetemplatesLexer"
				runtime = true
				antlrParam = "-lib"
				antlrParam = "${runtimeProject}/src-gen/org/eclipse/xtext/ui/codetemplates/parser/antlr/lexer"
			}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

			// formatter API 
			fragment = formatting.FormatterFragment {}
			
			// labeling API
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}
 
			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {
			}

			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {}

			fragment = parser.antlr.ex.ExternalAntlrLexerFragment auto-inject {
				lexerGrammar = "org.eclipse.xtext.ui.codetemplates.ui.highlighting.CodetemplatesHighlightingLexer"
				highlighting = true
			}

			fragment = parser.antlr.ex.ExternalAntlrLexerFragment auto-inject {
				lexerGrammar = "org.eclipse.xtext.ui.codetemplates.ui.contentassist.CodetemplatesContentAssistLexer"
				contentAssist = true
				antlrParam = "-lib"
				antlrParam = "${uiProject}/src-gen/org/eclipse/xtext/ui/codetemplates/ui/contentassist/antlr/lexer"
			}
			
			fragment = templates.CodetemplatesGeneratorFragment {
				suppressRestriction = false
			}
			fragment = junit.Junit4Fragment {}
		}
		language = {
			uri = singleTemplateGrammarURI
			fileExtensions = singleTemplate.file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = singleTemplate.file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment auto-inject {
			}
			
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment auto-inject {
				lexerGrammar = "org.eclipse.xtext.ui.codetemplates.lexer.SingleCodetemplateLexer"
				runtime = true
				antlrParam = "-lib"
				antlrParam = "${runtimeProject}/src-gen/org/eclipse/xtext/ui/codetemplates/parser/antlr/lexer"
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {}

			fragment = parser.antlr.ex.ExternalAntlrLexerFragment auto-inject {
				lexerGrammar = "org.eclipse.xtext.ui.codetemplates.ui.highlighting.SingleCodetemplateHighlightingLexer"
				highlighting = true
			}

			fragment = parser.antlr.ex.ExternalAntlrLexerFragment auto-inject {
				lexerGrammar = "org.eclipse.xtext.ui.codetemplates.ui.contentassist.SingleCodetemplateContentAssistLexer"
				contentAssist = true
				antlrParam = "-lib"
				antlrParam = "${uiProject}/src-gen/org/eclipse/xtext/ui/codetemplates/ui/contentassist/antlr/lexer"
			}
			fragment = junit.Junit4Fragment {}
		}
	}
}
