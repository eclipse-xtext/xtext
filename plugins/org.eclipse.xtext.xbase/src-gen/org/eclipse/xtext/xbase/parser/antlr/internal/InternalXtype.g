/*
* generated by Xtext
*/
grammar InternalXtype;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.xbase.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.xbase.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

}

@parser::members {

 	private XtypeGrammarAccess grammarAccess;
 	
    public InternalXtypeParser(TokenStream input, XtypeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "JvmTypeReference";	
   	}
   	
   	@Override
   	protected XtypeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleJvmTypeReference
entryRuleJvmTypeReference returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmTypeReferenceElements elementAccess = grammarAccess.getJvmTypeReferenceAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmTypeReference=ruleJvmTypeReference 
	 { $current=$iv_ruleJvmTypeReference.current; } 
	 EOF 
;

// Rule JvmTypeReference
ruleJvmTypeReference returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmTypeReferenceElements elementAccess = grammarAccess.getJvmTypeReferenceAccess();
 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(elementAccess.getJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
    }
    this_object=ruleJvmParameterizedTypeReference
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
((((
)	ruleArrayBrackets))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0(),
            $current);
    }
)
    { 
        newCompositeNode(elementAccess.getArrayBracketsParserRuleCall_0_1_0_1()); 
    }
ruleArrayBrackets
    { 
        afterParserOrEnumRuleCall();
    }
))*)
    |
    { 
        newCompositeNode(elementAccess.getXFunctionTypeRefParserRuleCall_1()); 
    }
    this_object=ruleXFunctionTypeRef
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayBrackets
entryRuleArrayBrackets returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.ArrayBracketsElements elementAccess = grammarAccess.getArrayBracketsAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleArrayBrackets=ruleArrayBrackets 
	 { $current=$iv_ruleArrayBrackets.current.getText(); }  
	 EOF 
;

// Rule ArrayBrackets
ruleArrayBrackets returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.ArrayBracketsElements elementAccess = grammarAccess.getArrayBracketsAccess();

    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getLeftSquareBracketKeyword_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getRightSquareBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXFunctionTypeRef
entryRuleXFunctionTypeRef returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.XFunctionTypeRefElements elementAccess = grammarAccess.getXFunctionTypeRefAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXFunctionTypeRef=ruleXFunctionTypeRef 
	 { $current=$iv_ruleXFunctionTypeRef.current; } 
	 EOF 
;

// Rule XFunctionTypeRef
ruleXFunctionTypeRef returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.XFunctionTypeRefElements elementAccess = grammarAccess.getXFunctionTypeRefAccess();
 
    }
    @after { leaveRule(); }:
((	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(elementAccess.getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_0_2());
    }
)?	other='=>' 
    {
    	newLeafNode(other, elementAccess.getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmParameterizedTypeReference
entryRuleJvmParameterizedTypeReference returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmParameterizedTypeReferenceElements elementAccess = grammarAccess.getJvmParameterizedTypeReferenceAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmParameterizedTypeReference=ruleJvmParameterizedTypeReference 
	 { $current=$iv_ruleJvmParameterizedTypeReference.current; } 
	 EOF 
;

// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmParameterizedTypeReferenceElements elementAccess = grammarAccess.getJvmParameterizedTypeReferenceAccess();
 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getTypeJvmTypeCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	other='<' 
    {
    	newLeafNode(other, elementAccess.getLessThanSignKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(elementAccess.getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		this_object=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		this_object=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*	other='>' 
    {
    	newLeafNode(other, elementAccess.getGreaterThanSignKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleJvmArgumentTypeReference
entryRuleJvmArgumentTypeReference returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmArgumentTypeReferenceElements elementAccess = grammarAccess.getJvmArgumentTypeReferenceAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmArgumentTypeReference=ruleJvmArgumentTypeReference 
	 { $current=$iv_ruleJvmArgumentTypeReference.current; } 
	 EOF 
;

// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmArgumentTypeReferenceElements elementAccess = grammarAccess.getJvmArgumentTypeReferenceAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getJvmTypeReferenceParserRuleCall_0()); 
    }
    this_object=ruleJvmTypeReference
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getJvmWildcardTypeReferenceParserRuleCall_1()); 
    }
    this_object=ruleJvmWildcardTypeReference
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJvmWildcardTypeReference
entryRuleJvmWildcardTypeReference returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmWildcardTypeReferenceElements elementAccess = grammarAccess.getJvmWildcardTypeReferenceAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmWildcardTypeReference=ruleJvmWildcardTypeReference 
	 { $current=$iv_ruleJvmWildcardTypeReference.current; } 
	 EOF 
;

// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmWildcardTypeReferenceElements elementAccess = grammarAccess.getJvmWildcardTypeReferenceAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getJvmWildcardTypeReferenceAction_0(),
            $current);
    }
)	other='?' 
    {
    	newLeafNode(other, elementAccess.getQuestionMarkKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(elementAccess.getConstraintsJvmUpperBoundParserRuleCall_2_0_0()); 
	    }
		this_object=ruleJvmUpperBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(elementAccess.getConstraintsJvmLowerBoundParserRuleCall_2_1_0()); 
	    }
		this_object=ruleJvmLowerBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleJvmUpperBound
entryRuleJvmUpperBound returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmUpperBoundElements elementAccess = grammarAccess.getJvmUpperBoundAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmUpperBound=ruleJvmUpperBound 
	 { $current=$iv_ruleJvmUpperBound.current; } 
	 EOF 
;

// Rule JvmUpperBound
ruleJvmUpperBound returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmUpperBoundElements elementAccess = grammarAccess.getJvmUpperBoundAccess();
 
    }
    @after { leaveRule(); }:
(	other='extends' 
    {
    	newLeafNode(other, elementAccess.getExtendsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmUpperBoundAnded
entryRuleJvmUpperBoundAnded returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmUpperBoundAndedElements elementAccess = grammarAccess.getJvmUpperBoundAndedAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmUpperBoundAnded=ruleJvmUpperBoundAnded 
	 { $current=$iv_ruleJvmUpperBoundAnded.current; } 
	 EOF 
;

// Rule JvmUpperBoundAnded
ruleJvmUpperBoundAnded returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmUpperBoundAndedElements elementAccess = grammarAccess.getJvmUpperBoundAndedAccess();
 
    }
    @after { leaveRule(); }:
(	other='&' 
    {
    	newLeafNode(other, elementAccess.getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBound
entryRuleJvmLowerBound returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmLowerBoundElements elementAccess = grammarAccess.getJvmLowerBoundAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmLowerBound=ruleJvmLowerBound 
	 { $current=$iv_ruleJvmLowerBound.current; } 
	 EOF 
;

// Rule JvmLowerBound
ruleJvmLowerBound returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmLowerBoundElements elementAccess = grammarAccess.getJvmLowerBoundAccess();
 
    }
    @after { leaveRule(); }:
(	other='super' 
    {
    	newLeafNode(other, elementAccess.getSuperKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.QualifiedNameElements elementAccess = grammarAccess.getQualifiedNameAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.QualifiedNameElements elementAccess = grammarAccess.getQualifiedNameAccess();

    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getValidIDParserRuleCall_0()); 
    }
    this_dataType=ruleValidID    {
		$current.merge(this_dataType);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(elementAccess.getValidIDParserRuleCall_1_1()); 
    }
    this_dataType=ruleValidID    {
		$current.merge(this_dataType);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.QualifiedNameWithWildcardElements elementAccess = grammarAccess.getQualifiedNameWithWildcardAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.QualifiedNameWithWildcardElements elementAccess = grammarAccess.getQualifiedNameWithWildcardAccess();

    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getQualifiedNameParserRuleCall_0()); 
    }
    this_dataType=ruleQualifiedName    {
		$current.merge(this_dataType);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getFullStopKeyword_1()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getAsteriskKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.ValidIDElements elementAccess = grammarAccess.getValidIDAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.ValidIDElements elementAccess = grammarAccess.getValidIDAccess();

    }
    @after { leaveRule(); }:
    this_token=RULE_ID    {
		$current.merge(this_token);
    }

    { 
    newLeafNode(this_token, elementAccess.getIDTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleXImportDeclaration
entryRuleXImportDeclaration returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.XImportDeclarationElements elementAccess = grammarAccess.getXImportDeclarationAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXImportDeclaration=ruleXImportDeclaration 
	 { $current=$iv_ruleXImportDeclaration.current; } 
	 EOF 
;

// Rule XImportDeclaration
ruleXImportDeclaration returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.XImportDeclarationElements elementAccess = grammarAccess.getXImportDeclarationAccess();
 
    }
    @after { leaveRule(); }:
(	other='import' 
    {
    	newLeafNode(other, elementAccess.getImportKeyword_0());
    }
(((
(
		other=	'static' 
    {
        newLeafNode(other, elementAccess.getStaticStaticKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "static", true, null);
	    }

)
)(
(
		other=	'extension' 
    {
        newLeafNode(other, elementAccess.getExtensionExtensionKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "extension", true, null);
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	other='.' 
    {
    	newLeafNode(other, elementAccess.getFullStopKeyword_1_0_3());
    }
	other='*' 
    {
    	newLeafNode(other, elementAccess.getAsteriskKeyword_1_0_4());
    }
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getImportedTypeJvmDeclaredTypeCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(elementAccess.getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0()); 
	    }
		this_dataType=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		this_dataType, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))(	other=';' 
    {
    	newLeafNode(other, elementAccess.getSemicolonKeyword_2());
    }
)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


