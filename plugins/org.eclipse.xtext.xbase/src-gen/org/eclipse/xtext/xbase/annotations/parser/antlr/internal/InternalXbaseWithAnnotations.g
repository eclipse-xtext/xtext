/*
* generated by Xtext
*/
grammar InternalXbaseWithAnnotations;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.xbase.annotations.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.xbase.annotations.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;

}

@parser::members {

 	private XbaseWithAnnotationsGrammarAccess grammarAccess;
 	
    public InternalXbaseWithAnnotationsParser(TokenStream input, XbaseWithAnnotationsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "XAnnotation";	
   	}
   	
   	@Override
   	protected XbaseWithAnnotationsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleXAnnotation
entryRuleXAnnotation returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess.XAnnotationElements elementAccess = grammarAccess.getXAnnotationAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXAnnotation=ruleXAnnotation 
	 { $current=$iv_ruleXAnnotation.current; } 
	 EOF 
;

// Rule XAnnotation
ruleXAnnotation returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess.XAnnotationElements elementAccess = grammarAccess.getXAnnotationAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXAnnotationAction_0(),
            $current);
    }
)	other='@' 
    {
    	newLeafNode(other, elementAccess.getCommercialAtKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getAnnotationTypeJvmAnnotationTypeCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'(' 
)=>	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_3_0());
    }
)(((
(
		{ 
	        newCompositeNode(elementAccess.getElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_0_0()); 
	    }
		this_object=ruleXAnnotationElementValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"elementValuePairs",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_3_1_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_1_1_0()); 
	    }
		this_object=ruleXAnnotationElementValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"elementValuePairs",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(
(
		{ 
	        newCompositeNode(elementAccess.getValueXAnnotationElementValueParserRuleCall_3_1_1_0()); 
	    }
		this_object=ruleXAnnotationElementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"value",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))?	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleXAnnotationElementValuePair
entryRuleXAnnotationElementValuePair returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements elementAccess = grammarAccess.getXAnnotationElementValuePairAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXAnnotationElementValuePair=ruleXAnnotationElementValuePair 
	 { $current=$iv_ruleXAnnotationElementValuePair.current; } 
	 EOF 
;

// Rule XAnnotationElementValuePair
ruleXAnnotationElementValuePair returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements elementAccess = grammarAccess.getXAnnotationElementValuePairAccess();
 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getElementJvmOperationCrossReference_0_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	other='=' 
    {
    	newLeafNode(other, elementAccess.getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getValueXAnnotationElementValueParserRuleCall_2_0()); 
	    }
		this_object=ruleXAnnotationElementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"value",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXAnnotationElementValueStringConcatenation
entryRuleXAnnotationElementValueStringConcatenation returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueStringConcatenationElements elementAccess = grammarAccess.getXAnnotationElementValueStringConcatenationAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXAnnotationElementValueStringConcatenation=ruleXAnnotationElementValueStringConcatenation 
	 { $current=$iv_ruleXAnnotationElementValueStringConcatenation.current; } 
	 EOF 
;

// Rule XAnnotationElementValueStringConcatenation
ruleXAnnotationElementValueStringConcatenation returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueStringConcatenationElements elementAccess = grammarAccess.getXAnnotationElementValueStringConcatenationAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXAnnotationElementValueParserRuleCall_0()); 
    }
    this_object=ruleXAnnotationElementValue
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXAnnotationElementValueBinaryOperationLeftOperandAction_1_0(),
            $current);
    }
)(
(
		other=	'+' 
    {
        newLeafNode(other, elementAccess.getOperatorPlusSignKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "operator", other, "+");
	    }

)
)(
(
		{ 
	        newCompositeNode(elementAccess.getRightOperandXAnnotationElementValueParserRuleCall_1_2_0()); 
	    }
		this_object=ruleXAnnotationElementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXAnnotationElementValue
entryRuleXAnnotationElementValue returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements elementAccess = grammarAccess.getXAnnotationElementValueAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXAnnotationElementValue=ruleXAnnotationElementValue 
	 { $current=$iv_ruleXAnnotationElementValue.current; } 
	 EOF 
;

// Rule XAnnotationElementValue
ruleXAnnotationElementValue returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements elementAccess = grammarAccess.getXAnnotationElementValueAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXAnnotationParserRuleCall_0()); 
    }
    this_object=ruleXAnnotation
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXListLiteralParserRuleCall_1()); 
    }
    this_object=ruleXListLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXStringLiteralParserRuleCall_2()); 
    }
    this_object=ruleXStringLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXBooleanLiteralParserRuleCall_3()); 
    }
    this_object=ruleXBooleanLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXNumberLiteralParserRuleCall_4()); 
    }
    this_object=ruleXNumberLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXTypeLiteralParserRuleCall_5()); 
    }
    this_object=ruleXTypeLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXAnnotationValueFieldReferenceParserRuleCall_6()); 
    }
    this_object=ruleXAnnotationValueFieldReference
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |(	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_7_0());
    }

    { 
        newCompositeNode(elementAccess.getXAnnotationElementValueStringConcatenationParserRuleCall_7_1()); 
    }
    this_object=ruleXAnnotationElementValueStringConcatenation
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_7_2());
    }
))
;





// Entry rule entryRuleXAnnotationValueFieldReference
entryRuleXAnnotationValueFieldReference returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess.XAnnotationValueFieldReferenceElements elementAccess = grammarAccess.getXAnnotationValueFieldReferenceAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXAnnotationValueFieldReference=ruleXAnnotationValueFieldReference 
	 { $current=$iv_ruleXAnnotationValueFieldReference.current; } 
	 EOF 
;

// Rule XAnnotationValueFieldReference
ruleXAnnotationValueFieldReference returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess.XAnnotationValueFieldReferenceElements elementAccess = grammarAccess.getXAnnotationValueFieldReferenceAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXFeatureCallAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getDeclaringTypeJvmDeclaredTypeCrossReference_1_0()); 
	    }
		ruleStaticQualifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_2_0()); 
	    }
		ruleIdOrSuper		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXExpression
entryRuleXExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XExpressionElements elementAccess = grammarAccess.getXExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXExpression=ruleXExpression 
	 { $current=$iv_ruleXExpression.current; } 
	 EOF 
;

// Rule XExpression
ruleXExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XExpressionElements elementAccess = grammarAccess.getXExpressionAccess();
 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(elementAccess.getXAssignmentParserRuleCall()); 
    }
    this_object=ruleXAssignment
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleXAssignment
entryRuleXAssignment returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XAssignmentElements elementAccess = grammarAccess.getXAssignmentAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXAssignment=ruleXAssignment 
	 { $current=$iv_ruleXAssignment.current; } 
	 EOF 
;

// Rule XAssignment
ruleXAssignment returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XAssignmentElements elementAccess = grammarAccess.getXAssignmentAccess();
 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            elementAccess.getXAssignmentAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
	    }
		ruleFeatureCallID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(elementAccess.getOpSingleAssignParserRuleCall_0_2()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getValueXAssignmentParserRuleCall_0_3_0()); 
	    }
		this_object=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"value",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
    { 
        newCompositeNode(elementAccess.getXOrExpressionParserRuleCall_1_0()); 
    }
    this_object=ruleXOrExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpMultiAssign
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXBinaryOperationLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
	    }
		ruleOpMultiAssign		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(elementAccess.getRightOperandXAssignmentParserRuleCall_1_1_1_0()); 
	    }
		this_object=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleOpSingleAssign
entryRuleOpSingleAssign returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpSingleAssignElements elementAccess = grammarAccess.getOpSingleAssignAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleOpSingleAssign=ruleOpSingleAssign 
	 { $current=$iv_ruleOpSingleAssign.current.getText(); }  
	 EOF 
;

// Rule OpSingleAssign
ruleOpSingleAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpSingleAssignElements elementAccess = grammarAccess.getOpSingleAssignAccess();

    }
    @after { leaveRule(); }:

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleOpMultiAssign
entryRuleOpMultiAssign returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpMultiAssignElements elementAccess = grammarAccess.getOpMultiAssignAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleOpMultiAssign=ruleOpMultiAssign 
	 { $current=$iv_ruleOpMultiAssign.current.getText(); }  
	 EOF 
;

// Rule OpMultiAssign
ruleOpMultiAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpMultiAssignElements elementAccess = grammarAccess.getOpMultiAssignAccess();

    }
    @after { leaveRule(); }:
(
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getPlusSignEqualsSignKeyword_0()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getHyphenMinusEqualsSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXOrExpression
entryRuleXOrExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XOrExpressionElements elementAccess = grammarAccess.getXOrExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXOrExpression=ruleXOrExpression 
	 { $current=$iv_ruleXOrExpression.current; } 
	 EOF 
;

// Rule XOrExpression
ruleXOrExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XOrExpressionElements elementAccess = grammarAccess.getXOrExpressionAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXAndExpressionParserRuleCall_0()); 
    }
    this_object=ruleXAndExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpOr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpOr		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(elementAccess.getRightOperandXAndExpressionParserRuleCall_1_1_0()); 
	    }
		this_object=ruleXAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOr
entryRuleOpOr returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpOrElements elementAccess = grammarAccess.getOpOrAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleOpOr=ruleOpOr 
	 { $current=$iv_ruleOpOr.current.getText(); }  
	 EOF 
;

// Rule OpOr
ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpOrElements elementAccess = grammarAccess.getOpOrAccess();

    }
    @after { leaveRule(); }:

	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getVerticalLineVerticalLineKeyword()); 
    }

    ;





// Entry rule entryRuleXAndExpression
entryRuleXAndExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XAndExpressionElements elementAccess = grammarAccess.getXAndExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXAndExpression=ruleXAndExpression 
	 { $current=$iv_ruleXAndExpression.current; } 
	 EOF 
;

// Rule XAndExpression
ruleXAndExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XAndExpressionElements elementAccess = grammarAccess.getXAndExpressionAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXEqualityExpressionParserRuleCall_0()); 
    }
    this_object=ruleXEqualityExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpAnd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpAnd		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(elementAccess.getRightOperandXEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		this_object=ruleXEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAnd
entryRuleOpAnd returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpAndElements elementAccess = grammarAccess.getOpAndAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleOpAnd=ruleOpAnd 
	 { $current=$iv_ruleOpAnd.current.getText(); }  
	 EOF 
;

// Rule OpAnd
ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpAndElements elementAccess = grammarAccess.getOpAndAccess();

    }
    @after { leaveRule(); }:

	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getAmpersandAmpersandKeyword()); 
    }

    ;





// Entry rule entryRuleXEqualityExpression
entryRuleXEqualityExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XEqualityExpressionElements elementAccess = grammarAccess.getXEqualityExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXEqualityExpression=ruleXEqualityExpression 
	 { $current=$iv_ruleXEqualityExpression.current; } 
	 EOF 
;

// Rule XEqualityExpression
ruleXEqualityExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XEqualityExpressionElements elementAccess = grammarAccess.getXEqualityExpressionAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXRelationalExpressionParserRuleCall_0()); 
    }
    this_object=ruleXRelationalExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpEquality
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpEquality		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(elementAccess.getRightOperandXRelationalExpressionParserRuleCall_1_1_0()); 
	    }
		this_object=ruleXRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpEquality
entryRuleOpEquality returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpEqualityElements elementAccess = grammarAccess.getOpEqualityAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleOpEquality=ruleOpEquality 
	 { $current=$iv_ruleOpEquality.current.getText(); }  
	 EOF 
;

// Rule OpEquality
ruleOpEquality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpEqualityElements elementAccess = grammarAccess.getOpEqualityAccess();

    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw='===' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getEqualsSignEqualsSignEqualsSignKeyword_2()); 
    }

    |
	kw='!==' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getExclamationMarkEqualsSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXRelationalExpression
entryRuleXRelationalExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XRelationalExpressionElements elementAccess = grammarAccess.getXRelationalExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXRelationalExpression=ruleXRelationalExpression 
	 { $current=$iv_ruleXRelationalExpression.current; } 
	 EOF 
;

// Rule XRelationalExpression
ruleXRelationalExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XRelationalExpressionElements elementAccess = grammarAccess.getXRelationalExpressionAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXOtherOperatorExpressionParserRuleCall_0()); 
    }
    this_object=ruleXOtherOperatorExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'instanceof' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXInstanceOfExpressionExpressionAction_1_0_0_0_0(),
            $current);
    }
)	other='instanceof' 
    {
    	newLeafNode(other, elementAccess.getInstanceofKeyword_1_0_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(elementAccess.getTypeJvmTypeReferenceParserRuleCall_1_0_1_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"type",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)(
(
		ruleOpCompare
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXBinaryOperationLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
	    }
		ruleOpCompare		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(elementAccess.getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0()); 
	    }
		this_object=ruleXOtherOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleOpCompare
entryRuleOpCompare returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpCompareElements elementAccess = grammarAccess.getOpCompareAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleOpCompare=ruleOpCompare 
	 { $current=$iv_ruleOpCompare.current.getText(); }  
	 EOF 
;

// Rule OpCompare
ruleOpCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpCompareElements elementAccess = grammarAccess.getOpCompareAccess();

    }
    @after { leaveRule(); }:
(
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getGreaterThanSignEqualsSignKeyword_0()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getGreaterThanSignKeyword_2()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getLessThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXOtherOperatorExpression
entryRuleXOtherOperatorExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XOtherOperatorExpressionElements elementAccess = grammarAccess.getXOtherOperatorExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXOtherOperatorExpression=ruleXOtherOperatorExpression 
	 { $current=$iv_ruleXOtherOperatorExpression.current; } 
	 EOF 
;

// Rule XOtherOperatorExpression
ruleXOtherOperatorExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XOtherOperatorExpressionElements elementAccess = grammarAccess.getXOtherOperatorExpressionAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXAdditiveExpressionParserRuleCall_0()); 
    }
    this_object=ruleXAdditiveExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpOther
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpOther		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(elementAccess.getRightOperandXAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		this_object=ruleXAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOther
entryRuleOpOther returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpOtherElements elementAccess = grammarAccess.getOpOtherAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleOpOther=ruleOpOther 
	 { $current=$iv_ruleOpOther.current.getText(); }  
	 EOF 
;

// Rule OpOther
ruleOpOther returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpOtherElements elementAccess = grammarAccess.getOpOtherAccess();

    }
    @after { leaveRule(); }:
(
	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getHyphenMinusGreaterThanSignKeyword_0()); 
    }

    |
	kw='..<' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getFullStopFullStopLessThanSignKeyword_1()); 
    }

    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getGreaterThanSignKeyword_2_0()); 
    }

	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getFullStopFullStopKeyword_2_1()); 
    }
)
    |
	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getFullStopFullStopKeyword_3()); 
    }

    |
	kw='=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getEqualsSignGreaterThanSignKeyword_4()); 
    }

    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getGreaterThanSignKeyword_5_0()); 
    }
((((
	'>' 

	'>' 
))=>(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getGreaterThanSignKeyword_5_1_0_0_0()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getGreaterThanSignKeyword_5_1_0_0_1()); 
    }
))
    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getGreaterThanSignKeyword_5_1_1()); 
    }
))
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getLessThanSignKeyword_6_0()); 
    }
((((
	'<' 

	'<' 
))=>(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getLessThanSignKeyword_6_1_0_0_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getLessThanSignKeyword_6_1_0_0_1()); 
    }
))
    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getLessThanSignKeyword_6_1_1()); 
    }
))
    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getLessThanSignGreaterThanSignKeyword_7()); 
    }

    |
	kw='?:' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getQuestionMarkColonKeyword_8()); 
    }

    |
	kw='<=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getLessThanSignEqualsSignGreaterThanSignKeyword_9()); 
    }
)
    ;





// Entry rule entryRuleXAdditiveExpression
entryRuleXAdditiveExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XAdditiveExpressionElements elementAccess = grammarAccess.getXAdditiveExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXAdditiveExpression=ruleXAdditiveExpression 
	 { $current=$iv_ruleXAdditiveExpression.current; } 
	 EOF 
;

// Rule XAdditiveExpression
ruleXAdditiveExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XAdditiveExpressionElements elementAccess = grammarAccess.getXAdditiveExpressionAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_object=ruleXMultiplicativeExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpAdd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpAdd		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(elementAccess.getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		this_object=ruleXMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAdd
entryRuleOpAdd returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpAddElements elementAccess = grammarAccess.getOpAddAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleOpAdd=ruleOpAdd 
	 { $current=$iv_ruleOpAdd.current.getText(); }  
	 EOF 
;

// Rule OpAdd
ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpAddElements elementAccess = grammarAccess.getOpAddAccess();

    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXMultiplicativeExpression
entryRuleXMultiplicativeExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XMultiplicativeExpressionElements elementAccess = grammarAccess.getXMultiplicativeExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXMultiplicativeExpression=ruleXMultiplicativeExpression 
	 { $current=$iv_ruleXMultiplicativeExpression.current; } 
	 EOF 
;

// Rule XMultiplicativeExpression
ruleXMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XMultiplicativeExpressionElements elementAccess = grammarAccess.getXMultiplicativeExpressionAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXUnaryOperationParserRuleCall_0()); 
    }
    this_object=ruleXUnaryOperation
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpMulti
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpMulti		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(elementAccess.getRightOperandXUnaryOperationParserRuleCall_1_1_0()); 
	    }
		this_object=ruleXUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpMulti
entryRuleOpMulti returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpMultiElements elementAccess = grammarAccess.getOpMultiAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleOpMulti=ruleOpMulti 
	 { $current=$iv_ruleOpMulti.current.getText(); }  
	 EOF 
;

// Rule OpMulti
ruleOpMulti returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpMultiElements elementAccess = grammarAccess.getOpMultiAccess();

    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getAsteriskKeyword_0()); 
    }

    |
	kw='**' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getAsteriskAsteriskKeyword_1()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getSolidusKeyword_2()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getPercentSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXUnaryOperation
entryRuleXUnaryOperation returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XUnaryOperationElements elementAccess = grammarAccess.getXUnaryOperationAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXUnaryOperation=ruleXUnaryOperation 
	 { $current=$iv_ruleXUnaryOperation.current; } 
	 EOF 
;

// Rule XUnaryOperation
ruleXUnaryOperation returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XUnaryOperationElements elementAccess = grammarAccess.getXUnaryOperationAccess();
 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            elementAccess.getXUnaryOperationAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
	    }
		ruleOpUnary		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(elementAccess.getOperandXUnaryOperationParserRuleCall_0_2_0()); 
	    }
		this_object=ruleXUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"operand",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(elementAccess.getXCastedExpressionParserRuleCall_1()); 
    }
    this_object=ruleXCastedExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpUnary
entryRuleOpUnary returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpUnaryElements elementAccess = grammarAccess.getOpUnaryAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleOpUnary=ruleOpUnary 
	 { $current=$iv_ruleOpUnary.current.getText(); }  
	 EOF 
;

// Rule OpUnary
ruleOpUnary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.OpUnaryElements elementAccess = grammarAccess.getOpUnaryAccess();

    }
    @after { leaveRule(); }:
(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getExclamationMarkKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getHyphenMinusKeyword_1()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getPlusSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleXCastedExpression
entryRuleXCastedExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XCastedExpressionElements elementAccess = grammarAccess.getXCastedExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXCastedExpression=ruleXCastedExpression 
	 { $current=$iv_ruleXCastedExpression.current; } 
	 EOF 
;

// Rule XCastedExpression
ruleXCastedExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XCastedExpressionElements elementAccess = grammarAccess.getXCastedExpressionAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXMemberFeatureCallParserRuleCall_0()); 
    }
    this_object=ruleXMemberFeatureCall
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'as' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXCastedExpressionTargetAction_1_0_0_0(),
            $current);
    }
)	other='as' 
    {
    	newLeafNode(other, elementAccess.getAsKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(elementAccess.getTypeJvmTypeReferenceParserRuleCall_1_1_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"type",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXMemberFeatureCall
entryRuleXMemberFeatureCall returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XMemberFeatureCallElements elementAccess = grammarAccess.getXMemberFeatureCallAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXMemberFeatureCall=ruleXMemberFeatureCall 
	 { $current=$iv_ruleXMemberFeatureCall.current; } 
	 EOF 
;

// Rule XMemberFeatureCall
ruleXMemberFeatureCall returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XMemberFeatureCallElements elementAccess = grammarAccess.getXMemberFeatureCallAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXPrimaryExpressionParserRuleCall_0()); 
    }
    this_object=ruleXPrimaryExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'.' 
(
(
		ruleFeatureCallID
)
)	ruleOpSingleAssign))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXAssignmentAssignableAction_1_0_0_0_0(),
            $current);
    }
)	other='.' 
    {
    	newLeafNode(other, elementAccess.getFullStopKeyword_1_0_0_0_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0()); 
	    }
		ruleFeatureCallID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(elementAccess.getOpSingleAssignParserRuleCall_1_0_0_0_3()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
))(
(
		{ 
	        newCompositeNode(elementAccess.getValueXAssignmentParserRuleCall_1_0_1_0()); 
	    }
		this_object=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"value",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)(	'.' 

    |(
(
	'?.' 
 

)
)
    |(
(
	'*.' 
 

)
))))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0(),
            $current);
    }
)(	other='.' 
    {
    	newLeafNode(other, elementAccess.getFullStopKeyword_1_1_0_0_1_0());
    }

    |(
(
		other=	'?.' 
    {
        newLeafNode(other, elementAccess.getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "nullSafe", true, "?.");
	    }

)
)
    |(
(
		other=	'*.' 
    {
        newLeafNode(other, elementAccess.getSpreadingAsteriskFullStopKeyword_1_1_0_0_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "spreading", true, "*.");
	    }

)
))))(	other='<' 
    {
    	newLeafNode(other, elementAccess.getLessThanSignKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0()); 
	    }
		this_object=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_1_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0()); 
	    }
		this_object=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*	other='>' 
    {
    	newLeafNode(other, elementAccess.getGreaterThanSignKeyword_1_1_1_3());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_1_1_2_0()); 
	    }
		ruleFeatureCallID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
	'(' 
 

)
)=>
(
		other=	'(' 
    {
        newLeafNode(other, elementAccess.getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(elementAccess.getMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0()); 
	    }
		this_object=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(elementAccess.getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_1_1_3_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_1_1_3_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(elementAccess.getMemberCallArgumentsXClosureParserRuleCall_1_1_4_0()); 
	    }
		this_object=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)?))*)
;





// Entry rule entryRuleXPrimaryExpression
entryRuleXPrimaryExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XPrimaryExpressionElements elementAccess = grammarAccess.getXPrimaryExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXPrimaryExpression=ruleXPrimaryExpression 
	 { $current=$iv_ruleXPrimaryExpression.current; } 
	 EOF 
;

// Rule XPrimaryExpression
ruleXPrimaryExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XPrimaryExpressionElements elementAccess = grammarAccess.getXPrimaryExpressionAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXConstructorCallParserRuleCall_0()); 
    }
    this_object=ruleXConstructorCall
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXBlockExpressionParserRuleCall_1()); 
    }
    this_object=ruleXBlockExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXSwitchExpressionParserRuleCall_2()); 
    }
    this_object=ruleXSwitchExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXFeatureCallParserRuleCall_3()); 
    }
    this_object=ruleXFeatureCall
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXLiteralParserRuleCall_4()); 
    }
    this_object=ruleXLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXIfExpressionParserRuleCall_5()); 
    }
    this_object=ruleXIfExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXForLoopExpressionParserRuleCall_6()); 
    }
    this_object=ruleXForLoopExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXWhileExpressionParserRuleCall_7()); 
    }
    this_object=ruleXWhileExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXDoWhileExpressionParserRuleCall_8()); 
    }
    this_object=ruleXDoWhileExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXThrowExpressionParserRuleCall_9()); 
    }
    this_object=ruleXThrowExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXReturnExpressionParserRuleCall_10()); 
    }
    this_object=ruleXReturnExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXTryCatchFinallyExpressionParserRuleCall_11()); 
    }
    this_object=ruleXTryCatchFinallyExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXParenthesizedExpressionParserRuleCall_12()); 
    }
    this_object=ruleXParenthesizedExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXLiteral
entryRuleXLiteral returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XLiteralElements elementAccess = grammarAccess.getXLiteralAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXLiteral=ruleXLiteral 
	 { $current=$iv_ruleXLiteral.current; } 
	 EOF 
;

// Rule XLiteral
ruleXLiteral returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XLiteralElements elementAccess = grammarAccess.getXLiteralAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXCollectionLiteralParserRuleCall_0()); 
    }
    this_object=ruleXCollectionLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
)	'[' 
))=>
    { 
        newCompositeNode(elementAccess.getXClosureParserRuleCall_1()); 
    }
    this_object=ruleXClosure
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(elementAccess.getXBooleanLiteralParserRuleCall_2()); 
    }
    this_object=ruleXBooleanLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXNumberLiteralParserRuleCall_3()); 
    }
    this_object=ruleXNumberLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXNullLiteralParserRuleCall_4()); 
    }
    this_object=ruleXNullLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXStringLiteralParserRuleCall_5()); 
    }
    this_object=ruleXStringLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXTypeLiteralParserRuleCall_6()); 
    }
    this_object=ruleXTypeLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXCollectionLiteral
entryRuleXCollectionLiteral returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XCollectionLiteralElements elementAccess = grammarAccess.getXCollectionLiteralAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXCollectionLiteral=ruleXCollectionLiteral 
	 { $current=$iv_ruleXCollectionLiteral.current; } 
	 EOF 
;

// Rule XCollectionLiteral
ruleXCollectionLiteral returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XCollectionLiteralElements elementAccess = grammarAccess.getXCollectionLiteralAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXSetLiteralParserRuleCall_0()); 
    }
    this_object=ruleXSetLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXListLiteralParserRuleCall_1()); 
    }
    this_object=ruleXListLiteral
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXSetLiteral
entryRuleXSetLiteral returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XSetLiteralElements elementAccess = grammarAccess.getXSetLiteralAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXSetLiteral=ruleXSetLiteral 
	 { $current=$iv_ruleXSetLiteral.current; } 
	 EOF 
;

// Rule XSetLiteral
ruleXSetLiteral returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XSetLiteralElements elementAccess = grammarAccess.getXSetLiteralAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXSetLiteralAction_0(),
            $current);
    }
)	other='#' 
    {
    	newLeafNode(other, elementAccess.getNumberSignKeyword_1());
    }
	other='{' 
    {
    	newLeafNode(other, elementAccess.getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(elementAccess.getElementsXExpressionParserRuleCall_3_0_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"elements",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getElementsXExpressionParserRuleCall_3_1_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"elements",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	other='}' 
    {
    	newLeafNode(other, elementAccess.getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleXListLiteral
entryRuleXListLiteral returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XListLiteralElements elementAccess = grammarAccess.getXListLiteralAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXListLiteral=ruleXListLiteral 
	 { $current=$iv_ruleXListLiteral.current; } 
	 EOF 
;

// Rule XListLiteral
ruleXListLiteral returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XListLiteralElements elementAccess = grammarAccess.getXListLiteralAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXListLiteralAction_0(),
            $current);
    }
)	other='#' 
    {
    	newLeafNode(other, elementAccess.getNumberSignKeyword_1());
    }
	other='[' 
    {
    	newLeafNode(other, elementAccess.getLeftSquareBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(elementAccess.getElementsXExpressionParserRuleCall_3_0_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"elements",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getElementsXExpressionParserRuleCall_3_1_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"elements",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	other=']' 
    {
    	newLeafNode(other, elementAccess.getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleXClosure
entryRuleXClosure returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XClosureElements elementAccess = grammarAccess.getXClosureAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXClosure=ruleXClosure 
	 { $current=$iv_ruleXClosure.current; } 
	 EOF 
;

// Rule XClosure
ruleXClosure returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XClosureElements elementAccess = grammarAccess.getXClosureAccess();
 
    }
    @after { leaveRule(); }:
(((((
)	'[' 
))=>((
    {
        $current = forceCreateModelElement(
            elementAccess.getXClosureAction_0_0_0(),
            $current);
    }
)	other='[' 
    {
    	newLeafNode(other, elementAccess.getLeftSquareBracketKeyword_0_0_1());
    }
))(((((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>(((
(
		{ 
	        newCompositeNode(elementAccess.getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0()); 
	    }
		this_object=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_1_0_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0()); 
	    }
		this_object=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		other=	'|' 
    {
        newLeafNode(other, elementAccess.getExplicitSyntaxVerticalLineKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))?(
(
		{ 
	        newCompositeNode(elementAccess.getExpressionXExpressionInClosureParserRuleCall_2_0()); 
	    }
		this_object=ruleXExpressionInClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"expression",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)	other=']' 
    {
    	newLeafNode(other, elementAccess.getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleXExpressionInClosure
entryRuleXExpressionInClosure returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XExpressionInClosureElements elementAccess = grammarAccess.getXExpressionInClosureAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXExpressionInClosure=ruleXExpressionInClosure 
	 { $current=$iv_ruleXExpressionInClosure.current; } 
	 EOF 
;

// Rule XExpressionInClosure
ruleXExpressionInClosure returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XExpressionInClosureElements elementAccess = grammarAccess.getXExpressionInClosureAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXBlockExpressionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(elementAccess.getExpressionsXExpressionInsideBlockParserRuleCall_1_0_0()); 
	    }
		this_object=ruleXExpressionInsideBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=';' 
    {
    	newLeafNode(other, elementAccess.getSemicolonKeyword_1_1());
    }
)?)*)
;





// Entry rule entryRuleXShortClosure
entryRuleXShortClosure returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XShortClosureElements elementAccess = grammarAccess.getXShortClosureAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXShortClosure=ruleXShortClosure 
	 { $current=$iv_ruleXShortClosure.current; } 
	 EOF 
;

// Rule XShortClosure
ruleXShortClosure returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XShortClosureElements elementAccess = grammarAccess.getXShortClosureAccess();
 
    }
    @after { leaveRule(); }:
(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>((
    {
        $current = forceCreateModelElement(
            elementAccess.getXClosureAction_0_0_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(elementAccess.getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0()); 
	    }
		this_object=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_0_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0()); 
	    }
		this_object=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		other=	'|' 
    {
        newLeafNode(other, elementAccess.getExplicitSyntaxVerticalLineKeyword_0_0_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))(
(
		{ 
	        newCompositeNode(elementAccess.getExpressionXExpressionParserRuleCall_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"expression",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXParenthesizedExpression
entryRuleXParenthesizedExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XParenthesizedExpressionElements elementAccess = grammarAccess.getXParenthesizedExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXParenthesizedExpression=ruleXParenthesizedExpression 
	 { $current=$iv_ruleXParenthesizedExpression.current; } 
	 EOF 
;

// Rule XParenthesizedExpression
ruleXParenthesizedExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XParenthesizedExpressionElements elementAccess = grammarAccess.getXParenthesizedExpressionAccess();
 
    }
    @after { leaveRule(); }:
(	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(elementAccess.getXExpressionParserRuleCall_1()); 
    }
    this_object=ruleXExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleXIfExpression
entryRuleXIfExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XIfExpressionElements elementAccess = grammarAccess.getXIfExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXIfExpression=ruleXIfExpression 
	 { $current=$iv_ruleXIfExpression.current; } 
	 EOF 
;

// Rule XIfExpression
ruleXIfExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XIfExpressionElements elementAccess = grammarAccess.getXIfExpressionAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXIfExpressionAction_0(),
            $current);
    }
)	other='if' 
    {
    	newLeafNode(other, elementAccess.getIfKeyword_1());
    }
	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getIfXExpressionParserRuleCall_3_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"if",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getThenXExpressionParserRuleCall_5_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"then",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	other='else' 
    {
    	newLeafNode(other, elementAccess.getElseKeyword_6_0());
    }
)(
(
		{ 
	        newCompositeNode(elementAccess.getElseXExpressionParserRuleCall_6_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"else",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleXSwitchExpression
entryRuleXSwitchExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XSwitchExpressionElements elementAccess = grammarAccess.getXSwitchExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXSwitchExpression=ruleXSwitchExpression 
	 { $current=$iv_ruleXSwitchExpression.current; } 
	 EOF 
;

// Rule XSwitchExpression
ruleXSwitchExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XSwitchExpressionElements elementAccess = grammarAccess.getXSwitchExpressionAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXSwitchExpressionAction_0(),
            $current);
    }
)	other='switch' 
    {
    	newLeafNode(other, elementAccess.getSwitchKeyword_1());
    }
((((((
(
ruleValidID
)
)	':' 
))=>((
(
		{ 
	        newCompositeNode(elementAccess.getLocalVarNameValidIDParserRuleCall_2_0_0_0_0_0()); 
	    }
		this_dataType=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"localVarName",
        		this_dataType, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	other=':' 
    {
    	newLeafNode(other, elementAccess.getColonKeyword_2_0_0_0_1());
    }
))?(
(
		{ 
	        newCompositeNode(elementAccess.getSwitchXExpressionParserRuleCall_2_0_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"switch",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((((	'(' 
(
(
ruleValidID
)
)	':' 
))=>(	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_2_1_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getLocalVarNameValidIDParserRuleCall_2_1_0_0_1_0()); 
	    }
		this_dataType=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"localVarName",
        		this_dataType, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	other=':' 
    {
    	newLeafNode(other, elementAccess.getColonKeyword_2_1_0_0_2());
    }
))(
(
		{ 
	        newCompositeNode(elementAccess.getSwitchXExpressionParserRuleCall_2_1_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"switch",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_2_1_2());
    }
))	other='{' 
    {
    	newLeafNode(other, elementAccess.getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getCasesXCasePartParserRuleCall_4_0()); 
	    }
		this_object=ruleXCasePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"cases",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)+(	other='default' 
    {
    	newLeafNode(other, elementAccess.getDefaultKeyword_5_0());
    }
	other=':' 
    {
    	newLeafNode(other, elementAccess.getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getDefaultXExpressionParserRuleCall_5_2_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"default",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))?	other='}' 
    {
    	newLeafNode(other, elementAccess.getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleXCasePart
entryRuleXCasePart returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XCasePartElements elementAccess = grammarAccess.getXCasePartAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXCasePart=ruleXCasePart 
	 { $current=$iv_ruleXCasePart.current; } 
	 EOF 
;

// Rule XCasePart
ruleXCasePart returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XCasePartElements elementAccess = grammarAccess.getXCasePartAccess();
 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(elementAccess.getTypeGuardJvmTypeReferenceParserRuleCall_0_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"typeGuard",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)?(	other='case' 
    {
    	newLeafNode(other, elementAccess.getCaseKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getCaseXExpressionParserRuleCall_1_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"case",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))?	other=':' 
    {
    	newLeafNode(other, elementAccess.getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getThenXExpressionParserRuleCall_3_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"then",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXForLoopExpression
entryRuleXForLoopExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XForLoopExpressionElements elementAccess = grammarAccess.getXForLoopExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXForLoopExpression=ruleXForLoopExpression 
	 { $current=$iv_ruleXForLoopExpression.current; } 
	 EOF 
;

// Rule XForLoopExpression
ruleXForLoopExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XForLoopExpressionElements elementAccess = grammarAccess.getXForLoopExpressionAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXForLoopExpressionAction_0(),
            $current);
    }
)	other='for' 
    {
    	newLeafNode(other, elementAccess.getForKeyword_1());
    }
	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getDeclaredParamJvmFormalParameterParserRuleCall_3_0()); 
	    }
		this_object=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)	other=':' 
    {
    	newLeafNode(other, elementAccess.getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getForExpressionXExpressionParserRuleCall_5_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"forExpression",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getEachExpressionXExpressionParserRuleCall_7_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"eachExpression",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXWhileExpression
entryRuleXWhileExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XWhileExpressionElements elementAccess = grammarAccess.getXWhileExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXWhileExpression=ruleXWhileExpression 
	 { $current=$iv_ruleXWhileExpression.current; } 
	 EOF 
;

// Rule XWhileExpression
ruleXWhileExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XWhileExpressionElements elementAccess = grammarAccess.getXWhileExpressionAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXWhileExpressionAction_0(),
            $current);
    }
)	other='while' 
    {
    	newLeafNode(other, elementAccess.getWhileKeyword_1());
    }
	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getPredicateXExpressionParserRuleCall_3_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getBodyXExpressionParserRuleCall_5_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"body",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXDoWhileExpression
entryRuleXDoWhileExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XDoWhileExpressionElements elementAccess = grammarAccess.getXDoWhileExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXDoWhileExpression=ruleXDoWhileExpression 
	 { $current=$iv_ruleXDoWhileExpression.current; } 
	 EOF 
;

// Rule XDoWhileExpression
ruleXDoWhileExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XDoWhileExpressionElements elementAccess = grammarAccess.getXDoWhileExpressionAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXDoWhileExpressionAction_0(),
            $current);
    }
)	other='do' 
    {
    	newLeafNode(other, elementAccess.getDoKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getBodyXExpressionParserRuleCall_2_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"body",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)	other='while' 
    {
    	newLeafNode(other, elementAccess.getWhileKeyword_3());
    }
	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getPredicateXExpressionParserRuleCall_5_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleXBlockExpression
entryRuleXBlockExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XBlockExpressionElements elementAccess = grammarAccess.getXBlockExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXBlockExpression=ruleXBlockExpression 
	 { $current=$iv_ruleXBlockExpression.current; } 
	 EOF 
;

// Rule XBlockExpression
ruleXBlockExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XBlockExpressionElements elementAccess = grammarAccess.getXBlockExpressionAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXBlockExpressionAction_0(),
            $current);
    }
)	other='{' 
    {
    	newLeafNode(other, elementAccess.getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(elementAccess.getExpressionsXExpressionInsideBlockParserRuleCall_2_0_0()); 
	    }
		this_object=ruleXExpressionInsideBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=';' 
    {
    	newLeafNode(other, elementAccess.getSemicolonKeyword_2_1());
    }
)?)*	other='}' 
    {
    	newLeafNode(other, elementAccess.getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleXExpressionInsideBlock
entryRuleXExpressionInsideBlock returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XExpressionInsideBlockElements elementAccess = grammarAccess.getXExpressionInsideBlockAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXExpressionInsideBlock=ruleXExpressionInsideBlock 
	 { $current=$iv_ruleXExpressionInsideBlock.current; } 
	 EOF 
;

// Rule XExpressionInsideBlock
ruleXExpressionInsideBlock returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XExpressionInsideBlockElements elementAccess = grammarAccess.getXExpressionInsideBlockAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getXVariableDeclarationParserRuleCall_0()); 
    }
    this_object=ruleXVariableDeclaration
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getXExpressionParserRuleCall_1()); 
    }
    this_object=ruleXExpression
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXVariableDeclaration
entryRuleXVariableDeclaration returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XVariableDeclarationElements elementAccess = grammarAccess.getXVariableDeclarationAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXVariableDeclaration=ruleXVariableDeclaration 
	 { $current=$iv_ruleXVariableDeclaration.current; } 
	 EOF 
;

// Rule XVariableDeclaration
ruleXVariableDeclaration returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XVariableDeclarationElements elementAccess = grammarAccess.getXVariableDeclarationAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXVariableDeclarationAction_0(),
            $current);
    }
)((
(
		other=	'var' 
    {
        newLeafNode(other, elementAccess.getWriteableVarKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "writeable", true, "var");
	    }

)
)
    |	other='val' 
    {
    	newLeafNode(other, elementAccess.getValKeyword_1_1());
    }
)(((((
(
ruleJvmTypeReference
)
)(
(
ruleValidID
)
)))=>((
(
		{ 
	        newCompositeNode(elementAccess.getTypeJvmTypeReferenceParserRuleCall_2_0_0_0_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"type",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(elementAccess.getNameValidIDParserRuleCall_2_0_0_1_0()); 
	    }
		this_dataType=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"name",
        		this_dataType, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(elementAccess.getNameValidIDParserRuleCall_2_1_0()); 
	    }
		this_dataType=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"name",
        		this_dataType, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))(	other='=' 
    {
    	newLeafNode(other, elementAccess.getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getRightXExpressionParserRuleCall_3_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"right",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleJvmFormalParameter
entryRuleJvmFormalParameter returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.JvmFormalParameterElements elementAccess = grammarAccess.getJvmFormalParameterAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmFormalParameter=ruleJvmFormalParameter 
	 { $current=$iv_ruleJvmFormalParameter.current; } 
	 EOF 
;

// Rule JvmFormalParameter
ruleJvmFormalParameter returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.JvmFormalParameterElements elementAccess = grammarAccess.getJvmFormalParameterAccess();
 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(elementAccess.getParameterTypeJvmTypeReferenceParserRuleCall_0_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"parameterType",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(elementAccess.getNameValidIDParserRuleCall_1_0()); 
	    }
		this_dataType=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"name",
        		this_dataType, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFullJvmFormalParameter
entryRuleFullJvmFormalParameter returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.FullJvmFormalParameterElements elementAccess = grammarAccess.getFullJvmFormalParameterAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleFullJvmFormalParameter=ruleFullJvmFormalParameter 
	 { $current=$iv_ruleFullJvmFormalParameter.current; } 
	 EOF 
;

// Rule FullJvmFormalParameter
ruleFullJvmFormalParameter returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.FullJvmFormalParameterElements elementAccess = grammarAccess.getFullJvmFormalParameterAccess();
 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(elementAccess.getParameterTypeJvmTypeReferenceParserRuleCall_0_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"parameterType",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(elementAccess.getNameValidIDParserRuleCall_1_0()); 
	    }
		this_dataType=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"name",
        		this_dataType, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXFeatureCall
entryRuleXFeatureCall returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XFeatureCallElements elementAccess = grammarAccess.getXFeatureCallAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXFeatureCall=ruleXFeatureCall 
	 { $current=$iv_ruleXFeatureCall.current; } 
	 EOF 
;

// Rule XFeatureCall
ruleXFeatureCall returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XFeatureCallElements elementAccess = grammarAccess.getXFeatureCallAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXFeatureCallAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getDeclaringTypeJvmDeclaredTypeCrossReference_1_0()); 
	    }
		ruleStaticQualifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)?(	other='<' 
    {
    	newLeafNode(other, elementAccess.getLessThanSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_1_0()); 
	    }
		this_object=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_2_1_0()); 
	    }
		this_object=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*	other='>' 
    {
    	newLeafNode(other, elementAccess.getGreaterThanSignKeyword_2_3());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getFeatureJvmIdentifiableElementCrossReference_3_0()); 
	    }
		ruleIdOrSuper		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
	'(' 
 

)
)=>
(
		other=	'(' 
    {
        newLeafNode(other, elementAccess.getExplicitOperationCallLeftParenthesisKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(elementAccess.getFeatureCallArgumentsXShortClosureParserRuleCall_4_1_0_0()); 
	    }
		this_object=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(elementAccess.getFeatureCallArgumentsXExpressionParserRuleCall_4_1_1_0_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_4_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getFeatureCallArgumentsXExpressionParserRuleCall_4_1_1_1_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_4_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(elementAccess.getFeatureCallArgumentsXClosureParserRuleCall_5_0()); 
	    }
		this_object=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFeatureCallID
entryRuleFeatureCallID returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.FeatureCallIDElements elementAccess = grammarAccess.getFeatureCallIDAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleFeatureCallID=ruleFeatureCallID 
	 { $current=$iv_ruleFeatureCallID.current.getText(); }  
	 EOF 
;

// Rule FeatureCallID
ruleFeatureCallID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.FeatureCallIDElements elementAccess = grammarAccess.getFeatureCallIDAccess();

    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getValidIDParserRuleCall_0()); 
    }
    this_dataType=ruleValidID    {
		$current.merge(this_dataType);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='extends' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getExtendsKeyword_1()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getStaticKeyword_2()); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getImportKeyword_3()); 
    }

    |
	kw='extension' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getExtensionKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleIdOrSuper
entryRuleIdOrSuper returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.IdOrSuperElements elementAccess = grammarAccess.getIdOrSuperAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleIdOrSuper=ruleIdOrSuper 
	 { $current=$iv_ruleIdOrSuper.current.getText(); }  
	 EOF 
;

// Rule IdOrSuper
ruleIdOrSuper returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.IdOrSuperElements elementAccess = grammarAccess.getIdOrSuperAccess();

    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getFeatureCallIDParserRuleCall_0()); 
    }
    this_dataType=ruleFeatureCallID    {
		$current.merge(this_dataType);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='super' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getSuperKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleStaticQualifier
entryRuleStaticQualifier returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.StaticQualifierElements elementAccess = grammarAccess.getStaticQualifierAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleStaticQualifier=ruleStaticQualifier 
	 { $current=$iv_ruleStaticQualifier.current.getText(); }  
	 EOF 
;

// Rule StaticQualifier
ruleStaticQualifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.StaticQualifierElements elementAccess = grammarAccess.getStaticQualifierAccess();

    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getValidIDParserRuleCall_0()); 
    }
    this_dataType=ruleValidID    {
		$current.merge(this_dataType);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getColonColonKeyword_1()); 
    }
)+
    ;





// Entry rule entryRuleXConstructorCall
entryRuleXConstructorCall returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XConstructorCallElements elementAccess = grammarAccess.getXConstructorCallAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXConstructorCall=ruleXConstructorCall 
	 { $current=$iv_ruleXConstructorCall.current; } 
	 EOF 
;

// Rule XConstructorCall
ruleXConstructorCall returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XConstructorCallElements elementAccess = grammarAccess.getXConstructorCallAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXConstructorCallAction_0(),
            $current);
    }
)	other='new' 
    {
    	newLeafNode(other, elementAccess.getNewKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getConstructorJvmConstructorCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	other='<' 
    {
    	newLeafNode(other, elementAccess.getLessThanSignKeyword_3_0());
    }
)(
(
		{ 
	        newCompositeNode(elementAccess.getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0()); 
	    }
		this_object=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0()); 
	    }
		this_object=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*	other='>' 
    {
    	newLeafNode(other, elementAccess.getGreaterThanSignKeyword_3_3());
    }
)?(((	'(' 
)=>	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_4_0());
    }
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(elementAccess.getArgumentsXShortClosureParserRuleCall_4_1_0_0()); 
	    }
		this_object=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(elementAccess.getArgumentsXExpressionParserRuleCall_4_1_1_0_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_4_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getArgumentsXExpressionParserRuleCall_4_1_1_1_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_4_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(elementAccess.getArgumentsXClosureParserRuleCall_5_0()); 
	    }
		this_object=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleXBooleanLiteral
entryRuleXBooleanLiteral returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XBooleanLiteralElements elementAccess = grammarAccess.getXBooleanLiteralAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXBooleanLiteral=ruleXBooleanLiteral 
	 { $current=$iv_ruleXBooleanLiteral.current; } 
	 EOF 
;

// Rule XBooleanLiteral
ruleXBooleanLiteral returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XBooleanLiteralElements elementAccess = grammarAccess.getXBooleanLiteralAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXBooleanLiteralAction_0(),
            $current);
    }
)(	other='false' 
    {
    	newLeafNode(other, elementAccess.getFalseKeyword_1_0());
    }

    |(
(
		other=	'true' 
    {
        newLeafNode(other, elementAccess.getIsTrueTrueKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "isTrue", true, "true");
	    }

)
)))
;





// Entry rule entryRuleXNullLiteral
entryRuleXNullLiteral returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XNullLiteralElements elementAccess = grammarAccess.getXNullLiteralAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXNullLiteral=ruleXNullLiteral 
	 { $current=$iv_ruleXNullLiteral.current; } 
	 EOF 
;

// Rule XNullLiteral
ruleXNullLiteral returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XNullLiteralElements elementAccess = grammarAccess.getXNullLiteralAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXNullLiteralAction_0(),
            $current);
    }
)	other='null' 
    {
    	newLeafNode(other, elementAccess.getNullKeyword_1());
    }
)
;





// Entry rule entryRuleXNumberLiteral
entryRuleXNumberLiteral returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XNumberLiteralElements elementAccess = grammarAccess.getXNumberLiteralAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXNumberLiteral=ruleXNumberLiteral 
	 { $current=$iv_ruleXNumberLiteral.current; } 
	 EOF 
;

// Rule XNumberLiteral
ruleXNumberLiteral returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XNumberLiteralElements elementAccess = grammarAccess.getXNumberLiteralAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXNumberLiteralAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(elementAccess.getValueNumberParserRuleCall_1_0()); 
	    }
		this_dataType=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"value",
        		this_dataType, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXStringLiteral
entryRuleXStringLiteral returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XStringLiteralElements elementAccess = grammarAccess.getXStringLiteralAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXStringLiteral=ruleXStringLiteral 
	 { $current=$iv_ruleXStringLiteral.current; } 
	 EOF 
;

// Rule XStringLiteral
ruleXStringLiteral returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XStringLiteralElements elementAccess = grammarAccess.getXStringLiteralAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXStringLiteralAction_0(),
            $current);
    }
)(
(
		this_token=RULE_STRING
		{
			newLeafNode(this_token, elementAccess.getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		this_token, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleXTypeLiteral
entryRuleXTypeLiteral returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XTypeLiteralElements elementAccess = grammarAccess.getXTypeLiteralAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXTypeLiteral=ruleXTypeLiteral 
	 { $current=$iv_ruleXTypeLiteral.current; } 
	 EOF 
;

// Rule XTypeLiteral
ruleXTypeLiteral returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XTypeLiteralElements elementAccess = grammarAccess.getXTypeLiteralAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXTypeLiteralAction_0(),
            $current);
    }
)	other='typeof' 
    {
    	newLeafNode(other, elementAccess.getTypeofKeyword_1());
    }
	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getTypeJvmTypeCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(elementAccess.getArrayDimensionsArrayBracketsParserRuleCall_4_0()); 
	    }
		this_dataType=ruleArrayBrackets		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"arrayDimensions",
        		this_dataType, 
        		"ArrayBrackets");
	        afterParserOrEnumRuleCall();
	    }

)
)*	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleXThrowExpression
entryRuleXThrowExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XThrowExpressionElements elementAccess = grammarAccess.getXThrowExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXThrowExpression=ruleXThrowExpression 
	 { $current=$iv_ruleXThrowExpression.current; } 
	 EOF 
;

// Rule XThrowExpression
ruleXThrowExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XThrowExpressionElements elementAccess = grammarAccess.getXThrowExpressionAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXThrowExpressionAction_0(),
            $current);
    }
)	other='throw' 
    {
    	newLeafNode(other, elementAccess.getThrowKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"expression",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXReturnExpression
entryRuleXReturnExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XReturnExpressionElements elementAccess = grammarAccess.getXReturnExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXReturnExpression=ruleXReturnExpression 
	 { $current=$iv_ruleXReturnExpression.current; } 
	 EOF 
;

// Rule XReturnExpression
ruleXReturnExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XReturnExpressionElements elementAccess = grammarAccess.getXReturnExpressionAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXReturnExpressionAction_0(),
            $current);
    }
)	other='return' 
    {
    	newLeafNode(other, elementAccess.getReturnKeyword_1());
    }
((
(
ruleXExpression
)
)=>
(
		{ 
	        newCompositeNode(elementAccess.getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"expression",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleXTryCatchFinallyExpression
entryRuleXTryCatchFinallyExpression returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XTryCatchFinallyExpressionElements elementAccess = grammarAccess.getXTryCatchFinallyExpressionAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXTryCatchFinallyExpression=ruleXTryCatchFinallyExpression 
	 { $current=$iv_ruleXTryCatchFinallyExpression.current; } 
	 EOF 
;

// Rule XTryCatchFinallyExpression
ruleXTryCatchFinallyExpression returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XTryCatchFinallyExpressionElements elementAccess = grammarAccess.getXTryCatchFinallyExpressionAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getXTryCatchFinallyExpressionAction_0(),
            $current);
    }
)	other='try' 
    {
    	newLeafNode(other, elementAccess.getTryKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"expression",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)((((	'catch' 
)=>
(
		{ 
	        newCompositeNode(elementAccess.getCatchClausesXCatchClauseParserRuleCall_3_0_0_0()); 
	    }
		this_object=ruleXCatchClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"catchClauses",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)+(((	'finally' 
)=>	other='finally' 
    {
    	newLeafNode(other, elementAccess.getFinallyKeyword_3_0_1_0());
    }
)(
(
		{ 
	        newCompositeNode(elementAccess.getFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"finallyExpression",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	other='finally' 
    {
    	newLeafNode(other, elementAccess.getFinallyKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getFinallyExpressionXExpressionParserRuleCall_3_1_1_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"finallyExpression",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleXCatchClause
entryRuleXCatchClause returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XCatchClauseElements elementAccess = grammarAccess.getXCatchClauseAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXCatchClause=ruleXCatchClause 
	 { $current=$iv_ruleXCatchClause.current; } 
	 EOF 
;

// Rule XCatchClause
ruleXCatchClause returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.XCatchClauseElements elementAccess = grammarAccess.getXCatchClauseAccess();
 
    }
    @after { leaveRule(); }:
(((	'catch' 
)=>	other='catch' 
    {
    	newLeafNode(other, elementAccess.getCatchKeyword_0());
    }
)	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0()); 
	    }
		this_object=ruleFullJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getExpressionXExpressionParserRuleCall_4_0()); 
	    }
		this_object=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"expression",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.QualifiedNameElements elementAccess = grammarAccess.getQualifiedNameAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.QualifiedNameElements elementAccess = grammarAccess.getQualifiedNameAccess();

    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getValidIDParserRuleCall_0()); 
    }
    this_dataType=ruleValidID    {
		$current.merge(this_dataType);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getFullStopKeyword_1_0()); 
    }
)
    { 
        newCompositeNode(elementAccess.getValidIDParserRuleCall_1_1()); 
    }
    this_dataType=ruleValidID    {
		$current.merge(this_dataType);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.NumberElements elementAccess = grammarAccess.getNumberAccess();

		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XbaseGrammarAccess.NumberElements elementAccess = grammarAccess.getNumberAccess();

		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_token=RULE_HEX    {
		$current.merge(this_token);
    }

    { 
    newLeafNode(this_token, elementAccess.getHEXTerminalRuleCall_0()); 
    }

    |((    this_token=RULE_INT    {
		$current.merge(this_token);
    }

    { 
    newLeafNode(this_token, elementAccess.getINTTerminalRuleCall_1_0_0()); 
    }

    |    this_token=RULE_DECIMAL    {
		$current.merge(this_token);
    }

    { 
    newLeafNode(this_token, elementAccess.getDECIMALTerminalRuleCall_1_0_1()); 
    }
)(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getFullStopKeyword_1_1_0()); 
    }
(    this_token=RULE_INT    {
		$current.merge(this_token);
    }

    { 
    newLeafNode(this_token, elementAccess.getINTTerminalRuleCall_1_1_1_0()); 
    }

    |    this_token=RULE_DECIMAL    {
		$current.merge(this_token);
    }

    { 
    newLeafNode(this_token, elementAccess.getDECIMALTerminalRuleCall_1_1_1_1()); 
    }
))?))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleJvmTypeReference
entryRuleJvmTypeReference returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmTypeReferenceElements elementAccess = grammarAccess.getJvmTypeReferenceAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmTypeReference=ruleJvmTypeReference 
	 { $current=$iv_ruleJvmTypeReference.current; } 
	 EOF 
;

// Rule JvmTypeReference
ruleJvmTypeReference returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmTypeReferenceElements elementAccess = grammarAccess.getJvmTypeReferenceAccess();
 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(elementAccess.getJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
    }
    this_object=ruleJvmParameterizedTypeReference
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
((((
)	ruleArrayBrackets))=>((
    {
        $current = forceCreateModelElementAndSet(
            elementAccess.getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0(),
            $current);
    }
)
    { 
        newCompositeNode(elementAccess.getArrayBracketsParserRuleCall_0_1_0_1()); 
    }
ruleArrayBrackets
    { 
        afterParserOrEnumRuleCall();
    }
))*)
    |
    { 
        newCompositeNode(elementAccess.getXFunctionTypeRefParserRuleCall_1()); 
    }
    this_object=ruleXFunctionTypeRef
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayBrackets
entryRuleArrayBrackets returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.ArrayBracketsElements elementAccess = grammarAccess.getArrayBracketsAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleArrayBrackets=ruleArrayBrackets 
	 { $current=$iv_ruleArrayBrackets.current.getText(); }  
	 EOF 
;

// Rule ArrayBrackets
ruleArrayBrackets returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.ArrayBracketsElements elementAccess = grammarAccess.getArrayBracketsAccess();

    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getLeftSquareBracketKeyword_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getRightSquareBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXFunctionTypeRef
entryRuleXFunctionTypeRef returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.XFunctionTypeRefElements elementAccess = grammarAccess.getXFunctionTypeRefAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXFunctionTypeRef=ruleXFunctionTypeRef 
	 { $current=$iv_ruleXFunctionTypeRef.current; } 
	 EOF 
;

// Rule XFunctionTypeRef
ruleXFunctionTypeRef returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.XFunctionTypeRefElements elementAccess = grammarAccess.getXFunctionTypeRefAccess();
 
    }
    @after { leaveRule(); }:
((	other='(' 
    {
    	newLeafNode(other, elementAccess.getLeftParenthesisKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(elementAccess.getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	other=')' 
    {
    	newLeafNode(other, elementAccess.getRightParenthesisKeyword_0_2());
    }
)?	other='=>' 
    {
    	newLeafNode(other, elementAccess.getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmParameterizedTypeReference
entryRuleJvmParameterizedTypeReference returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmParameterizedTypeReferenceElements elementAccess = grammarAccess.getJvmParameterizedTypeReferenceAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmParameterizedTypeReference=ruleJvmParameterizedTypeReference 
	 { $current=$iv_ruleJvmParameterizedTypeReference.current; } 
	 EOF 
;

// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmParameterizedTypeReferenceElements elementAccess = grammarAccess.getJvmParameterizedTypeReferenceAccess();
 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getTypeJvmTypeCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	other='<' 
    {
    	newLeafNode(other, elementAccess.getLessThanSignKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(elementAccess.getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		this_object=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)(	other=',' 
    {
    	newLeafNode(other, elementAccess.getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		this_object=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))*	other='>' 
    {
    	newLeafNode(other, elementAccess.getGreaterThanSignKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleJvmArgumentTypeReference
entryRuleJvmArgumentTypeReference returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmArgumentTypeReferenceElements elementAccess = grammarAccess.getJvmArgumentTypeReferenceAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmArgumentTypeReference=ruleJvmArgumentTypeReference 
	 { $current=$iv_ruleJvmArgumentTypeReference.current; } 
	 EOF 
;

// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmArgumentTypeReferenceElements elementAccess = grammarAccess.getJvmArgumentTypeReferenceAccess();
 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getJvmTypeReferenceParserRuleCall_0()); 
    }
    this_object=ruleJvmTypeReference
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(elementAccess.getJvmWildcardTypeReferenceParserRuleCall_1()); 
    }
    this_object=ruleJvmWildcardTypeReference
    { 
        $current = $this_object.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJvmWildcardTypeReference
entryRuleJvmWildcardTypeReference returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmWildcardTypeReferenceElements elementAccess = grammarAccess.getJvmWildcardTypeReferenceAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmWildcardTypeReference=ruleJvmWildcardTypeReference 
	 { $current=$iv_ruleJvmWildcardTypeReference.current; } 
	 EOF 
;

// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmWildcardTypeReferenceElements elementAccess = grammarAccess.getJvmWildcardTypeReferenceAccess();
 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            elementAccess.getJvmWildcardTypeReferenceAction_0(),
            $current);
    }
)	other='?' 
    {
    	newLeafNode(other, elementAccess.getQuestionMarkKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(elementAccess.getConstraintsJvmUpperBoundParserRuleCall_2_0_0()); 
	    }
		this_object=ruleJvmUpperBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(elementAccess.getConstraintsJvmLowerBoundParserRuleCall_2_1_0()); 
	    }
		this_object=ruleJvmLowerBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleJvmUpperBound
entryRuleJvmUpperBound returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmUpperBoundElements elementAccess = grammarAccess.getJvmUpperBoundAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmUpperBound=ruleJvmUpperBound 
	 { $current=$iv_ruleJvmUpperBound.current; } 
	 EOF 
;

// Rule JvmUpperBound
ruleJvmUpperBound returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmUpperBoundElements elementAccess = grammarAccess.getJvmUpperBoundAccess();
 
    }
    @after { leaveRule(); }:
(	other='extends' 
    {
    	newLeafNode(other, elementAccess.getExtendsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmUpperBoundAnded
entryRuleJvmUpperBoundAnded returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmUpperBoundAndedElements elementAccess = grammarAccess.getJvmUpperBoundAndedAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmUpperBoundAnded=ruleJvmUpperBoundAnded 
	 { $current=$iv_ruleJvmUpperBoundAnded.current; } 
	 EOF 
;

// Rule JvmUpperBoundAnded
ruleJvmUpperBoundAnded returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmUpperBoundAndedElements elementAccess = grammarAccess.getJvmUpperBoundAndedAccess();
 
    }
    @after { leaveRule(); }:
(	other='&' 
    {
    	newLeafNode(other, elementAccess.getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBound
entryRuleJvmLowerBound returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmLowerBoundElements elementAccess = grammarAccess.getJvmLowerBoundAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleJvmLowerBound=ruleJvmLowerBound 
	 { $current=$iv_ruleJvmLowerBound.current; } 
	 EOF 
;

// Rule JvmLowerBound
ruleJvmLowerBound returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.JvmLowerBoundElements elementAccess = grammarAccess.getJvmLowerBoundAccess();
 
    }
    @after { leaveRule(); }:
(	other='super' 
    {
    	newLeafNode(other, elementAccess.getSuperKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(elementAccess.getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		this_object=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		this_object, 
        		null);
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.QualifiedNameWithWildcardElements elementAccess = grammarAccess.getQualifiedNameWithWildcardAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.QualifiedNameWithWildcardElements elementAccess = grammarAccess.getQualifiedNameWithWildcardAccess();

    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(elementAccess.getQualifiedNameParserRuleCall_0()); 
    }
    this_dataType=ruleQualifiedName    {
		$current.merge(this_dataType);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getFullStopKeyword_1()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, elementAccess.getAsteriskKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.ValidIDElements elementAccess = grammarAccess.getValidIDAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.ValidIDElements elementAccess = grammarAccess.getValidIDAccess();

    }
    @after { leaveRule(); }:
    this_token=RULE_ID    {
		$current.merge(this_token);
    }

    { 
    newLeafNode(this_token, elementAccess.getIDTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleXImportDeclaration
entryRuleXImportDeclaration returns [EObject current=null] 
	@init {
		
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.XImportDeclarationElements elementAccess = grammarAccess.getXImportDeclarationAccess();

	}
	:
	{ newCompositeNode(elementAccess.getRule()); }
	 iv_ruleXImportDeclaration=ruleXImportDeclaration 
	 { $current=$iv_ruleXImportDeclaration.current; } 
	 EOF 
;

// Rule XImportDeclaration
ruleXImportDeclaration returns [EObject current=null] 
    @init { enterRule();
    	
	org.eclipse.xtext.xbase.services.XtypeGrammarAccess.XImportDeclarationElements elementAccess = grammarAccess.getXImportDeclarationAccess();
 
    }
    @after { leaveRule(); }:
(	other='import' 
    {
    	newLeafNode(other, elementAccess.getImportKeyword_0());
    }
(((
(
		other=	'static' 
    {
        newLeafNode(other, elementAccess.getStaticStaticKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)(
(
		other=	'extension' 
    {
        newLeafNode(other, elementAccess.getExtensionExtensionKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
       		setWithLastConsumed($current, "extension", true, "extension");
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	other='.' 
    {
    	newLeafNode(other, elementAccess.getFullStopKeyword_1_0_3());
    }
	other='*' 
    {
    	newLeafNode(other, elementAccess.getAsteriskKeyword_1_0_4());
    }
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(elementAccess.getRule());
	        }
        }
		{ 
	        newCompositeNode(elementAccess.getImportedTypeJvmDeclaredTypeCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(elementAccess.getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0()); 
	    }
		this_dataType=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(elementAccess.getRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		this_dataType, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))(	other=';' 
    {
    	newLeafNode(other, elementAccess.getSemicolonKeyword_2());
    }
)?)
;





RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ ('#' (('b'|'B') ('i'|'I')|('l'|'L')))?;

RULE_INT : '0'..'9' ('0'..'9'|'_')*;

RULE_DECIMAL : RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)? (('b'|'B') ('i'|'I'|'d'|'D')|('l'|'L'|'d'|'D'|'f'|'F'))?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


