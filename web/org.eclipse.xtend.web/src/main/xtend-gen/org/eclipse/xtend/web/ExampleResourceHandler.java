package org.eclipse.xtend.web;

import com.google.inject.Inject;
import com.google.inject.Provider;
import java.io.IOException;
import java.util.Collections;
import java.util.Map;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.web.server.model.IWebResourceSetProvider;
import org.eclipse.xtext.web.server.model.IXtextWebDocument;
import org.eclipse.xtext.web.server.model.XtextWebDocument;
import org.eclipse.xtext.web.server.persistence.IServerResourceHandler;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.Pair;

@SuppressWarnings("all")
public class ExampleResourceHandler implements IServerResourceHandler {
  @Inject
  private IWebResourceSetProvider resourceSetProvider;
  
  @Inject
  private Provider<XtextWebDocument> documentProvider;
  
  private final Map<String, String> examples = new Function0<Map<String, String>>() {
    public Map<String, String> apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("class HelloWorld {");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("def static void main(String[] args) {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("println(\"Hello World\")");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of("helloWorld.xtend", _builder.toString());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import org.junit.Test");
      _builder_1.newLine();
      _builder_1.append("import static org.junit.Assert.*");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("class BasicExpressions {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("@Test def void literals() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// string literals work with single or double quotes");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(\'Hello\', \"Hello\")");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// number literals (big decimals in this case)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(42, 20 + 20 + 1 * 2)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(42.00bd, 0.00bd + 42bd)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// boolean literals");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(true, !false)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// class literals");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(getClass(), BasicExpressions)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("@Test def void operators() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// infix Operators ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("var i = 5");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// all Java infix operators are supported");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// additive");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(6, i + 1)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(4, i - 1)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// multiplicative");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(1, i / 5)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(15, i * 3)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(0, i % 5)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// assignment operators");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(10, i *= 2)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// relational operators");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertFalse(i < 0)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// shift operators");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(5, i >> 1)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// postfix operators are also the same as in Java");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("var j = 4");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(4, j--)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(3, j)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(3, j++)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(4, j)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// More operators in Xtend described here http://www.eclipse.org/xtend/documentation.html?operators#operators");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("@Test def void collections() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// There are literals for lists, sets and maps");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// and numerous extension methods which make working with them");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// convenient.");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val list = #[\'Hello\', \'World\']");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(\'HELLO\', list.map[toUpperCase].head)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val set  = #{1, 3, 5}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(2, set.filter[ it >= 3].size)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val map  = #{\'one\' -> 1, \'two\' -> 2, \'three\' -> 3}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals( 2 , map.get(\'two\'))");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("/*the literals produce immutable collections. ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("* There are also factory methods to produce mutable ones");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("* Note that their type (seen when hovering over the name)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("* is inferred from the control flow");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("*/");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val mutableList = newArrayList");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("mutableList.add(\"Foo\")");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val mutableSet = newHashSet");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("mutableSet.add(\"Bar\")");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val mutableMap = newHashMap");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("mutableMap.put(\"Fizz\", \"Buzz\")");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("@Test def void controlStructures() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// \'if\' looks like in Java");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if (\'text\'.length == 4) {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("// but it\'s an expression so it can be used in more flexible ways:");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("assertEquals( 42 , if (\'foo\' != \'BAR\'.toLowerCase) 42 else -24 )");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("} else {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("fail(\'Never happens!\')");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// in a switch the first match wins");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("switch (t : \'text\') {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("// use predicates");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("case t.length > 8 :");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("fail(\'Never happens!\')");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("// use equals");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("case \'text\' :");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("assertTrue(true)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("default :");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("fail(\'never happens!\')");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// switch also supports type guards, which provide a safe ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// and convenient alternative to Java\'s \'instanceof\'-cascades.");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val Object someValue = \'a string typed to Object\'");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(\'string\', ");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("switch someValue {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("Number : \'number\'");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("String : \'string\' ");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("})");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("//there also is an explicit fallthrough syntax");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val num = 3");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(\'not a divisor of 4\', switch num {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("case 1,");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("case 2,");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("case 4: \'divisor of 4\'");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("default: \'not a divisor of 4\'");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("})\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("@Test def void loops() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// for loop");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("var counter = 1");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("for (i : 1 .. 10) {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("assertEquals(counter, i)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("counter = counter + 1");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("//traditional for loop");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("for(var i = 11; i > 0; i--) {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("assertEquals(counter, i)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("counter -=  1 //compound assignment");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// while loop");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val iterator = #[1,2,3,4,5].iterator");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("counter = 1");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("while(iterator.hasNext) {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("val i = iterator.next");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("assertEquals(counter, i)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("counter = counter + 1");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      Pair<String, String> _mappedTo_1 = Pair.<String, String>of("BasicExpressions.xtend", _builder_1.toString());
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("package example3");
      _builder_2.newLine();
      _builder_2.append("import static extension example3.BottleSupport.*");
      _builder_2.newLine();
      _builder_2.append("import org.junit.Test");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("/**");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* Prints the lyrics of the song \\\"99 bottles of beer\\\"");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* See http://99-bottles-of-beer.net/");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* ");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* Uses template expressions and extension methods.");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("*/");
      _builder_2.newLine();
      _builder_2.append("class BottleSong {");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("@Test def void singIt() {");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("println(singTheSong(99))");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("def singTheSong(int all) ");
      _builder_2.append("\'\'\'", "\t");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("\t\t");
      _builder_2.append("«FOR i : all .. 1»", "\t\t");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("\t\t\t");
      _builder_2.append("«i.Bottles»", "\t\t\t");
      _builder_2.append(" of beer on the wall, ");
      _builder_2.append("«i.bottles»", "\t\t\t");
      _builder_2.append(" of beer.");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("\t\t\t");
      _builder_2.append("Take one down and pass it around, ");
      _builder_2.append("«(i - 1).bottles»", "\t\t\t");
      _builder_2.append(" of beer on the wall.");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("\t\t\t");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("«ENDFOR»", "\t\t");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("\t\t");
      _builder_2.append("No more bottles of beer on the wall, no more bottles of beer.");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("Go to the store and buy some more, ");
      _builder_2.append("«all.bottles»", "\t\t");
      _builder_2.append(" of beer on the wall.");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("\t");
      _builder_2.append("\'\'\'", "\t");
      _builder_2.newLineIfNotEmpty();
      _builder_2.newLine();
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("class BottleSupport {");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("def static bottles(int i) {");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("switch i {");
      _builder_2.newLine();
      _builder_2.append("\t\t\t");
      _builder_2.append("case 0 : \'no more bottles\'");
      _builder_2.newLine();
      _builder_2.append("\t\t\t");
      _builder_2.append("case 1 : \'one bottle\'");
      _builder_2.newLine();
      _builder_2.append("\t\t\t");
      _builder_2.append("default : ");
      _builder_2.append("\'\'\'«i»", "\t\t\t");
      _builder_2.append(" bottles");
      _builder_2.append("\'\'\'", "\t\t\t");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("\t\t");
      _builder_2.append("}.toString");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("def static Bottles(int i) {");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("bottles(i).toFirstUpper");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.append("}");
      Pair<String, String> _mappedTo_2 = Pair.<String, String>of("BottleSong.xtend", _builder_2.toString());
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("package example4");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("import java.util.ArrayList");
      _builder_3.newLine();
      _builder_3.append("import org.eclipse.xtend.lib.annotations.Data");
      _builder_3.newLine();
      _builder_3.append("import org.junit.Test");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("/**");
      _builder_3.newLine();
      _builder_3.append(" ");
      _builder_3.append("* This examples shows ");
      _builder_3.newLine();
      _builder_3.append(" ");
      _builder_3.append("*  - the usage and declaration of a builder API.");
      _builder_3.newLine();
      _builder_3.append(" ");
      _builder_3.append("*  - usage of @Data annotation");
      _builder_3.newLine();
      _builder_3.append(" ");
      _builder_3.append("*  - non-static extension methods");
      _builder_3.newLine();
      _builder_3.append(" ");
      _builder_3.append("*/");
      _builder_3.newLine();
      _builder_3.append("class DomExample {");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("extension DomBuilder db = new DomBuilder");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("extension DomSerializer ds = new DomSerializer");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("@Test");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def void processDom() {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("val dom = buildDom");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("println(dom.toText)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def buildDom() {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("new Html => [");
      _builder_3.newLine();
      _builder_3.append("\t\t  ");
      _builder_3.append("head [");
      _builder_3.newLine();
      _builder_3.append("\t\t    ");
      _builder_3.append("it.title [$(\"HTML with Xtend\")]");
      _builder_3.newLine();
      _builder_3.append("\t\t  ");
      _builder_3.append("]");
      _builder_3.newLine();
      _builder_3.append("\t\t  ");
      _builder_3.append("body [");
      _builder_3.newLine();
      _builder_3.append("\t\t    ");
      _builder_3.append("h1 [$(\"HTML with Xtend\")]");
      _builder_3.newLine();
      _builder_3.append("\t\t    ");
      _builder_3.append("p [$(\"this format can be used as an alternative to templates.\")]");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.newLine();
      _builder_3.append("\t\t    ");
      _builder_3.append("// an element with attributes and text content");
      _builder_3.newLine();
      _builder_3.append("\t\t    ");
      _builder_3.append("a(\"http://www.xtend-lang.org\") [$(\"Xtend\")]");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.newLine();
      _builder_3.append("\t\t    ");
      _builder_3.append("// mixed content");
      _builder_3.newLine();
      _builder_3.append("\t\t    ");
      _builder_3.append("p [");
      _builder_3.newLine();
      _builder_3.append("\t\t      ");
      _builder_3.append("$(\"This is some \") ");
      _builder_3.newLine();
      _builder_3.append("\t\t      ");
      _builder_3.append("b[$(\"mixed\")] ");
      _builder_3.newLine();
      _builder_3.append("\t\t      ");
      _builder_3.append("$(\" text. For more see the \") ");
      _builder_3.newLine();
      _builder_3.append("\t\t      ");
      _builder_3.append("a(\"http://www.xtend-lang.org\")[$(\"Xtend\")] ");
      _builder_3.newLine();
      _builder_3.append("\t\t      ");
      _builder_3.append("$(\" project\")");
      _builder_3.newLine();
      _builder_3.append("\t\t    ");
      _builder_3.append("]");
      _builder_3.newLine();
      _builder_3.append("\t\t    ");
      _builder_3.append("p [$(\"More text.\")]");
      _builder_3.newLine();
      _builder_3.append("\t\t  ");
      _builder_3.append("]");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("]");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("class DomBuilder {");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def $(Node it, CharSequence contents) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("val text = new Contents(contents)");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("it.contents += text");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def head(Html it, (Head)=>void init) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("addAndApply(it, new Head, init)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def title(Head it, (Title)=>void init) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("addAndApply(it, new Title, init)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def body(Html it, (Body)=>void init) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("addAndApply(it, new Body, init)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def b(Node it, (B)=>void init) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("addAndApply(it, new B, init)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def p(Node it, (P)=>void init) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("addAndApply(it, new P, init)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def a(Node it, String href, (A)=>void init) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("val a = new A(href)");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("addAndApply(it, a, init)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def h1(Node it, (H1)=>void init) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("addAndApply(it, new H1, init)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def h2(Node it, (H2)=>void init) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("addAndApply(it, new H2, init)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def private <T extends Node> void addAndApply(Node parent, T t, (T)=>void init) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("parent.contents += t");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("init.apply(t)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("class DomSerializer {");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def CharSequence toText(Node n) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("switch n {");
      _builder_3.newLine();
      _builder_3.append("\t\t\t");
      _builder_3.append("Contents : ");
      _builder_3.newLine();
      _builder_3.append("\t\t\t\t");
      _builder_3.append("n.text");
      _builder_3.newLine();
      _builder_3.append("\t\t\t\t");
      _builder_3.newLine();
      _builder_3.append("\t\t\t");
      _builder_3.append("A : ");
      _builder_3.newLine();
      _builder_3.append("\t\t\t\t");
      _builder_3.append("\'\'\'", "\t\t\t\t");
      _builder_3.append("<a href=\"");
      _builder_3.append("«n.href»", "\t\t\t\t");
      _builder_3.append("\">");
      _builder_3.append("«n.applyContents»", "\t\t\t\t");
      _builder_3.append("</a>");
      _builder_3.append("\'\'\'", "\t\t\t\t");
      _builder_3.newLineIfNotEmpty();
      _builder_3.append("\t\t\t\t");
      _builder_3.newLine();
      _builder_3.append("\t\t\t");
      _builder_3.append("default : ");
      _builder_3.append("\'\'\'", "\t\t\t");
      _builder_3.newLineIfNotEmpty();
      _builder_3.append("\t\t\t\t");
      _builder_3.append("<");
      _builder_3.append("«n.tagName»", "\t\t\t\t");
      _builder_3.append(">");
      _builder_3.newLineIfNotEmpty();
      _builder_3.append("\t\t\t\t\t");
      _builder_3.append("«n.applyContents»", "\t\t\t\t\t");
      _builder_3.newLineIfNotEmpty();
      _builder_3.append("\t\t\t\t");
      _builder_3.append("</");
      _builder_3.append("«n.tagName»", "\t\t\t\t");
      _builder_3.append(">");
      _builder_3.newLineIfNotEmpty();
      _builder_3.append("\t\t\t");
      _builder_3.append("\'\'\'", "\t\t\t");
      _builder_3.newLineIfNotEmpty();
      _builder_3.append("\t\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def private applyContents(Node n) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("n.contents?.map[ toText ]?.join");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("@Data class Node {");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("ArrayList<Node> contents = newArrayList");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def String tagName() {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("getClass.simpleName.toLowerCase");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("@Data class Html extends Node {");
      _builder_3.newLine();
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("@Data class Head extends Node {}");
      _builder_3.newLine();
      _builder_3.append("@Data class Title extends Node {}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("@Data class ContentNode extends Node {}");
      _builder_3.newLine();
      _builder_3.append("@Data class Body extends ContentNode {}");
      _builder_3.newLine();
      _builder_3.append("@Data class P extends ContentNode {}");
      _builder_3.newLine();
      _builder_3.append("@Data class B extends ContentNode {}");
      _builder_3.newLine();
      _builder_3.append("@Data class H1 extends ContentNode {}");
      _builder_3.newLine();
      _builder_3.append("@Data class H2 extends ContentNode {}");
      _builder_3.newLine();
      _builder_3.append("@Data class A extends ContentNode {");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("String href");
      _builder_3.newLine();
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("@Data class Contents extends ContentNode {");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("CharSequence text");
      _builder_3.newLine();
      _builder_3.append("}");
      _builder_3.newLine();
      Pair<String, String> _mappedTo_3 = Pair.<String, String>of("HtmlBuilder.xtend", _builder_3.toString());
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("package example6");
      _builder_4.newLine();
      _builder_4.newLine();
      _builder_4.append("import java.io.FileReader");
      _builder_4.newLine();
      _builder_4.append("import java.util.Set");
      _builder_4.newLine();
      _builder_4.append("import org.eclipse.xtend.lib.annotations.Data");
      _builder_4.newLine();
      _builder_4.append("import org.junit.Test");
      _builder_4.newLine();
      _builder_4.newLine();
      _builder_4.append("import static org.junit.Assert.*");
      _builder_4.newLine();
      _builder_4.newLine();
      _builder_4.append("import static extension com.google.common.io.CharStreams.*");
      _builder_4.newLine();
      _builder_4.newLine();
      _builder_4.append("class Movies {");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("/**");
      _builder_4.newLine();
      _builder_4.append("\t ");
      _builder_4.append("* @return the total number of action movies");
      _builder_4.newLine();
      _builder_4.append("\t ");
      _builder_4.append("*/ ");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("@Test def void numberOfActionMovies() {");
      _builder_4.newLine();
      _builder_4.append("\t\t");
      _builder_4.append("assertEquals(828, movies.filter[categories.contains(\'Action\')].size)");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("}");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("/**");
      _builder_4.newLine();
      _builder_4.append("\t ");
      _builder_4.append("* @return the year the best rated movie of 80ies (1980-1989) was released.");
      _builder_4.newLine();
      _builder_4.append("\t ");
      _builder_4.append("*/");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("@Test def void yearOfBestMovieFrom80ies() {");
      _builder_4.newLine();
      _builder_4.append("\t\t");
      _builder_4.append("assertEquals(1989, movies.filter[(1980..1989).contains(year)].maxBy[rating].year)");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("}");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("/**");
      _builder_4.newLine();
      _builder_4.append("\t ");
      _builder_4.append("* @return the sum of the number of votes of the two top rated movies.");
      _builder_4.newLine();
      _builder_4.append("\t ");
      _builder_4.append("*/");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("@Test def void sumOfVotesOfTop2() {");
      _builder_4.newLine();
      _builder_4.append("\t\t");
      _builder_4.append("val long movies = movies.sortBy[-rating].take(2).map[numberOfVotes].reduce[a, b| a + b]");
      _builder_4.newLine();
      _builder_4.append("\t\t");
      _builder_4.append("assertEquals(47_229, movies)");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("}");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("val movies = new FileReader(\'data.csv\').readLines.map[ line |");
      _builder_4.newLine();
      _builder_4.append("\t\t");
      _builder_4.append("val segments = line.split(\'  \').iterator");
      _builder_4.newLine();
      _builder_4.append("\t\t");
      _builder_4.append("return new Movie(");
      _builder_4.newLine();
      _builder_4.append("\t\t\t");
      _builder_4.append("segments.next, ");
      _builder_4.newLine();
      _builder_4.append("\t\t\t");
      _builder_4.append("Integer.parseInt(segments.next), ");
      _builder_4.newLine();
      _builder_4.append("\t\t\t");
      _builder_4.append("Double.parseDouble(segments.next), ");
      _builder_4.newLine();
      _builder_4.append("\t\t\t");
      _builder_4.append("Long.parseLong(segments.next), ");
      _builder_4.newLine();
      _builder_4.append("\t\t\t");
      _builder_4.append("segments.toSet");
      _builder_4.newLine();
      _builder_4.append("\t\t");
      _builder_4.append(")");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("]");
      _builder_4.newLine();
      _builder_4.append("}");
      _builder_4.newLine();
      _builder_4.newLine();
      _builder_4.append("@Data class Movie {");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("String title");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("int year");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("double rating");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("long numberOfVotes");
      _builder_4.newLine();
      _builder_4.append("\t");
      _builder_4.append("Set<String> categories ");
      _builder_4.newLine();
      _builder_4.append("}");
      _builder_4.newLine();
      Pair<String, String> _mappedTo_4 = Pair.<String, String>of("Movies.xtend", _builder_4.toString());
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("package observables");
      _builder_5.newLine();
      _builder_5.newLine();
      _builder_5.append("import java.beans.PropertyChangeListener");
      _builder_5.newLine();
      _builder_5.append("import java.beans.PropertyChangeSupport");
      _builder_5.newLine();
      _builder_5.append("import org.eclipse.xtend.lib.macro.AbstractClassProcessor");
      _builder_5.newLine();
      _builder_5.append("import org.eclipse.xtend.lib.macro.Active");
      _builder_5.newLine();
      _builder_5.append("import org.eclipse.xtend.lib.macro.TransformationContext");
      _builder_5.newLine();
      _builder_5.append("import org.eclipse.xtend.lib.macro.declaration.MutableClassDeclaration");
      _builder_5.newLine();
      _builder_5.append("import java.lang.annotation.Target");
      _builder_5.newLine();
      _builder_5.append("import java.lang.annotation.ElementType");
      _builder_5.newLine();
      _builder_5.newLine();
      _builder_5.append("/**");
      _builder_5.newLine();
      _builder_5.append(" ");
      _builder_5.append("* Adds a getter and setter method for all fields");
      _builder_5.newLine();
      _builder_5.append(" ");
      _builder_5.append("* Adds PropertyChangeSupport to this class and informs all listeners on change.");
      _builder_5.newLine();
      _builder_5.append(" ");
      _builder_5.append("*/");
      _builder_5.newLine();
      _builder_5.append("@Target(ElementType.TYPE)");
      _builder_5.newLine();
      _builder_5.append("@Active(ObservableCompilationParticipant)");
      _builder_5.newLine();
      _builder_5.append("annotation Observable {");
      _builder_5.newLine();
      _builder_5.append("}");
      _builder_5.newLine();
      _builder_5.newLine();
      _builder_5.append("class ObservableCompilationParticipant extends AbstractClassProcessor {");
      _builder_5.newLine();
      _builder_5.newLine();
      _builder_5.append("\t");
      _builder_5.append("override doTransform(MutableClassDeclaration clazz, extension TransformationContext context) {");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("// For every field in a class annotated with @Observable, we generate a getter and a setter.");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("// Additionally, the setter will fire change events. ");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("for (f : clazz.declaredFields) {");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("val fieldName = f.simpleName");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("val fieldType = f.type");
      _builder_5.newLine();
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("clazz.addMethod(\'get\' + fieldName.toFirstUpper) [");
      _builder_5.newLine();
      _builder_5.append("\t\t\t\t");
      _builder_5.append("returnType = fieldType");
      _builder_5.newLine();
      _builder_5.append("\t\t\t\t");
      _builder_5.append("body = ");
      _builder_5.append("\'\'\'", "\t\t\t\t");
      _builder_5.append("return this.");
      _builder_5.append("«fieldName»", "\t\t\t\t");
      _builder_5.append(";");
      _builder_5.append("\'\'\'", "\t\t\t\t");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t\t\t");
      _builder_5.append("primarySourceElement = f");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("]");
      _builder_5.newLine();
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("clazz.addMethod(\'set\' + fieldName.toFirstUpper) [");
      _builder_5.newLine();
      _builder_5.append("\t\t\t\t");
      _builder_5.append("addParameter(fieldName, fieldType)");
      _builder_5.newLine();
      _builder_5.append("\t\t\t\t");
      _builder_5.append("body = ");
      _builder_5.append("\'\'\'", "\t\t\t\t");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t\t\t\t");
      _builder_5.append("«fieldType»", "\t\t\t\t\t");
      _builder_5.append(" _oldValue = this.");
      _builder_5.append("«fieldName»", "\t\t\t\t\t");
      _builder_5.append(";");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t\t\t\t");
      _builder_5.append("this.");
      _builder_5.append("«fieldName»", "\t\t\t\t\t");
      _builder_5.append(" = ");
      _builder_5.append("«fieldName»", "\t\t\t\t\t");
      _builder_5.append(";");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t\t\t\t");
      _builder_5.append("_propertyChangeSupport.firePropertyChange(\"");
      _builder_5.append("«fieldName»", "\t\t\t\t\t");
      _builder_5.append("\", _oldValue, ");
      _builder_5.append("«fieldName»", "\t\t\t\t\t");
      _builder_5.append(");");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t\t\t");
      _builder_5.append("\'\'\'", "\t\t\t\t");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t\t\t");
      _builder_5.append("primarySourceElement = f");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("]");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("f.markAsRead");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("}");
      _builder_5.newLine();
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("// generated field to hold listeners, addPropertyChangeListener() and removePropertyChangeListener() ");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("val changeSupportType = PropertyChangeSupport.newTypeReference");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("clazz.addField(\"_propertyChangeSupport\") [");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("type = changeSupportType");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("initializer = ");
      _builder_5.append("\'\'\'", "\t\t\t");
      _builder_5.append("new ");
      _builder_5.append("«changeSupportType»", "\t\t\t");
      _builder_5.append("(this)");
      _builder_5.append("\'\'\'", "\t\t\t");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t\t");
      _builder_5.append("primarySourceElement = clazz");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("]");
      _builder_5.newLine();
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("val propertyChangeListener = PropertyChangeListener.newTypeReference");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("clazz.addMethod(\"addPropertyChangeListener\") [");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("addParameter(\"listener\", propertyChangeListener)");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("body = ");
      _builder_5.append("\'\'\'", "\t\t\t");
      _builder_5.append("this._propertyChangeSupport.addPropertyChangeListener(listener);");
      _builder_5.append("\'\'\'", "\t\t\t");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t\t");
      _builder_5.append("primarySourceElement = clazz");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("]");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("clazz.addMethod(\"removePropertyChangeListener\") [");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("addParameter(\"listener\", propertyChangeListener)");
      _builder_5.newLine();
      _builder_5.append("\t\t\t");
      _builder_5.append("body = ");
      _builder_5.append("\'\'\'", "\t\t\t");
      _builder_5.append("this._propertyChangeSupport.removePropertyChangeListener(listener);");
      _builder_5.append("\'\'\'", "\t\t\t");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t\t");
      _builder_5.append("primarySourceElement = clazz");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("]");
      _builder_5.newLine();
      _builder_5.append("\t");
      _builder_5.append("}");
      _builder_5.newLine();
      _builder_5.append("}");
      _builder_5.newLine();
      Pair<String, String> _mappedTo_5 = Pair.<String, String>of("Observable.xtend", _builder_5.toString());
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("package observables");
      _builder_6.newLine();
      _builder_6.newLine();
      _builder_6.append("@Observable");
      _builder_6.newLine();
      _builder_6.append("class ObservableBean {");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("String firstName");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("String lastName");
      _builder_6.newLine();
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.newLine();
      _builder_6.append("class ObservableExample {");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("def static void main(String[] args) {");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("// 1. create observable bean ");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("new ObservableBean => [");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("// 2. add an observer ");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("addPropertyChangeListener [");
      _builder_6.newLine();
      _builder_6.append("\t\t\t\t");
      _builder_6.append("println(");
      _builder_6.append("\'\'\'", "\t\t\t\t");
      _builder_6.append("property ");
      _builder_6.append("«propertyName»", "\t\t\t\t");
      _builder_6.append(" changed from ");
      _builder_6.append("«oldValue»", "\t\t\t\t");
      _builder_6.append(" to ");
      _builder_6.append("«newValue»\'\'\'", "\t\t\t\t");
      _builder_6.append(")");
      _builder_6.newLineIfNotEmpty();
      _builder_6.append("\t\t\t");
      _builder_6.append("]");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("// 3. invoke some setters");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("firstName = \"Max\"");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("lastName = \"Mustermann\"");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("firstName = \"John\"");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("lastName = \"Doe\"");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("]");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.append("}");
      _builder_6.newLine();
      Pair<String, String> _mappedTo_6 = Pair.<String, String>of("ObservableExample.xtend", _builder_6.toString());
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("package extract");
      _builder_7.newLine();
      _builder_7.newLine();
      _builder_7.append("import java.lang.annotation.ElementType");
      _builder_7.newLine();
      _builder_7.append("import java.lang.annotation.Target");
      _builder_7.newLine();
      _builder_7.append("import org.eclipse.xtend.lib.macro.AbstractClassProcessor");
      _builder_7.newLine();
      _builder_7.append("import org.eclipse.xtend.lib.macro.Active");
      _builder_7.newLine();
      _builder_7.append("import org.eclipse.xtend.lib.macro.RegisterGlobalsContext");
      _builder_7.newLine();
      _builder_7.append("import org.eclipse.xtend.lib.macro.TransformationContext");
      _builder_7.newLine();
      _builder_7.append("import org.eclipse.xtend.lib.macro.declaration.ClassDeclaration");
      _builder_7.newLine();
      _builder_7.append("import org.eclipse.xtend.lib.macro.declaration.MutableClassDeclaration");
      _builder_7.newLine();
      _builder_7.append("import org.eclipse.xtend.lib.macro.declaration.Visibility");
      _builder_7.newLine();
      _builder_7.newLine();
      _builder_7.append("/**");
      _builder_7.newLine();
      _builder_7.append(" ");
      _builder_7.append("* Extracts an interface for all locally declared public methods.");
      _builder_7.newLine();
      _builder_7.append(" ");
      _builder_7.append("*/");
      _builder_7.newLine();
      _builder_7.append("@Target(ElementType.TYPE)");
      _builder_7.newLine();
      _builder_7.append("@Active(ExtractProcessor)");
      _builder_7.newLine();
      _builder_7.append("annotation Extract {}");
      _builder_7.newLine();
      _builder_7.newLine();
      _builder_7.append("class ExtractProcessor extends AbstractClassProcessor {");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("override doRegisterGlobals(ClassDeclaration annotatedClass, RegisterGlobalsContext context) {");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("context.registerInterface(annotatedClass.interfaceName)");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("}");
      _builder_7.newLine();
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("def getInterfaceName(ClassDeclaration annotatedClass) {");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("annotatedClass.qualifiedName+\"Interface\"");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("}");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("override doTransform(MutableClassDeclaration annotatedClass, extension TransformationContext context) {");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("val interfaceType = findInterface(annotatedClass.interfaceName)");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("interfaceType.primarySourceElement = annotatedClass");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("// add the interface to the list of implemented interfaces");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("annotatedClass.implementedInterfaces = annotatedClass.implementedInterfaces + #[interfaceType.newTypeReference]");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("// add the public methods to the interface");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("for (method : annotatedClass.declaredMethods) {");
      _builder_7.newLine();
      _builder_7.append("\t\t\t");
      _builder_7.append("if (method.visibility == Visibility.PUBLIC) {");
      _builder_7.newLine();
      _builder_7.append("\t\t\t\t");
      _builder_7.append("interfaceType.addMethod(method.simpleName) [");
      _builder_7.newLine();
      _builder_7.append("\t\t\t\t\t");
      _builder_7.append("docComment = method.docComment");
      _builder_7.newLine();
      _builder_7.append("\t\t\t\t\t");
      _builder_7.append("returnType = method.returnType");
      _builder_7.newLine();
      _builder_7.append("\t\t\t\t\t");
      _builder_7.append("for (p : method.parameters) {");
      _builder_7.newLine();
      _builder_7.append("\t\t\t\t\t\t");
      _builder_7.append("addParameter(p.simpleName, p.type)");
      _builder_7.newLine();
      _builder_7.append("\t\t\t\t\t");
      _builder_7.append("}");
      _builder_7.newLine();
      _builder_7.append("\t\t\t\t\t");
      _builder_7.append("exceptions = method.exceptions");
      _builder_7.newLine();
      _builder_7.append("\t\t\t\t\t");
      _builder_7.append("primarySourceElement = method");
      _builder_7.newLine();
      _builder_7.append("\t\t\t\t");
      _builder_7.append("]");
      _builder_7.newLine();
      _builder_7.append("\t\t\t");
      _builder_7.append("}");
      _builder_7.newLine();
      _builder_7.append("\t\t");
      _builder_7.append("}");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.append("}");
      _builder_7.newLine();
      _builder_7.append("\t");
      _builder_7.newLine();
      _builder_7.append("}");
      _builder_7.newLine();
      Pair<String, String> _mappedTo_7 = Pair.<String, String>of("Extract.xtend", _builder_7.toString());
      StringConcatenation _builder_8 = new StringConcatenation();
      _builder_8.append("package extract");
      _builder_8.newLine();
      _builder_8.newLine();
      _builder_8.append("@Extract");
      _builder_8.newLine();
      _builder_8.append("class ExtractExample {");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("/**");
      _builder_8.newLine();
      _builder_8.append("\t ");
      _builder_8.append("* This method is extracted to an interface");
      _builder_8.newLine();
      _builder_8.append("\t ");
      _builder_8.append("*/");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("override void myPublicMethod() {");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("/**");
      _builder_8.newLine();
      _builder_8.append("\t ");
      _builder_8.append("* This method is not extracted");
      _builder_8.newLine();
      _builder_8.append("\t ");
      _builder_8.append("*/");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("protected def void myPrivateMethod() {");
      _builder_8.newLine();
      _builder_8.append("\t\t");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("}");
      _builder_8.newLine();
      Pair<String, String> _mappedTo_8 = Pair.<String, String>of("ExtractExample.xtend", _builder_8.toString());
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("package i18n");
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("import java.text.DateFormat");
      _builder_9.newLine();
      _builder_9.append("import java.text.MessageFormat");
      _builder_9.newLine();
      _builder_9.append("import java.text.NumberFormat");
      _builder_9.newLine();
      _builder_9.append("import java.util.Date");
      _builder_9.newLine();
      _builder_9.append("import java.util.MissingResourceException");
      _builder_9.newLine();
      _builder_9.append("import java.util.ResourceBundle");
      _builder_9.newLine();
      _builder_9.append("import org.eclipse.xtend.lib.macro.AbstractClassProcessor");
      _builder_9.newLine();
      _builder_9.append("import org.eclipse.xtend.lib.macro.Active");
      _builder_9.newLine();
      _builder_9.append("import org.eclipse.xtend.lib.macro.CodeGenerationContext");
      _builder_9.newLine();
      _builder_9.append("import org.eclipse.xtend.lib.macro.TransformationContext");
      _builder_9.newLine();
      _builder_9.append("import org.eclipse.xtend.lib.macro.declaration.ClassDeclaration");
      _builder_9.newLine();
      _builder_9.append("import org.eclipse.xtend.lib.macro.declaration.FieldDeclaration");
      _builder_9.newLine();
      _builder_9.append("import org.eclipse.xtend.lib.macro.declaration.MutableClassDeclaration");
      _builder_9.newLine();
      _builder_9.append("import org.eclipse.xtend.lib.macro.CodeGenerationParticipant");
      _builder_9.newLine();
      _builder_9.append("import java.util.List");
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("@Active(ExternalizedProcessor)");
      _builder_9.newLine();
      _builder_9.append("annotation Externalized {");
      _builder_9.newLine();
      _builder_9.append("}");
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("class ExternalizedProcessor extends AbstractClassProcessor implements CodeGenerationParticipant<ClassDeclaration> {");
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("\t");
      _builder_9.append("override doTransform(MutableClassDeclaration annotatedClass, extension TransformationContext context) {");
      _builder_9.newLine();
      _builder_9.append("\t\t");
      _builder_9.append("for (field : annotatedClass.declaredFields) {");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("val initializer = field.initializerAsString");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("val msgFormat = try {");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("new MessageFormat(initializer)");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("} catch(IllegalArgumentException e) {");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("field.initializer.addError(\"invalid format : \" + e.message)");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("new MessageFormat(\"\")");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("}");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("val formats = msgFormat.formatsByArgumentIndex");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("if(msgFormat.formats.length != formats.length) {");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("field.initializer.addWarning(\'Unused placeholders. They should start at index 0.\')");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("}");
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("annotatedClass.addMethod(field.simpleName) [");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("formats.forEach [ format, idx |");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t\t");
      _builder_9.append("addParameter(\"arg\" + idx,");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t\t\t");
      _builder_9.append("switch format {");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t\t\t\t");
      _builder_9.append("NumberFormat: primitiveInt");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t\t\t\t");
      _builder_9.append("DateFormat: Date.newTypeReference()");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t\t\t\t");
      _builder_9.append("default: string");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t\t\t");
      _builder_9.append("})");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("]");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("returnType = string");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("docComment = initializer");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("static = true");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("val params = parameters");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("body = ");
      _builder_9.append("\'\'\'", "\t\t\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t\t\t");
      _builder_9.append("try {");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t\t\t\t");
      _builder_9.append("String msg = RESOURCE_BUNDLE.getString(\"");
      _builder_9.append("«field.simpleName»", "\t\t\t\t\t\t\t");
      _builder_9.append("\");");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t\t\t\t");
      _builder_9.append("«IF formats.length > 0»", "\t\t\t\t\t\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t\t\t\t\t");
      _builder_9.append("msg = ");
      _builder_9.append("«MessageFormat»", "\t\t\t\t\t\t\t\t");
      _builder_9.append(".format(msg,");
      _builder_9.append("«params.map[simpleName].join(\",\")»", "\t\t\t\t\t\t\t\t");
      _builder_9.append(");");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t\t\t\t");
      _builder_9.append("«ENDIF»", "\t\t\t\t\t\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t\t\t\t");
      _builder_9.append("return msg;");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t\t\t");
      _builder_9.append("} catch (");
      _builder_9.append("«MissingResourceException»", "\t\t\t\t\t\t");
      _builder_9.append(" e) {");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t\t\t\t");
      _builder_9.append("// TODO error logging");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t\t\t\t");
      _builder_9.append("return \"");
      _builder_9.append("«initializer»", "\t\t\t\t\t\t\t");
      _builder_9.append("\";");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t\t\t");
      _builder_9.append("}");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("\'\'\'", "\t\t\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("primarySourceElement = field");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("]");
      _builder_9.newLine();
      _builder_9.append("\t\t");
      _builder_9.append("}");
      _builder_9.newLine();
      _builder_9.append("\t\t");
      _builder_9.append("annotatedClass.declaredFields.forEach[remove]");
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("\t\t");
      _builder_9.append("//private static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);");
      _builder_9.newLine();
      _builder_9.append("\t\t");
      _builder_9.append("annotatedClass.addField(\"RESOURCE_BUNDLE\") [");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("static = true");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("final = true");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("type = ResourceBundle.newTypeReference");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("initializer = ");
      _builder_9.append("\'\'\'", "\t\t\t");
      _builder_9.append("ResourceBundle.getBundle(\"");
      _builder_9.append("«annotatedClass.qualifiedName»", "\t\t\t");
      _builder_9.append("\")");
      _builder_9.append("\'\'\'", "\t\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t");
      _builder_9.append("primarySourceElement = annotatedClass");
      _builder_9.newLine();
      _builder_9.append("\t\t");
      _builder_9.append("]");
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("\t");
      _builder_9.append("}");
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("\t");
      _builder_9.append("override doGenerateCode(List<? extends ClassDeclaration> annotatedSourceElements, extension CodeGenerationContext context) {");
      _builder_9.newLine();
      _builder_9.append("\t\t");
      _builder_9.append("for (clazz : annotatedSourceElements) {");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("val filePath = clazz.compilationUnit.filePath");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("val file = filePath.targetFolder.append(clazz.qualifiedName.replace(\'.\', \'/\') + \".properties\")");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("file.contents = ");
      _builder_9.append("\'\'\'", "\t\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("«FOR field : clazz.declaredFields»", "\t\t\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t\t");
      _builder_9.append("«field.simpleName» = «field.initializerAsString»", "\t\t\t\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("«ENDFOR»", "\t\t\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t\t");
      _builder_9.append("\'\'\'", "\t\t\t");
      _builder_9.newLineIfNotEmpty();
      _builder_9.append("\t\t");
      _builder_9.append("}");
      _builder_9.newLine();
      _builder_9.append("\t");
      _builder_9.append("}");
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("\t");
      _builder_9.append("def getInitializerAsString(FieldDeclaration f) {");
      _builder_9.newLine();
      _builder_9.append("\t\t");
      _builder_9.append("val string = f.initializer?.toString");
      _builder_9.newLine();
      _builder_9.append("\t\t");
      _builder_9.append("if(string == null)");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("return \"empty string\"");
      _builder_9.newLine();
      _builder_9.append("\t\t");
      _builder_9.append("return string.substring(1, string.length - 1)");
      _builder_9.newLine();
      _builder_9.append("\t");
      _builder_9.append("}");
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("}");
      _builder_9.newLine();
      Pair<String, String> _mappedTo_9 = Pair.<String, String>of("Externalized.xtend", _builder_9.toString());
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append("package i18n");
      _builder_10.newLine();
      _builder_10.newLine();
      _builder_10.append("import java.util.Date");
      _builder_10.newLine();
      _builder_10.newLine();
      _builder_10.append("@Externalized");
      _builder_10.newLine();
      _builder_10.append("class ExternalizedExample {");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.append("val GREETING = \"Hello {0}!\"");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.append("val DATE_AND_LOCATION = \"Today is {0,date} and you are in {1}\"");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.newLine();
      _builder_10.append("\t");
      _builder_10.append("def static void main(String[] args) {");
      _builder_10.newLine();
      _builder_10.append("\t\t");
      _builder_10.append("println(");
      _builder_10.append("\'\'\'", "\t\t");
      _builder_10.newLineIfNotEmpty();
      _builder_10.append("\t\t\t");
      _builder_10.append("«GREETING(\"World\")»", "\t\t\t");
      _builder_10.newLineIfNotEmpty();
      _builder_10.append("\t\t\t");
      _builder_10.append("«DATE_AND_LOCATION(new Date(), \"Kiel\")»", "\t\t\t");
      _builder_10.newLineIfNotEmpty();
      _builder_10.append("\t\t");
      _builder_10.append("\'\'\'", "\t\t");
      _builder_10.append(")");
      _builder_10.newLineIfNotEmpty();
      _builder_10.append("\t");
      _builder_10.append("}");
      _builder_10.newLine();
      _builder_10.append("}");
      _builder_10.newLine();
      Pair<String, String> _mappedTo_10 = Pair.<String, String>of("ExternalizedExample.xtend", _builder_10.toString());
      StringConcatenation _builder_11 = new StringConcatenation();
      _builder_11.append("package lazy");
      _builder_11.newLine();
      _builder_11.newLine();
      _builder_11.append("import java.lang.annotation.ElementType");
      _builder_11.newLine();
      _builder_11.append("import java.lang.annotation.Target");
      _builder_11.newLine();
      _builder_11.append("import org.eclipse.xtend.lib.macro.AbstractFieldProcessor");
      _builder_11.newLine();
      _builder_11.append("import org.eclipse.xtend.lib.macro.Active");
      _builder_11.newLine();
      _builder_11.append("import org.eclipse.xtend.lib.macro.TransformationContext");
      _builder_11.newLine();
      _builder_11.append("import org.eclipse.xtend.lib.macro.declaration.MutableFieldDeclaration");
      _builder_11.newLine();
      _builder_11.append("import org.eclipse.xtend.lib.macro.declaration.Visibility");
      _builder_11.newLine();
      _builder_11.newLine();
      _builder_11.append("/**");
      _builder_11.newLine();
      _builder_11.append(" ");
      _builder_11.append("* Adds a lazy getter and an initializer method.");
      _builder_11.newLine();
      _builder_11.append(" ");
      _builder_11.append("*/");
      _builder_11.newLine();
      _builder_11.append("@Target(ElementType.FIELD)");
      _builder_11.newLine();
      _builder_11.append("@Active(LazyProcessor)");
      _builder_11.newLine();
      _builder_11.append("annotation Lazy {");
      _builder_11.newLine();
      _builder_11.append("}");
      _builder_11.newLine();
      _builder_11.newLine();
      _builder_11.append("class LazyProcessor extends AbstractFieldProcessor {");
      _builder_11.newLine();
      _builder_11.newLine();
      _builder_11.append("\t");
      _builder_11.append("override doTransform(MutableFieldDeclaration field, extension TransformationContext context) {");
      _builder_11.newLine();
      _builder_11.append("\t\t");
      _builder_11.append("if (field.type.primitive)");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("field.addError(\"Fields with primitives are not supported by @Lazy\")");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.newLine();
      _builder_11.append("\t\t");
      _builder_11.append("if (field.initializer == null)");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("field.addError(\"A lazy field must have an initializer.\")");
      _builder_11.newLine();
      _builder_11.append("\t\t");
      _builder_11.newLine();
      _builder_11.append("\t\t");
      _builder_11.append("field.declaringType.addMethod(\'_init\' + field.simpleName) [");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("visibility = Visibility.PRIVATE");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("returnType = field.type");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("// reassign the initializer expression to be the init method\'s body");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("// this automatically removes the expression as the field\'s initializer");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("body = field.initializer");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("primarySourceElement = field");
      _builder_11.newLine();
      _builder_11.append("\t\t");
      _builder_11.append("]");
      _builder_11.newLine();
      _builder_11.newLine();
      _builder_11.append("\t\t");
      _builder_11.append("// add a getter method which lazily initializes the field");
      _builder_11.newLine();
      _builder_11.append("\t\t");
      _builder_11.append("field.declaringType.addMethod(\'get\' + field.simpleName.toFirstUpper) [");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("field.markAsRead");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("returnType = field.type");
      _builder_11.newLine();
      _builder_11.append("\t\t\t");
      _builder_11.append("body = ");
      _builder_11.append("\'\'\'", "\t\t\t");
      _builder_11.newLineIfNotEmpty();
      _builder_11.append("\t\t\t\t");
      _builder_11.append("if (");
      _builder_11.append("«field.simpleName»", "\t\t\t\t");
      _builder_11.append("==null)");
      _builder_11.newLineIfNotEmpty();
      _builder_11.append("\t\t\t\t  ");
      _builder_11.append("«field.simpleName»", "\t\t\t\t  ");
      _builder_11.append(" = _init");
      _builder_11.append("«field.simpleName»", "\t\t\t\t  ");
      _builder_11.append("();");
      _builder_11.newLineIfNotEmpty();
      _builder_11.append("\t\t\t\t");
      _builder_11.append("return ");
      _builder_11.append("«field.simpleName»", "\t\t\t\t");
      _builder_11.append(";");
      _builder_11.newLineIfNotEmpty();
      _builder_11.append("\t\t\t");
      _builder_11.append("\'\'\'", "\t\t\t");
      _builder_11.newLineIfNotEmpty();
      _builder_11.append("\t\t\t");
      _builder_11.append("primarySourceElement = field");
      _builder_11.newLine();
      _builder_11.append("\t\t");
      _builder_11.append("]");
      _builder_11.newLine();
      _builder_11.append("\t");
      _builder_11.append("}");
      _builder_11.newLine();
      _builder_11.newLine();
      _builder_11.append("}");
      _builder_11.newLine();
      Pair<String, String> _mappedTo_11 = Pair.<String, String>of("Lazy.xtend", _builder_11.toString());
      StringConcatenation _builder_12 = new StringConcatenation();
      _builder_12.append("package lazy");
      _builder_12.newLine();
      _builder_12.newLine();
      _builder_12.append("class LazyExample {");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("@Lazy String foo = \'holla\'");
      _builder_12.newLine();
      _builder_12.append("\t");
      _builder_12.append("@Lazy Integer another = 42 * getFoo.length");
      _builder_12.newLine();
      _builder_12.append("}");
      _builder_12.newLine();
      Pair<String, String> _mappedTo_12 = Pair.<String, String>of("LazyExample.xtend", _builder_12.toString());
      StringConcatenation _builder_13 = new StringConcatenation();
      _builder_13.append("class Example {");
      _builder_13.newLine();
      _builder_13.append("\t\t\t\t");
      _builder_13.newLine();
      _builder_13.append("}");
      _builder_13.newLine();
      Pair<String, String> _mappedTo_13 = Pair.<String, String>of("java.xtend", _builder_13.toString());
      return Collections.<String, String>unmodifiableMap(CollectionLiterals.<String, String>newHashMap(_mappedTo, _mappedTo_1, _mappedTo_2, _mappedTo_3, _mappedTo_4, _mappedTo_5, _mappedTo_6, _mappedTo_7, _mappedTo_8, _mappedTo_9, _mappedTo_10, _mappedTo_11, _mappedTo_12, _mappedTo_13));
    }
  }.apply();
  
  @Override
  public XtextWebDocument get(final String resourceId) throws IOException {
    final XtextWebDocument result = this.documentProvider.get();
    final ResourceSet resourceSet = this.resourceSetProvider.get(resourceId);
    URI _createURI = URI.createURI(resourceId);
    Resource _createResource = resourceSet.createResource(_createURI);
    final XtextResource resource = ((XtextResource) _createResource);
    result.setInput(resource, resourceId);
    String _elvis = null;
    String _get = this.examples.get(resourceId);
    if (_get != null) {
      _elvis = _get;
    } else {
      _elvis = "";
    }
    result.setText(_elvis);
    return result;
  }
  
  @Override
  public void put(final IXtextWebDocument document) throws IOException {
  }
}
