package org.eclipse.xtend.web;

import com.google.inject.Inject;
import com.google.inject.Provider;
import java.io.IOException;
import java.util.Collections;
import java.util.Map;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.parser.IEncodingProvider;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.web.server.model.IWebResourceSetProvider;
import org.eclipse.xtext.web.server.model.IXtextWebDocument;
import org.eclipse.xtext.web.server.model.XtextWebDocument;
import org.eclipse.xtext.web.server.persistence.IServerResourceHandler;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.Pair;

@SuppressWarnings("all")
public class ExampleResourceHandler implements IServerResourceHandler {
  @Inject
  private IWebResourceSetProvider resourceSetProvider;
  
  @Inject
  private Provider<XtextWebDocument> documentProvider;
  
  @Inject
  private IEncodingProvider encodingProvider;
  
  private final Map<String, String> examples = new Function0<Map<String, String>>() {
    public Map<String, String> apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("class HelloWorld {");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("def static void main(String[] args) {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("println(\"Hello World\")");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of("helloWorld.xtend", _builder.toString());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import org.junit.Test");
      _builder_1.newLine();
      _builder_1.append("import static org.junit.Assert.*");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("class BasicExpressions {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("@Test def void literals() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// string literals work with single or double quotes");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(\'Hello\', \"Hello\")");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// number literals (big decimals in this case)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(42, 20 + 20 + 1 * 2)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(42.00bd, 0.00bd + 42bd)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// boolean literals");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(true, !false)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// class literals");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(getClass(), BasicExpressions)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("@Test def void operators() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// infix Operators ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("var i = 5");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// all Java infix operators are supported");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// additive");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(6, i + 1)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(4, i - 1)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// multiplicative");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(1, i / 5)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(15, i * 3)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(0, i % 5)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// assignment operators");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(10, i *= 2)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// relational operators");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertFalse(i < 0)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// shift operators");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(5, i >> 1)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// postfix operators are also the same as in Java");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("var j = 4");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(4, j--)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(3, j)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(3, j++)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(4, j)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// More operators in Xtend described here http://www.eclipse.org/xtend/documentation.html?operators#operators");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("@Test def void collections() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// There are literals for lists, sets and maps");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// and numerous extension methods which make working with them");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// convenient.");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val list = #[\'Hello\', \'World\']");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(\'HELLO\', list.map[toUpperCase].head)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val set  = #{1, 3, 5}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(2, set.filter[ it >= 3].size)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val map  = #{\'one\' -> 1, \'two\' -> 2, \'three\' -> 3}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals( 2 , map.get(\'two\'))");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("/*the literals produce immutable collections. ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("* There are also factory methods to produce mutable ones");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("* Note that their type (seen when hovering over the name)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("* is inferred from the control flow");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("*/");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val mutableList = newArrayList");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("mutableList.add(\"Foo\")");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val mutableSet = newHashSet");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("mutableSet.add(\"Bar\")");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val mutableMap = newHashMap");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("mutableMap.put(\"Fizz\", \"Buzz\")");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("@Test def void controlStructures() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// \'if\' looks like in Java");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if (\'text\'.length == 4) {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("// but it\'s an expression so it can be used in more flexible ways:");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("assertEquals( 42 , if (\'foo\' != \'BAR\'.toLowerCase) 42 else -24 )");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("} else {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("fail(\'Never happens!\')");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// in a switch the first match wins");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("switch (t : \'text\') {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("// use predicates");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("case t.length > 8 :");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("fail(\'Never happens!\')");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("// use equals");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("case \'text\' :");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("assertTrue(true)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("default :");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("fail(\'never happens!\')");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// switch also supports type guards, which provide a safe ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// and convenient alternative to Java\'s \'instanceof\'-cascades.");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val Object someValue = \'a string typed to Object\'");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(\'string\', ");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("switch someValue {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("Number : \'number\'");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("String : \'string\' ");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("})");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("//there also is an explicit fallthrough syntax");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val num = 3");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("assertEquals(\'not a divisor of 4\', switch num {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("case 1,");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("case 2,");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("case 4: \'divisor of 4\'");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("default: \'not a divisor of 4\'");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("})\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("@Test def void loops() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// for loop");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("var counter = 1");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("for (i : 1 .. 10) {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("assertEquals(counter, i)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("counter = counter + 1");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("//traditional for loop");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("for(var i = 11; i > 0; i--) {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("assertEquals(counter, i)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("counter -=  1 //compound assignment");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("// while loop");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("val iterator = #[1,2,3,4,5].iterator");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("counter = 1");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("while(iterator.hasNext) {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("val i = iterator.next");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("assertEquals(counter, i)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("counter = counter + 1");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      Pair<String, String> _mappedTo_1 = Pair.<String, String>of("BasicExpressions.xtend", _builder_1.toString());
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("import static extension BottleSupport.*");
      _builder_2.newLine();
      _builder_2.append("import org.junit.Test");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("/**");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* Prints the lyrics of the song \"99 bottles of beer\"");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* See http://99-bottles-of-beer.net/");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* ");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("* Uses template expressions and extension methods.");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("*/");
      String _plus = (_builder_2.toString() + "\nclass BottleSong {\n\t\t\t\n\t\t\t@Test def void singIt() {\n\t\t\t\tprintln(singTheSong(99))\n\t\t\t}\n\t\t\t\n\t\t\tdef singTheSong(int all) \'\'\'\n\t\t\t\t«FOR i : all .. 1»\n\t\t\t\t\t«i.Bottles» of beer on the wall, «i.bottles» of beer.\n\t\t\t\t\tTake one down and pass it around, «(i - 1).bottles» of beer on the wall.\n\t\t\t\t\t\n\t\t\t\t«ENDFOR»\n\t\t\t\tNo more bottles of beer on the wall, no more bottles of beer.\n\t\t\t\tGo to the store and buy some more, «all.bottles» of beer on the wall.\n\t\t\t\'\'\'\n\t\t\n\t\t}\n\t\t\n\t\tclass BottleSupport {\n\t\t\t\n\t\t\tdef static bottles(int i) {\n\t\t\t\tswitch i {\n\t\t\t\t\tcase 0 : \'no more bottles\'\n\t\t\t\t\tcase 1 : \'one bottle\'\n\t\t\t\t\tdefault : \'\'\'«i» bottles\'\'\'\n\t\t\t\t}.toString\n\t\t\t}\n\t\t\t\n\t\t\tdef static Bottles(int i) {\n\t\t\t\tbottles(i).toFirstUpper\n\t\t\t}\n\t\t}");
      Pair<String, String> _mappedTo_2 = Pair.<String, String>of("BottleSong.xtend", _plus);
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("class Example {");
      _builder_3.newLine();
      _builder_3.append("\t\t\t\t");
      _builder_3.newLine();
      _builder_3.append("}");
      _builder_3.newLine();
      Pair<String, String> _mappedTo_3 = Pair.<String, String>of("java.xtend", _builder_3.toString());
      return Collections.<String, String>unmodifiableMap(CollectionLiterals.<String, String>newHashMap(_mappedTo, _mappedTo_1, _mappedTo_2, _mappedTo_3));
    }
  }.apply();
  
  @Override
  public XtextWebDocument get(final String resourceId) throws IOException {
    final XtextWebDocument result = this.documentProvider.get();
    final ResourceSet resourceSet = this.resourceSetProvider.get(resourceId);
    URI _createURI = URI.createURI(resourceId);
    Resource _createResource = resourceSet.createResource(_createURI);
    final XtextResource resource = ((XtextResource) _createResource);
    result.setInput(resource, resourceId);
    String _elvis = null;
    String _get = this.examples.get(resourceId);
    if (_get != null) {
      _elvis = _get;
    } else {
      _elvis = "";
    }
    result.setText(_elvis);
    return result;
  }
  
  @Override
  public void put(final IXtextWebDocument document) throws IOException {
  }
}
