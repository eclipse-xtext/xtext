section:formatting[Formatting (Pretty Printing)]

Formatting is the process of rearranging the text in a document to improve the readability
without changing the semantic value of the document. Therefore, a formatter is responsible
for arranging line-wraps, indentation, whitespace, etc. in a text to emphasize its structure.
A formatter is not supposed to alter a document in a way that impacts the semantic model.

section2:formattingNew[New API in Xtext 2.8]

The new formatting API is available since Xtext 2.8. It resolves the limitations of the first
API wich was present since the first version of Xtext. Namely the new API allows to implement
formatting not only based on the static structure of the grammar but it is possible to make 
decisions based on the current model structure. Things that are now possible include:

ul[
  item[Add a line break to long list of items but keep shot lists in one line]
  item[Arrange elements in a tabular layout]
  item[Apply formatting to values of data type rules or comments]
  item[Consider the existing whitespace information and implement an adaptive layout]
  item[Provide user configurable preferences for the formatting settings]
]

The actual formatting is done by constructing a list of text replacements. A text replacement
describes a new text which should replace an existing part of the document. This is described
by offset and length. Applying the text replacements turns the unformatted document into a formatted 
document.

To invoke the formatter programmatically, you need to instantiate a codeRef[org.eclipse.xtext.formatting2.FormatterRequest][request]
and pass it to the codeRef[org.eclipse.xtext.formatting2.IFormatter2][formatter]. This allows to
obtain the list of applicable replacements. The document modification itself if performed by a 
codeRef[org.eclipse.xtext.formatting2.TextReplacements][utility] that is part of the formatting API.

Implementors of a formatter should extend the codeRef[org.eclipse.xtext.formatting2.AbstractFormatter2]
and add dispatch cases for the model elements that should be formatted. The format routine has to be
invoked recursively if the children of an object should be formatted, too.

The following example illustrates that pattern. An instance of package declaration is passed to the format
method along with the current codeRef[org.eclipse.xtext.formatting2.IFormattableDocument][formattable document].
In this scenario, the package name is surrounded by a single space, the curly brace is followed by a
new line and increased indentation etc. All elements within that package should be formatted, too, thus
code[format(..)] is invoked on these as well.

code[Xtend][
def dispatch void format(PackageDeclaration p, extension IFormattableDocument doc) {
  p.regionForFeature(ABSTRACT_ELEMENT__NAME).surround\[oneSpace\]
  p.regionForKeyword("{").append\[newLine; increaseIndentation\]
  for (AbstractElement element : p.elements) {
    format(element, doc);
    element.append\[setNewLines(1, 1, 2)\]
  }
  p.regionForKeyword("}").prepend\[decreaseIndentation\]
}
]

The API is designed in a way that allows to describe the formatting in a declarative way by calling methods
on the codeRef[org.eclipse.xtext.formatting2.IHiddenRegionFormatter] which is made available inside invocations
of code[prepend], code[surround] or code[append] to specify the formatting rules.
This can be done in arbitrary order - the infrastructure will reorder all the configurations to execute
them from top to bottom of the document. If the configuration based approach is not sufficient for a
particular use case, the codeRef[org.eclipse.xtext.formatting2.IFormattableDocument][document] accepts
also imperative logic that is associated with a given range. The codeRef[org.eclipse.xtext.formatting2.ITextReplacer]
that can be added directly to the document allows to perform all kinds of modifications to the text in
the region that it is associated with.

More detailed information about the API is available as JavaDoc on the code[org.eclipse.xtext.formatting2]
package.

section2:formattingOld[Before Xtext 2.8]

e[The API in code[org.eclipse.xtext.formatting] is available since the early days of Xtext
and still present in Xtext 2.8. However, it will be deprecated and eventually be removed 
because of the limitations that it imposes due to its declarative and static approach.
New formatting implementations should be based on the new API in code[org.eclipse.xtext.formatting2].] 

A formatter can be implemented via the codeRef[org.eclipse.xtext.formatting.IFormatter] 
service. Technically speaking, a formatter is a ref:tokenstream[Token Stream] which 
inserts/removes/modifies hidden tokens (white space, line-breaks, comments).

The formatter is invoked during the ref:serialization[serialization phase] and when the user triggers 
formatting in the editor (for example, using the CTRL+SHIFT+F shortcut).

Xtext ships with two formatters:
ul[
  item[The codeRef[org.eclipse.xtext.formatting.impl.OneWhitespaceFormatter] simply writes one 
    white space between all tokens.]
  item[The codeRef[org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter] allows advanced 
    configuration using a codeRef[org.eclipse.xtext.formatting.impl.FormattingConfig]. Both are explained
    below.]
]

A declarative formatter can be implemented by subclassing 
codeRef[org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter], as shown in 
the following example:

code[Java][
public class ExampleFormatter extends AbstractDeclarativeFormatter {

  @Override
  protected void configureFormatting(FormattingConfig c) {
    ExampleLanguageGrammarAccess f = getGrammarAccess();
    
    c.setAutoLinewrap(120);
    
    // find common keywords an specify formatting for them
    for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("(", ")")) {
      c.setNoSpace().after(pair.getFirst());
      c.setNoSpace().before(pair.getSecond());
    }
    for (Keyword comma : f.findKeywords(",")) {
      c.setNoSpace().before(comma);
    }

    // formatting for grammar rule Line
    c.setLinewrap(2).after(f.getLineAccess().getSemicolonKeyword_1());
    c.setNoSpace().before(f.getLineAccess().getSemicolonKeyword_1());
    
    // formatting for grammar rule TestIndentation
    c.setIndentationIncrement().after(
        f.getTestIndentationAccess().getLeftCurlyBracketKeyword_1());
    c.setIndentationDecrement().before(
        f.getTestIndentationAccess().getRightCurlyBracketKeyword_3());
    c.setLinewrap().after(
        f.getTestIndentationAccess().getLeftCurlyBracketKeyword_1());
    c.setLinewrap().after(
        f.getTestIndentationAccess().getRightCurlyBracketKeyword_3());
    
    // formatting for grammar rule Param
    c.setNoLinewrap().around(f.getParamAccess().getColonKeyword_1());
    c.setNoSpace().around(f.getParamAccess().getColonKeyword_1());
    
    // formatting for Comments 
    cfg.setLinewrap(0, 1, 2).before(g.getSL_COMMENTRule());
    cfg.setLinewrap(0, 1, 2).before(g.getML_COMMENTRule());
    cfg.setLinewrap(0, 1, 1).after(g.getML_COMMENTRule());
  }
}
]

The formatter has to implement the method code[Java][configureFormatting(...)] which declaratively sets up 
a codeRef[org.eclipse.xtext.formatting.impl.FormattingConfig].

The codeRef[org.eclipse.xtext.formatting.impl.FormattingConfig] consist of general 
settings and a set of formatting instructions:


section3[General FormattingConfig Settings]

code[Java][setAutoLinewrap(int)] defines the amount of characters after which a line-break should 
be dynamically inserted between two tokens. The instructions code[Java][setNoLinewrap().???()], 
code[Java][setNoSpace().???()] and code[Java][setSpace(space).???()] suppress this behavior locally. 
The default is 80.

section3[FormattingConfig Instructions]

Per default, the declarative formatter inserts one white space between two 
tokens. Instructions can be used to specify a different behavior. They consist of two parts: e[When] 
to apply the instruction and e[what] to do.

To understand e[when] an instruction is applied think of a stream of tokens whereas each token is 
associated with the corresponding grammar element. The instructions are matched against these grammar 
elements. The following matching criteria exist:
ul[
  item[code[Java][after(element)]: The instruction is applied after the grammar element has been matched. 
    For example, if your grammar uses the keyword code[Xtext][";"] to end lines, this can instruct the formatter 
    to insert a line break after the semicolon.]
  item[code[Java][before(element)]: The instruction is executed before the matched element. For example, if your 
    grammar contains lists which separate their values with the keyword code[Xtext][","], you can instruct the 
    formatter to suppress the white space before the comma.]
  item[code[Java][around(element)]: This is the same as code[Java][before(element)] combined with code[Java][after(element)].]
  item[code[Java][between(left, right)]: This matches if e[left] directly follows e[right] in the document. 
    There may be no other tokens in between e[left] and e[right].]
  item[code[Java][bounds(left, right)]: This is the same as code[Java][after(left)] combined with  code[Java][before(right)].]
  item[code[Java][range(start, end)]: The rule is enabled when e[start] is matched, and disabled when e[end] 
    is matched. Thereby, the rule is active for the complete region which is surrounded by e[start] 
    and e[end].]
]

The term e[tokens] is used slightly different here compared to the parser/lexer. Here, a token is a 
keyword or the string that is matched by a terminal rule, data type rule or cross-reference. In the 
terminology of the lexer a data type rule can match a composition of multiple tokens.

The parameter e[element] can be a grammar's codeRef[org.eclipse.xtext.AbstractElement] or a grammar's 
codeRef[org.eclipse.xtext.AbstractRule]. All grammar 
rules and almost all abstract elements can be matched. This includes rule calls, parser rules, groups 
and alternatives. The semantic of code[Java][before(element)], code[Java][after(element)], etc. for rule calls and parser rules is 
identical to when the parser would "pass" this part of the grammar. The stack of called rules is taken 
into account. The following abstract elements can e[not] have assigned formatting instructions:
ul[
  item[Actions. E.g. code[Xtext][{MyAction}] or code[Xtext][{MyAction.myFeature=current}].]
  item[Grammar elements nested in data type rules. This is due to to the fact that tokens matched 
    by a data type rule are treated as atomic by the serializer. To format these tokens, please 
    implement a ref:valueconverter[ValueConverter]. ]
  item[Grammar elements nested in codeRef[org.eclipse.xtext.CrossReference].]
]

After having explained how rules can be activated, this is what they can do:
ul[
  item[code[Java][setIndentationIncrement()] increments indentation by one unit at this position. Whether 
    one unit consists of one tab-character or spaces is defined by 
    codeRef[org.eclipse.xtext.formatting.IIndentationInformation]. The default implementation 
    consults Eclipse's codeRef[org.eclipse.jface.preference.IPreferenceStore].]
  item[code[Java][setIndentationDecrement()] decrements indentation by one unit.]
  item[code[Java][setLinewrap()]: Inserts a line-wrap at this position.]
  item[code[Java][setLinewrap(int count)]: Inserts e[count] numbers of line-wrap at this position.]
  item[code[Java][setLinewrap(int min, int def, int max)]: If the amount of line-wraps that have been 
    at this position before formatting can be determined (i.e. when a node model is present), 
    then the amount of of line-wraps is adjusted to be within the interval e[min], e[max] 
    and is then reused. In all other cases e[def] line-wraps are inserted. Example: 
    code[Java][setLinewrap(0, 0, 1)] will preserve existing line-wraps, but won't allow more than one 
    line-wrap between two tokens.]
  item[code[Java][setNoLinewrap()]: Suppresses automatic line wrap, which may occur when the line's length 
    exceeds the defined limit.]
  item[code[Java][setSpace(String space)]: Inserts the string e[space] at this position. If you use this 
    to insert something else than white space, tabs or newlines, a small puppy will die somewhere 
    in this world.]
  item[code[Java][setNoSpace()]: Suppresses the white space between tokens at this position. Be aware that 
    between some tokens a white space is required to maintain a valid concrete syntax.]
]


section3[Grammar Element Finders]

Sometimes, if a grammar contains many similar elements for which the same formatting instructions ought 
to apply, it can be tedious to specify them for each grammar element individually. The 
codeRef[org.eclipse.xtext.IGrammarAccess] provides convenience methods for this. The 
find methods are available for the grammar and for each parser rule.

ul[
  item[code[Java][findKeywords(String... keywords)] returns all keywords that equal one of the parameters.]
  item[code[Java][findKeywordPairs(String leftKw, String rightKw)]: returns tuples of keywords from the same 
    grammar rule. Pairs are matched nested and sequentially.  Example: for code[Xtext][Rule: '(' name=ID ('(' foo=ID ')') ')' | '(' bar=ID ')'] 
    code[Java][findKeywordPairs("(", ")")] returns three pairs.]
]